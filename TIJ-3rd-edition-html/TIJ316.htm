<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html lang="en">
<!--
This document was converted from RTF source: 
By r2net 5.8 r2netcmd Windows 
See http://www.logictran.com
-->
<head><meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Thinking in Java, 3rd ed. Revision 4.0: 14: Creating Windows  &amp; Applets</title>
<link rel="stylesheet" href="stylesheet.css" type="text/css"></head>

<body >
   <CENTER>     <a href="http://www.MindView.net">     <img src="mindview.gif" alt="MindView Inc." BORDER = "0"></a>     <Font FACE="Verdana, Tahoma, Arial, Helvetica, Sans">     <h2>Thinking in Java, 3<sup>rd</sup> ed. Revision 4.0</h2>     <FONT size = "-1"><br>     [ <a href="README.txt">Viewing Hints</a> ]     [ <a href="http://www.mindview.net/Books/TIJ/">Book Home Page</a> ]     [ <a href="http://www.mindview.net/Etc/MailingList.html">Free Newsletter</a> ] <br>     [ <a href="http://www.mindview.net/Seminars">Seminars</a> ]     [ <a href="http://www.mindview.net/CDs">Seminars on CD ROM</a> ]     [ <a href="http://www.mindview.net/Services">Consulting</a> ] <br><br>     </FONT></FONT>   </CENTER> 
<font face="Georgia"><div align="CENTER"><a href="TIJ315.htm" target="RightFrame"><img src="./prev.gif" alt="Previous " border="0"></a>
<a href="TIJ317.htm" target="RightFrame"><img src="./next.gif" alt="Next " border="0"></a>

<a href="TIJ3_t.htm"><img src="./first.gif" alt="Title Page " border="0"></a>
<a href="TIJ3_i.htm"><img src="./index.gif" alt="Index " border="0"></a>
<a href="TIJ3_c.htm"><img src="./contents.gif" alt="Contents " border="0"></a>
</div>
<hr>

<h1>
<a name="_Toc24272653"></a><a name="_Toc24775862"></a><a name="Heading18463"></a>14:
Creating Windows <br>&amp; Applets</h1>
<p class="Intro">A fundamental design guideline is &#147;make simple things easy, and difficult things possible.&#148;<sup> <a name="fnB74" href="#fn74">[74]</a></sup><br></p>
<p>The original design goal of the graphical user interface (GUI) library in Java 1.0 was to allow the programmer to build a GUI that looks good on all platforms. That goal was not achieved. Instead, the Java 1.0 <a name="Index1645"></a><a name="Index1646"></a><a name="Index1647"></a><a name="Index1648"></a><a name="Index1649"></a><i>Abstract Window Toolkit</i> (AWT) produced a GUI that looked equally mediocre on all systems. In addition, it was restrictive; you could use only four fonts and you couldn&#146;t access any of the more sophisticated GUI elements that exist in your operating system. The Java 1.0 AWT programming model is also awkward and non-object-oriented. A student in one of my seminars (who had been at Sun during the creation of Java) explained why: The original AWT had been conceptualized, designed, and implemented in a month. Certainly a marvel of productivity, and also an object lesson in why design is important. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1898" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>The situation improved with the Java 1.1 AWT event model, which takes a much clearer, object-oriented approach, along with the addition of JavaBeans, a component programming model that is oriented toward the easy creation of visual programming environments. Java 2 (JDK 1.2) finished the transformation away from the old Java 1.0 AWT by essentially replacing everything with the <a name="Index1650"></a><a name="Index1651"></a><i>Java Foundation Classes</i> (JFC), the GUI portion of which is called &#147;Swing.&#148; These are a rich set of easy-to-use, easy-to-understand JavaBeans that can be dragged and dropped (as well as hand programmed) to create a GUI that you can (finally) be satisfied with. The &#147;revision 3&#148; rule of the software industry (a product isn&#146;t good until revision 3) seems to hold true with programming languages as well. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1899" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p><a name="Index1652"></a>This chapter does not cover anything but the modern Java 2 Swing library and makes the reasonable assumption that Swing is the final destination GUI library for Java.<sup><a name="fnB75" href="#fn75">[75]</a></sup> If for some reason you need to use the original &#147;old&#148; AWT (because you&#146;re supporting old code or you have browser limitations), you can find that introduction in the first edition of this book, downloadable at <i>www.BruceEckel.com</i> (also included on the CD ROM bound with this book) Note that some AWT components remain in Java, and in some situations you must use them. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1900" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>Early in this chapter, you&#146;ll see how things are different when you want to create an applet versus a regular application using Swing, and how to create programs that are both applets and applications so they can be run either inside a browser or from the command line. Almost all the GUI examples in this book will be executable as both applets and applications. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1901" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>Please be aware that this is not a comprehensive glossary of either all the Swing components or all the methods for the described classes. What you see here is intended to be simple. The Swing library is vast, and the goal of this chapter is only to get you started with the essentials and comfortable with the concepts. If you need to do more, then Swing can probably give you what you want if you&#146;re willing to do the research. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1902" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>I assume here that you have downloaded and installed the JDK library documents in HTML format from <i>java.sun.com</i> and will browse the <b>javax.swing</b> classes in that documentation to see the full details and methods of the Swing library. Because of the simplicity of the Swing design, this will often be enough information to solve your problem. There are numerous (rather thick) books dedicated solely to Swing, and you&#146;ll want to go to those if you need more depth, or if you want to modify the default Swing behavior. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1903" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>As you learn about Swing, you&#146;ll discover:  <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1904" title="Send BackTalk Comment">Feedback</a></font><br></p>
<ol>
<li><a name="Index1653"></a><a name="Index1654"></a>Swing is a much better
programming model than you&#146;ve probably seen in other languages and
development environments. JavaBeans (which will be introduced toward the end of
this chapter) is the framework for that library. <font size="-2"><a
href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1905" title="Send BackTalk
Comment">Feedback</a></font></li>
<li>&#147;GUI builders&#148; (visual programming environments) are a <i>de
rigueur</i> aspect of a complete Java development environment. JavaBeans and
Swing allow the GUI builder to write code for you as you place components onto
forms using graphical tools. This not only rapidly speeds development during GUI
building, but it allows for greater experimentation and thus the ability to try
out more designs and presumably come up with a better one. <font size="-2"><a
href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1906" title="Send BackTalk
Comment">Feedback</a></font></li>
<li>The simplicity and well-designed nature of Swing means that even if you do
use a GUI builder rather than coding by hand, the resulting code will still be
comprehensible; this solves a big problem with GUI builders from the past, which
could easily generate unreadable code. <font size="-2"><a
href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1907" title="Send BackTalk
Comment">Feedback</a></font></li></ol><p>Swing contains all the components that you expect to see in a modern UI: everything from buttons that contain pictures to trees and tables. It&#146;s a big library, but it&#146;s designed to have appropriate complexity for the task at hand; if something is simple, you don&#146;t have to write much code, but as you try to do more complex things, your code becomes proportionally more complex. This means an easy entry point, but you&#146;ve got the power if you need it. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1908" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>Much of what you&#146;ll like about Swing could be called &#147;orthogonality of use.&#148; That is, once you pick up the general ideas about the library, you can apply them everywhere. Primarily because of the standard naming conventions, much of the time that I was writing these examples I could guess at the method names and get it right the first time without looking anything up. This is certainly the hallmark of a good library design. In addition, you can generally plug components into other components and things will work correctly. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1909" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>For speed, all the components are &#147;lightweight,&#148; and Swing is written entirely in Java for portability. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1910" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p><a name="Index1655"></a><a name="Index1656"></a><a name="Index1657"></a>Keyboard navigation is automatic; you can run a Swing application without using the mouse, and this doesn&#146;t require any extra programming. Scrolling support is effortless; you simply wrap your component in a <b>JScrollPane</b> as you add it to your form. Features such as tool tips typically require a single line of code to use. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1911" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>Swing also supports a rather radical feature called &#147;pluggable look and feel,&#148; which means that the appearance of the UI can be dynamically changed to suit the expectations of users working under different platforms and operating systems. It&#146;s even possible (albeit difficult) to invent your own look and feel. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1912" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h2>
<a name="_Toc375545446"></a><a name="_Toc24775863"></a><a name="Heading18482"></a>The
basic applet<br></h2>
<p><a name="Index1658"></a>Java has the ability to create <i>applets</i>, which are little programs that run inside a Web browser. Because they must be safe, applets are limited in what they can accomplish. However, applets are a powerful tool that support client-side programming, a major issue for the Web. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1913" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h3>
<a name="_Toc375545464"></a><a name="_Toc24775864"></a><a name="Heading18484"></a>Applet
restrictions<br></h3>
<p><a name="Index1659"></a><a name="Index1660"></a><a name="Index1661"></a>Programming within an applet is so restrictive that it&#146;s often referred to as being &#147;inside the sandbox,&#148; since you always have someone&#151;that is, the Java run-time security system&#151;watching over you. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1914" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>However, you can also step outside the sandbox and write regular applications rather than applets, in which case you can access the other features of your OS. We&#146;ve been writing regular applications all along in this book, but they&#146;ve been <i>console applications</i> without any graphical components. Swing can be used to build GUI interfaces for regular applications. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1915" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>You can generally answer the question of what an applet is able to do by looking at what it is <i>supposed</i> to do: extend the functionality of a Web page in a browser. Since, as a Net surfer, you never really know if a Web page is from a friendly place or not, you want any code that it runs to be safe. So the biggest restrictions you&#146;ll notice are probably:  <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1916" title="Send BackTalk Comment">Feedback</a></font><br></p>
<ol>
<li><a name="Index1662"></a><i></i><i>An applet can&#146;t touch the local
disk</i>. This means writing <i>or</i> reading, since you wouldn&#146;t want an
applet to read and transmit private information over the Internet without your
permission. Writing is prevented, of course, since that would be an open
invitation to a virus. Java offers <i>digital signing</i> for applets. Many
applet restrictions are relaxed when you choose to allow <i>signed applets</i>
(those signed by a trusted source) to have access to your machine. You&#146;ll
see an example later in this chapter, as well as an example of <i>Java Web
Start</i>, a way to safely send applications to a client over the Internet.
<font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1917"
title="Send BackTalk Comment">Feedback</a></font></li>
<li><i>Applets can take longer to display, </i>since you must download the whole
thing every time, including a separate server hit for each different class. Your
browser can cache the applet, but there are no guarantees. Because of this, you
should always package your applets in a JAR (Java ARchive) file that combines
all the applet components (including other <b>.class</b> files as well as images
and sounds) together into a single compressed file that can be downloaded in a
single server transaction. &#147;Digital signing&#148; is available for each
individual entry in the JAR file. <font size="-2"><a
href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1918" title="Send BackTalk
Comment">Feedback</a></font></li></ol><h3>
<a name="_Toc375545465"></a><a name="_Toc24775865"></a><a name="Heading18490"></a>Applet
advantages</h3>
<p>If you can live within the restrictions, applets have definite advantages, especially when building client/server or other networked applications:  <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1919" title="Send BackTalk Comment">Feedback</a></font><br></p>
<ol>
<li><a name="Index1663"></a><a name="Index1664"></a><a name="Index1665"></a><i></i><i>There
is no installation issue.</i> An applet has true platform independence
(including the ability to easily play audio files, etc.), so you don&#146;t
need to make any changes in your code for different platforms, nor does anyone
have to perform any installation &#147;tweaking.&#148; In fact, installation
is automatic every time the user loads a Web page that contains applets, so
updates happen silently and automatically. In traditional client/server systems,
building and installing a new version of the client software is often a
nightmare. <font size="-2"><a
href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1920" title="Send BackTalk
Comment">Feedback</a></font></li>
<li><i>You don&#146;t have to worry about bad code causing damage to
someone&#146;s system,</i> because of the security built into the core Java
language and applet structure. This, along with the previous point, makes Java
useful for so-called <i>intranet</i> client/server applications that live only
within a company or restricted arena of operation where the user environment
(Web browser and add-ins) can be specified and/or controlled. <font size="-2"><a
href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1921" title="Send BackTalk
Comment">Feedback</a></font></li></ol><p>Because applets are automatically integrated with HTML, you have a built-in platform-independent documentation system to support the applet. It&#146;s an interesting twist, since we&#146;re used to having the documentation part of the program rather than vice versa. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1922" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h3>
<a name="_Toc24775866"></a><a name="Heading18495"></a>Application
frameworks</h3>
<p>Libraries are often grouped according to their functionality. Some libraries, for example, are used as is, off the shelf. The standard Java library <b>String</b> and <b>ArrayList</b> classes are examples of these. Other libraries are designed specifically as building blocks to create other classes. A certain category of library is the <a name="Index1666"></a><a name="Index1667"></a><i>application framework</i>, whose goal is to help you build applications by providing a class or set of classes that produces the basic behavior that you need in every application of a particular type. Then, to customize the behavior to your own needs, you inherit from the application class and override the methods of interest. The application framework&#146;s default control mechanism will call your overridden methods at the appropriate time. An application framework is a good example of &#147;separating the things that change from the things that stay the same,&#148; since it attempts to localize all the unique parts of a program in the overridden methods.<sup><a name="fnB76" href="#fn76">[76]</a></sup> <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1923" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>Applets are built using an application framework. You inherit from class <b>JApplet</b> and override the appropriate methods. There are a few methods that control the creation and execution of an applet on a Web page: <br></p>
<div align="center" style="position:relative; left: 0"><table border="1">
<tr valign="top">
<th width="95.999976" colspan="1" rowspan="1" valign="top">
<p class="Table"><b>Method</b><br></p>
</th>
<th width="383.999904" colspan="1" rowspan="1" valign="top">
<p class="Table"><b>Operation</b><br></p>
</th>
</tr>
<tr valign="top">
<td width="95.999976" colspan="1" rowspan="1" valign="top">
<p class="Table"><b>init(&#160;)</b><br></p>
</td>
<td width="383.999904" colspan="1" rowspan="1" valign="top">
<p class="Table">Automatically called to perform first-time initialization of the applet, including component layout. You&#146;ll always override this method.<br></p>
</td>
</tr>
<tr valign="top">
<td width="95.999976" colspan="1" rowspan="1" valign="top">
<p class="Table"><b>start(&#160;)</b><br></p>
</td>
<td width="383.999904" colspan="1" rowspan="1" valign="top">
<p class="Table">Called every time the applet moves into sight on the Web browser to allow the applet to start up its normal operations (especially those that are shut off by <b>stop(&#160;)</b>). Also called after <b>init(&#160;)</b>.<br></p>
</td>
</tr>
<tr valign="top">
<td width="95.999976" colspan="1" rowspan="1" valign="top">
<p class="Table"><b>stop(&#160;)</b><br></p>
</td>
<td width="383.999904" colspan="1" rowspan="1" valign="top">
<p class="Table">Called every time the applet moves out of sight on the Web browser to allow the applet to shut off expensive operations. Also called right before <b>destroy(&#160;)</b>.<br></p>
</td>
</tr>
<tr valign="top">
<td width="95.999976" colspan="1" rowspan="1" valign="top">
<p class="Table"><b>destroy(&#160;)</b><br></p>
</td>
<td width="383.999904" colspan="1" rowspan="1" valign="top">
<p class="Table">Called when the applet is being unloaded from the page to perform final release of resources when the applet is no longer used<br></p>
</td>
</tr>
</table></div>
<p class="TableFollower">With this information you are ready to create a simple applet:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c14:Applet1.java</font>
<font color=#009900>// Very simple applet.</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> Applet1 <font color=#0000ff>extends</font> JApplet {
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    getContentPane().add(<font color=#0000ff>new</font> JLabel(<font color=#004488>"Applet!"</font>));
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p>Note that applets are not required to have a <b>main(&#160;)</b>. That&#146;s all wired into the application framework; you put any startup code in <b>init(&#160;)</b>. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1924" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>In this program, the only activity is putting a text label on the applet, via the <a name="Index1668"></a><b>JLabel</b> class (the old AWT appropriated the name <b>Label</b> as well as other names of components, so you will often see a leading &#147;<b>J</b>&#148; used with Swing components). The constructor for this class takes a <b>String</b> and uses it to create the label. In the preceding program this label is placed on the form. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1925" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p><a name="Index1669"></a>The <b>init(&#160;)</b> method is responsible for putting all the components on the form using the <b>add(&#160;)</b> method. You might think that you ought to be able to simply call <b>add(&#160;)</b> by itself, and in fact that&#146;s the way it used to be in the old AWT. However, Swing requires that you add all components to the &#147;content pane&#148; of a form, so you must call <b>getContentPane(&#160;)</b> as part of the <b>add(&#160;)</b> process. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1926" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h3>
<a name="_Toc24775867"></a><a name="Heading18524"></a>Running applets inside a
Web browser</h3>
<p>To run this program you must place it inside a Web page and view that page inside your Java-enabled Web browser. To place an applet inside a Web page, you put a special tag inside the HTML source for that Web page<a name="Index1670"></a><a name="Index1671"></a><sup><a name="fnB77" href="#fn77">[77]</a></sup> to tell the page how to load and run the applet. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1927" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>This process used to be very simple, when Java itself was simple and everyone was on the same bandwagon and incorporated the same Java support inside their Web browsers. Then you might have been able to get away with a very simple bit of HTML inside your Web page, like this:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>&lt;applet code=Applet1 width=100 height=50&gt;
&lt;/applet&gt;</PRE></FONT></BLOCKQUOTE><p><br></p>
<p>Then along came the browser and language wars, and we (programmers and end users alike) lost. After awhile, Sun realized that we could no longer expect browsers to support the correct flavor of Java, and the only solution was to provide some kind of add-on that would conform to a browser&#146;s extension mechanism. By using the extension mechanism (which a browser vendor cannot disable&#151;in an attempt to gain competitive advantage&#151;without breaking all the third-party extensions), Sun guarantees that Java cannot be shut out of the Web browser by an antagonistic vendor. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1928" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>With Internet Explorer, the extension mechanism is the ActiveX control, and with Netscape, it is the plug-in. In your HTML code, you must provide tags to support both, but you can automatically generate the necessary tags with the <b>HTMLconverter</b> tool that comes with the JDK download. Here&#146;s what the simplest resulting HTML page looks like for <b>Applet1</b> after running <b>HTMLconverter</b> on the preceding applet tag:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>&lt;!--<font color=#004488>"CONVERTED_APPLET"</font>--&gt;
&lt;!-- HTML CONVERTER --&gt;
&lt;OBJECT 
    classid = <font color=#004488>"clsid:CAFEEFAC-0014-0001-0000-ABCDEFFEDCBA"</font>
    codebase = <font color=#004488>"http:</font><font color=#004488>/</font><font color=#004488>/java.sun.com</font><font color=#004488>/products</font><font color=#004488>/plugin</font><font color=#004488>/autodl</font><font color=#004488>/jinstall-1_4_1-windows-i586.cab#Version=1,4,1,0"</font>
    WIDTH = 100 HEIGHT = 50 &gt;
    &lt;PARAM NAME = CODE VALUE = Applet1 &gt;
    &lt;PARAM NAME = <font color=#004488>"type"</font> VALUE = <font color=#004488>"application</font><font color=#004488>/x-java-applet;jpi-version=1.4.1"</font>&gt;
    &lt;PARAM NAME = <font color=#004488>"scriptable"</font> VALUE = <font color=#004488>"false"</font>&gt;
    &lt;COMMENT&gt;
      &lt;EMBED 
          type = <font color=#004488>"application</font><font color=#004488>/x-java-applet;jpi-version=1.4.1"</font> 
          CODE = Applet1
          WIDTH = 100
          HEIGHT = 50  
          scriptable = <font color=#0000ff>false</font> 
          pluginspage = <font color=#004488>"http:</font><font color=#004488>/</font><font color=#004488>/java.sun.com</font><font color=#004488>/products</font><font color=#004488>/plugin</font><font color=#004488>/index.html#download"</font>&gt;
          &lt;NOEMBED&gt;
          &lt;/NOEMBED&gt;
      &lt;/EMBED&gt;
    &lt;/COMMENT&gt;
&lt;/OBJECT&gt;
&lt;!--
&lt;APPLET CODE = Applet1 WIDTH = 100 HEIGHT = 50&gt;
&lt;/APPLET&gt;
--&gt;
&lt;!--<font color=#004488>"END_CONVERTED_APPLET"</font>--&gt;</PRE></FONT></BLOCKQUOTE><p><br></p>
<p>Some of these lines were too long and had to be wrapped to fit on the page. The code in this book&#146;s source code (downloadable from <i>www.BruceEckel.com</i>) will work without having to worry about correcting line wraps. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1929" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>The <b>code </b>value gives the name of the <b>.class </b>file where the applet resides. The <b>width</b> and <b>height</b> specify the initial size of the applet (in pixels, as before). There are other items you can place within the applet tag: a place to find other <b>.class </b>files on the Internet (<a name="Index1672"></a><a name="Index1673"></a><b>codebase</b>), alignment information (<a name="Index1674"></a><a name="Index1675"></a><b>align</b>), a special identifier that makes it possible for applets to communicate with each other (<a name="Index1676"></a><a name="Index1677"></a><b>name</b>), and applet parameters to provide information that the applet can retrieve. Parameters are in the form:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>&lt;param name=<font color=#004488>"identifier"</font> value = <font color=#004488>"information"</font>&gt;</PRE></FONT></BLOCKQUOTE><p><br></p>
<p>and there can be as many as you want. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1930" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>The source code package for this book (freely downloadable at <i>www.BruceEckel.com</i>)<i> </i>provides an HTML page for each of the applets in this book, and thus many examples of the applet tag, all driven from the <b>index.html</b> file corresponding to this chapter&#146;s source code. You can find a full and current description of the details of placing applets in Web pages at <i>java.sun.com</i>. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1931" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h3>
<a name="_Toc24775868"></a><a name="Heading18567"></a>Using
<i>Appletviewer</i></h3>
<p>Sun&#146;s JDK contains a tool called the <a name="Index1680"></a><i>Appletviewer</i> that picks the <b>&lt;applet&gt;</b> tags out of the HTML file and runs the applets without displaying the surrounding HTML text. Because the Appletviewer ignores everything but APPLET tags, you can put those tags in the Java source file as comments:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>// &lt;applet code=MyApplet width=200 height=100&gt;&lt;/applet&gt;</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p>This way, you can run &#147;<b>appletviewer MyApplet.java</b>&#148; and you don&#146;t need to create tiny HTML files to run tests. For example, you can add the commented HTML tags to <b>Applet1.java</b>:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c14:Applet1b.java</font>
<font color=#009900>// Embedding the applet tag for Appletviewer.</font>
<font color=#009900>// &lt;applet code=Applet1b width=100 height=50&gt;&lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> Applet1b <font color=#0000ff>extends</font> JApplet {
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    getContentPane().add(<font color=#0000ff>new</font> JLabel(<font color=#004488>"Applet!"</font>));
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p>Now you can invoke the applet with the command<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>appletviewer Applet1b.java</PRE></FONT></BLOCKQUOTE><p><br></p>
<p>In this book, this form will be used for easy testing of applets. Shortly, you&#146;ll see another coding approach that will allow you to execute applets from the command line without the Appletviewer. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1932" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h3>
<a name="_Toc24775869"></a><a name="Heading18588"></a>Testing applets</h3>
<p>You can perform a simple test without any network connection by starting up your Web browser and opening the HTML file containing the applet tag. As the HTML file is loaded, the browser will discover the applet tag and go hunt for the <b>.class</b> file specified by the <b>code</b> value. Of course, it looks at the CLASSPATH to find out where to hunt, and if your <b>.class</b> file isn&#146;t in the CLASSPATH, then it will give an error message on the status line of the browser to the effect that it couldn&#146;t find that <b>.class</b> file. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1933" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>When you want to try this out on your Web site, things are a little more complicated. First of all, you must <i>have</i> a Web site, which for most people means a third-party Internet Service Provider (ISP) at a remote location. Since the applet is just a file or set of files, the ISP does not have to provide any special support for Java. You must also have a way to move the HTML files and the <a name="Index1681"></a><a name="Index1682"></a><b>.class</b> files from your site to the correct directory on the ISP machine. This is typically done with a File Transfer Protocol (FTP) program, of which there are many different types available for free or as shareware. So it would seem that all you need to do is move the files to the ISP machine with FTP, then connect to the site and HTML file using your browser; if the applet comes up and works, then everything checks out, right? <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1934" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p><a name="Index1683"></a><a name="Index1684"></a>Here&#146;s where you can get fooled. If the browser on the client machine cannot locate the <b>.class</b> file on the server, it will hunt through the <a name="Index1685"></a><a name="Index1686"></a>CLASSPATH on your <i>local</i> machine. Thus, the applet might not be loading properly from the server, but to you it looks fine during your testing process because the browser finds it on your machine. When someone else connects, however, his or her browser can&#146;t find it. So when you&#146;re testing, make sure you erase the relevant <b>.class</b> files (or <b>.jar </b>file) on your local machine to verify that they exist in the proper location on the server. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1935" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>One of the most insidious places where this happened to me is when I innocently placed an applet inside a <b>package</b>. After uploading the HTML file and applet, it turned out that the server path to the applet was confused because of the package name. However, my browser found it in the local CLASSPATH. So I was the only one who could properly load the applet. It&#146;s important to specify the full class name including the package in the CODE parameter of your applet tag. In many published applet examples, the applet is not put inside a package, but it&#146;s generally best to use packages in production code. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1936" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h2>
<a name="_Toc24775870"></a><a name="Heading18593"></a>Running applets from the
command line<br></h2>
<p><a name="Index1687"></a><a name="Index1688"></a>There are times when you&#146;d like to make a windowed program do something else other than sit on a Web page. Perhaps you&#146;d also like it to do some of the things a &#147;regular&#148; application can do, but still have the vaunted instant portability provided by Java. In previous chapters in this book we&#146;ve made command-line applications, but in some operating environments (the Macintosh, for example) there isn&#146;t a command line. So for any number of reasons, you&#146;d like to build a windowed, non-applet program using Java. This is certainly a reasonable desire. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1937" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>The Swing library allows you to make an application that preserves the look and feel of the underlying operating environment. If you want to build windowed applications, it makes sense to do so<sup><a name="fnB78" href="#fn78">[78]</a></sup> only if you can use the latest version of Java and associated tools so you can deliver applications that won&#146;t confound your users. If for some reason you&#146;re forced to use an older version of Java, think hard before committing to building a significant windowed application. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1938" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p><a name="Index1689"></a><a name="Index1690"></a>Often you&#146;ll want to be able to create a class that can be invoked as either a window or an applet. This is especially convenient when you&#146;re testing the applets, since it&#146;s typically much faster and easier to run the resulting applet-application from the command line than it is to start up a Web browser or the Appletviewer. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1939" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>To create an applet that can be run from the console command line, you simply add a <b>main(&#160;)</b> to your applet that builds an instance of the applet inside a <b>Jframe</b>.<sup><a name="fnB79" href="#fn79">[79]</a></sup> As a simple example, let&#146;s look at <b>Applet1b.java</b> modified to work as both an application and an applet:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c14:Applet1c.java</font>
<font color=#009900>// An application and an applet.</font>
<font color=#009900>// &lt;applet code=Applet1c width=100 height=50&gt;&lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> Applet1c <font color=#0000ff>extends</font> JApplet {
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    getContentPane().add(<font color=#0000ff>new</font> JLabel(<font color=#004488>"Applet!"</font>));
  }
  <font color=#009900>// A main() for the application:</font>
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    JApplet applet = <font color=#0000ff>new</font> Applet1c();
    JFrame frame = <font color=#0000ff>new</font> JFrame(<font color=#004488>"Applet1c"</font>);
    <font color=#009900>// To close the application:</font>
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    frame.getContentPane().add(applet);
    frame.setSize(100,50);
    applet.init();
    applet.start();
    frame.setVisible(<font color=#0000ff>true</font>);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p><b>main(&#160;)</b> is the only element added to the applet, and the rest of the applet is untouched. The applet is created and added to a <b>JFrame</b> so that it can be displayed. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1940" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>You can see that in <b>main(&#160;)</b>, the applet is explicitly initialized and started because in this case the browser isn&#146;t available to do it for you. Of course, this doesn&#146;t provide the full behavior of the browser, which also calls <b>stop(&#160;)</b> and <b>destroy(&#160;)</b>, but for most situations it&#146;s acceptable. If it&#146;s a problem, you can force the calls yourself.<sup><a name="fnB80" href="#fn80">[80]</a></sup> <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1942" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>Notice the last line:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>frame.setVisible(<font color=#0000ff>true</font>);</PRE></FONT></BLOCKQUOTE><p><br></p>
<p>Without this, you won&#146;t see anything on the screen. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1943" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h3>
<a name="_Toc24775871"></a><a name="Heading18631"></a>A display
framework<br></h3>
<p><a name="Index1691"></a><a name="Index1692"></a>Although the code that turns programs into both applets and applications produces valuable results, if used everywhere it becomes distracting and wastes paper. Instead, the following display framework will be used for the Swing examples in the rest of this book:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: com:bruceeckel:swing:Console.java</font>
<font color=#009900>// Tool for running Swing demos from the</font>
<font color=#009900>// console, both applets and JFrames.</font>
<font color=#0000ff>package</font> com.bruceeckel.swing;
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.event.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> Console {
  <font color=#009900>// Create a title string from the class name:</font>
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> String title(Object o) {
    String t = o.getClass().toString();
    <font color=#009900>// Remove the word "class":</font>
    <font color=#0000ff>if</font>(t.indexOf(<font color=#004488>"class"</font>) != -1)
      t = t.substring(6);
    <font color=#0000ff>return</font> t;
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font>
  run(JFrame frame, <font color=#0000ff>int</font> width, <font color=#0000ff>int</font> height) {
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    frame.setSize(width, height);
    frame.setVisible(<font color=#0000ff>true</font>);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font>
  run(JApplet applet, <font color=#0000ff>int</font> width, <font color=#0000ff>int</font> height) {
    JFrame frame = <font color=#0000ff>new</font> JFrame(title(applet));
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    frame.getContentPane().add(applet);
    frame.setSize(width, height);
    applet.init();
    applet.start();
    frame.setVisible(<font color=#0000ff>true</font>);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font>
  run(JPanel panel, <font color=#0000ff>int</font> width, <font color=#0000ff>int</font> height) {
    JFrame frame = <font color=#0000ff>new</font> JFrame(title(panel));
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    frame.getContentPane().add(panel);
    frame.setSize(width, height);
    frame.setVisible(<font color=#0000ff>true</font>);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p>This is a tool you may want to use yourself, so it&#146;s placed in the library <a name="Index1693"></a><b>com.bruceeckel.swing</b>. The <b>Console</b> class consists entirely of <b>static</b> methods. The first is used to extract the class name (using RTTI) from any object and to remove the word &#147;class,&#148; which is typically prepended by <b>getClass(&#160;)</b>. This uses the <b>String</b> methods <b>indexOf(&#160;)</b> to determine whether the word &#147;class&#148; is there, and <b>substring(&#160;)</b> to produce the new string without &#147;class&#148; or the trailing space. This name is used to label the window that is displayed by the <b>run(&#160;)</b> methods. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1944" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p><b>setDefaultCloseOperation(&#160;)</b> causes a <b>JFrame</b> to exit a program when that <b>JFrame</b> is closed. The default behavior is to do nothing, so if you don&#146;t call <b>setDefaultCloseOperation(&#160;)</b> or write the equivalent code for your <b>JFrame</b><a name="Index1694"></a>, the application won&#146;t close. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1945" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>The <b>run(&#160;)</b> method is overloaded to work with <b>JApplet</b>s, <b>JPanel</b>s, and <b>JFrame</b>s. Note that only if it&#146;s a <b>JApplet</b> are <b>init(&#160;)</b> and <b>start(&#160;)</b> called. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1946" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>Now any applet can be run from the console by creating a <b>main(&#160;)</b> containing a line like this:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>Console.run(<font color=#0000ff>new</font> MyClass(), 500, 300);</PRE></FONT></BLOCKQUOTE><p><br></p>
<p>in which the last two arguments are the display width and height. Here&#146;s <b>Applet1c.java</b> modified to use <b>Console</b>:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c14:Applet1d.java</font>
<font color=#009900>// Console runs applets from the command line.</font>
<font color=#009900>// &lt;applet code=Applet1d width=100 height=50&gt;&lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> Applet1d <font color=#0000ff>extends</font> JApplet {
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    getContentPane().add(<font color=#0000ff>new</font> JLabel(<font color=#004488>"Applet!"</font>));
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> Applet1d(), 100, 50);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p>This allows the elimination of repeated code while providing the greatest flexibility in running the examples. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1947" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h2>
<a name="_Toc375545447"></a><a name="_Toc24775872"></a><a name="Heading18699"></a>Making
a button<br></h2>
<p><a name="Index1695"></a><a name="Index1696"></a>Making a button is quite simple: you just call the <b>JButton</b> constructor with the label you want on the button. You&#146;ll see later that you can do fancier things, like putting graphic images on buttons. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1952" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>Usually, you&#146;ll want to create a field for the button inside your class so that you can refer to it later. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1953" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>The <b>JButton</b> is a component&#151;its own little window&#151;that will automatically get repainted as part of an update. This means that you don&#146;t explicitly paint a button or any other kind of control; you simply place them on the form and let them automatically take care of painting themselves. So to place a button on a form, you do it inside <b>init(&#160;)</b>:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c14:Button1.java</font>
<font color=#009900>// Putting buttons on an applet.</font>
<font color=#009900>// &lt;applet code=Button1 width=200 height=50&gt;&lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> Button1 <font color=#0000ff>extends</font> JApplet {
  <font color=#0000ff>private</font> JButton
    b1 = <font color=#0000ff>new</font> JButton(<font color=#004488>"Button 1"</font>),
    b2 = <font color=#0000ff>new</font> JButton(<font color=#004488>"Button 2"</font>);
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    Container cp = getContentPane();
    cp.setLayout(<font color=#0000ff>new</font> FlowLayout());
    cp.add(b1);
    cp.add(b2);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> Button1(), 200, 50);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p>Something new has been added here: Before any elements are placed on the content pane, it is given a new &#147;layout manager,&#148; of type <b>FlowLayout</b>. The layout manager is the way that the pane implicitly decides where to place the control on the form. The normal behavior of an applet is to use the <b>BorderLayout</b>, but that won&#146;t work here because (as you will learn later in this chapter when controlling the layout of a form is examined in more detail) it defaults to covering each control entirely with every new one that is added. However, <b>FlowLayout</b> causes the controls to flow evenly onto the form, left to right and top to bottom. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1954" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h2>
<a name="_Toc375545448"></a><a name="_Toc24775873"></a><a name="Heading18726"></a>Capturing
an event<br></h2>
<p><a name="Index1697"></a>You&#146;ll notice that if you compile and run the preceding applet, nothing happens when you press the buttons. This is where you must step in and write some code to determine what will happen. The basis of event-driven programming, which comprises a lot of what a GUI is about, is tying events to code that responds to those events. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1955" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p><a name="Index1698"></a><a name="Index1699"></a>The way that this is accomplished in Swing is by cleanly separating the interface (the graphical components) and the implementation (the code that you want to run when an event happens to a component). Each Swing component can report all the events that might happen to it, and it can report each kind of event individually. So if you&#146;re not interested in, for example, whether the mouse is being moved over your button, you don&#146;t register your interest in that event. It&#146;s a very straightforward and elegant way to handle event-driven programming, and once you understand the basic concepts, you can easily use Swing components that you haven&#146;t seen before&#151;in fact, this model extends to anything that can be classified as a JavaBean (discussed later in the chapter). <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1956" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>At first, we will just focus on the main event of interest for the components being used. In the case of a <b>JButton</b>, this &#147;event of interest&#148; is that the button is pressed.<b> </b>To register your interest in when a button is pressed, you call the <b>JButton</b>&#146;s <b>addActionListener(&#160;)</b> method. This method expects an argument that is an object that implements the <b>ActionListener</b> interface, which contains a single method called <b>actionPerformed(&#160;)</b>. So all you have to do to attach code to a <b>JButton</b> is to implement the <b>ActionListener</b> interface in a class, and register an object of that class with the <b>JButton</b> via <b>addActionListener(&#160;)</b>. The method will be called when the button is pressed (this is normally referred to as a <a name="Index1700"></a><i>callback</i>). <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1957" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>But what should the result of pressing that button be? We&#146;d like to see something change on the screen, so a new Swing component will be introduced: the <a name="Index1701"></a><b>JTextField</b>. This is a place where text can be typed, or in this case, inserted by the program. Although there are a number of ways to create a <b>JTextField</b>, the simplest is just to tell the constructor how wide you want that field to be. Once the <b>JTextField</b> is placed on the form, you can modify its contents by using the <b>setText(&#160;)</b> method (there are many other methods in <b>JTextField</b>, but you must look these up in the HTML documentation for the JDK from <i>java.sun.com</i>). Here is what it looks like:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c14:Button2.java</font>
<font color=#009900>// Responding to button presses.</font>
<font color=#009900>// &lt;applet code=Button2 width=200 height=75&gt;&lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> Button2 <font color=#0000ff>extends</font> JApplet {
  <font color=#0000ff>private</font> JButton
    b1 = <font color=#0000ff>new</font> JButton(<font color=#004488>"Button 1"</font>),
    b2 = <font color=#0000ff>new</font> JButton(<font color=#004488>"Button 2"</font>);
  <font color=#0000ff>private</font> JTextField txt = <font color=#0000ff>new</font> JTextField(10);
  <font color=#0000ff>class</font> ButtonListener <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      String name = ((JButton)e.getSource()).getText();
      txt.setText(name);
    }
  }
  <font color=#0000ff>private</font> ButtonListener bl = <font color=#0000ff>new</font> ButtonListener();
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    b1.addActionListener(bl);
    b2.addActionListener(bl);
    Container cp = getContentPane();
    cp.setLayout(<font color=#0000ff>new</font> FlowLayout());
    cp.add(b1);
    cp.add(b2);
    cp.add(txt);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> Button2(), 200, 75);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p>Creating a <b>JTextField</b> and placing it on the canvas takes the same steps as for <b>Jbutton</b>s or for any Swing component. The difference in the preceding program is in the creation of the aforementioned <b>ActionListener</b> class <b>ButtonListener</b>. The argument to <b>actionPerformed(&#160;)</b> is of type <b>ActionEvent</b>, which contains all the information about the event and where it came from. In this case, I wanted to describe the button that was pressed; <b>getSource(&#160;)</b> produces the object where the event originated, and I assumed (using a cast) that the object is a <b>JButton</b>. <b>getText(&#160;)</b> returns the text that&#146;s on the button, and this is placed in the <b>JTextField</b> to prove that the code was actually called when the button was pressed. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1958" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>In <b>init(&#160;)</b>, <b>addActionListener(&#160;)</b> is used to register the <b>ButtonListener</b> object with both the buttons. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1959" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>It is often more convenient to code the <b>ActionListener</b> as an anonymous inner class, especially since you tend to use only a single instance of each listener class. <a name="Index1702"></a><a name="Index1703"></a><a name="Index1704"></a><b>Button2.java</b> can be modified to use an anonymous inner class as follows: <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1960" title="Send BackTalk Comment">Feedback</a></font><br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c14:Button2b.java</font>
<font color=#009900>// Using anonymous inner classes.</font>
<font color=#009900>// &lt;applet code=Button2b width=200 height=75&gt;&lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> Button2b <font color=#0000ff>extends</font> JApplet {
  <font color=#0000ff>private</font> JButton
    b1 = <font color=#0000ff>new</font> JButton(<font color=#004488>"Button 1"</font>),
    b2 = <font color=#0000ff>new</font> JButton(<font color=#004488>"Button 2"</font>);
  <font color=#0000ff>private</font> JTextField txt = <font color=#0000ff>new</font> JTextField(10);
  <font color=#0000ff>private</font> ActionListener bl = <font color=#0000ff>new</font> ActionListener() {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      String name = ((JButton)e.getSource()).getText();
      txt.setText(name);
    }
  };
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    b1.addActionListener(bl);
    b2.addActionListener(bl);
    Container cp = getContentPane();
    cp.setLayout(<font color=#0000ff>new</font> FlowLayout());
    cp.add(b1);
    cp.add(b2);
    cp.add(txt);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> Button2b(), 200, 75);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p>The approach of using an anonymous inner class will be preferred (when possible) for the examples in this book. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1961" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h2>
<a name="_Toc375545450"></a><a name="_Toc24775874"></a><a name="Heading18802"></a>Text
areas</h2>
<p>A <a name="Index1705"></a><b>JTextArea</b> is like a <b>JTextField</b> except that it can have multiple lines and has more functionality. A particularly useful method is <b>append(&#160;)</b>; with this you can easily pour output into the <b>JTextArea</b>, thus making a Swing program an improvement (since you can scroll backward) over what has been accomplished thus far using command-line programs that print to standard output. As an example, the following program fills a <b>JTextArea</b> with the output from the <b>geography</b> generator in Chapter 11:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c14:TextArea.java</font>
<font color=#009900>// Using the JTextArea control.</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.util.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;
<font color=#0000ff>import</font> com.bruceeckel.util.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> TextArea <font color=#0000ff>extends</font> JFrame {
  <font color=#0000ff>private</font> JButton
    b = <font color=#0000ff>new</font> JButton(<font color=#004488>"Add Data"</font>),
    c = <font color=#0000ff>new</font> JButton(<font color=#004488>"Clear Data"</font>);
  <font color=#0000ff>private</font> JTextArea t = <font color=#0000ff>new</font> JTextArea(20, 40);
  <font color=#0000ff>private</font> Map m = <font color=#0000ff>new</font> HashMap();
  <font color=#0000ff>public</font> TextArea() {
    <font color=#009900>// Use up all the data:</font>
    Collections2.fill(m, Collections2.geography,
      CountryCapitals.pairs.length);
    b.addActionListener(<font color=#0000ff>new</font> ActionListener() {
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
        Iterator it = m.entrySet().iterator();
        <font color=#0000ff>while</font>(it.hasNext()) {
          Map.Entry me = (Map.Entry)(it.next());
          t.append(me.getKey() + <font color=#004488>": "</font>+ me.getValue()+<font color=#004488>"\n"</font>);
        }
      }
    });
    c.addActionListener(<font color=#0000ff>new</font> ActionListener() {
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
        t.setText(<font color=#004488>""</font>);
      }
    });
    Container cp = getContentPane();
    cp.setLayout(<font color=#0000ff>new</font> FlowLayout());
    cp.add(<font color=#0000ff>new</font> JScrollPane(t));
    cp.add(b);
    cp.add(c);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> TextArea(), 475, 425);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p>This is a <b>JFrame</b> rather than a <b>JApplet</b> because it reads from the local disk, and therefore cannot be run as an applet in an HTML page. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0547" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>In <b>init(&#160;)</b>, the <b>Map</b> is filled with all the countries and their capitals. Note that for both buttons, the <a name="Index1706"></a><b>ActionListener</b> is created and added without defining an intermediate variable, since you never need to refer to that listener again during the program. The &#147;Add Data&#148; button formats and appends all the data, and the &#147;Clear Data&#148; button uses <b>setText(&#160;)</b> to remove all the text from the <b>JTextArea</b>. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1962" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>As the <b>JTextArea</b> is added to the applet, it is wrapped in a <a name="Index1707"></a><a name="Index1708"></a><b>JScrollPane</b> to control scrolling when too much text is placed on the screen. That&#146;s all you must do in order to produce full scrolling capabilities. Having tried to figure out how to do the equivalent in some other GUI programming environments, I am very impressed with the simplicity and good design of components like <b>JScrollPane</b>. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1963" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h2>
<a name="_Toc24775875"></a><a name="Heading18851"></a>Controlling
layout<br></h2>
<p><a name="Index1709"></a>The way that you place components on a form in Java is probably different from any other GUI system you&#146;ve used. First, it&#146;s all code; there are no &#147;resources&#148; that control placement of components. Second, the way components are placed on a form is controlled not by absolute positioning but by a &#147;layout manager&#148; that decides how the components lie based on the order that you <b>add(&#160;)</b> them. The size, shape, and placement of components will be remarkably different from one layout manager to another. In addition, the layout managers adapt to the dimensions of your applet or application window, so if the window dimension is changed, the size, shape, and placement of the components can change in response. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1964" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p><a name="Index1710"></a><a name="Index1711"></a><b>JApplet</b>, <b>JFrame JWindow</b>, and <b>JDialog</b> can all produce a <b>Container </b>with <b>getContentPane(&#160;) </b>that can contain and display <b>Component</b>s. In <b>Container,</b> there&#146;s a method called <a name="Index1712"></a><b>setLayout(&#160;)</b> that allows you to choose a different layout manager. Other classes, such as <a name="Index1713"></a><b>JPanel</b>, contain and display components directly, so you also set the layout manager directly, without using the content pane. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1965" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>In this section we&#146;ll explore the various layout managers by placing buttons in them (since that&#146;s the simplest thing to do). There won&#146;t be any capturing of button events because these examples are just intended to show how the buttons are laid out. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1966" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h3>
<a name="_Toc375545458"></a><a name="_Toc375545459"></a><a name="_Toc24775876"></a><a name="Heading18855"></a>BorderLayout</h3>
<p>Applets use a default layout scheme: the <a name="Index1714"></a><b>BorderLayout</b> (a number of the previous examples have changed the layout manager to <b>FlowLayout</b>). Without any other instruction, this takes whatever you <b>add(&#160;) </b>to it and places it in the center, stretching the object all the way out to the edges. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1967" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>However, there&#146;s more to the <b>BorderLayout</b>. This layout manager has the concept of four border regions and a center area. When you add something to a panel that&#146;s using a <b>BorderLayout</b>, you can use the overloaded <b>add(&#160;)</b> method that takes a constant value as its first argument. This value can be any of the following:<b> </b><br></p>
<div style="position:relative; left: 18"><table border="1">
<tr valign="top">
<td width="215.999946" colspan="1" rowspan="1" valign="top">
<p class="Table"><a name="Index1715"></a><a name="Index1716"></a><a name="Index1717"></a><a name="Index1718"></a><b>BorderLayout. NORTH</b><br></p>
</td>
<td width="239.999940" colspan="1" rowspan="1" valign="top">
<p class="Table">Top<br></p>
</td>
</tr>
<tr valign="top">
<td width="215.999946" colspan="1" rowspan="1" valign="top">
<p class="Table"><b>BorderLayout. SOUTH</b><br></p>
</td>
<td width="239.999940" colspan="1" rowspan="1" valign="top">
<p class="Table">Bottom<br></p>
</td>
</tr>
<tr valign="top">
<td width="215.999946" colspan="1" rowspan="1" valign="top">
<p class="Table"><b>BorderLayout. EAST</b><br></p>
</td>
<td width="239.999940" colspan="1" rowspan="1" valign="top">
<p class="Table">Right<br></p>
</td>
</tr>
<tr valign="top">
<td width="215.999946" colspan="1" rowspan="1" valign="top">
<p class="Table"><b>BorderLayout. WEST</b><br></p>
</td>
<td width="239.999940" colspan="1" rowspan="1" valign="top">
<p class="Table">Left<br></p>
</td>
</tr>
<tr valign="top">
<td width="215.999946" colspan="1" rowspan="1" valign="top">
<p class="Table"><b>BorderLayout.CENTER</b><br></p>
</td>
<td width="239.999940" colspan="1" rowspan="1" valign="top">
<p class="Table">Fill the middle, up to the other components or to the edges<br></p>
</td>
</tr>
</table></div>
<p class="TableFollower">If you don&#146;t specify an area to place the object, it defaults to <b>CENTER</b>. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1969" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>Here&#146;s a simple example. The default layout is used, since <b>JApplet</b> defaults to <b>BorderLayout</b>:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c14:BorderLayout1.java</font>
<font color=#009900>// Demonstrates BorderLayout.</font>
<font color=#009900>//&lt;applet code=BorderLayout1 width=300 height=250&gt;&lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> BorderLayout1 <font color=#0000ff>extends</font> JApplet {
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    Container cp = getContentPane();
    cp.add(BorderLayout.NORTH, <font color=#0000ff>new</font> JButton(<font color=#004488>"North"</font>));
    cp.add(BorderLayout.SOUTH, <font color=#0000ff>new</font> JButton(<font color=#004488>"South"</font>));
    cp.add(BorderLayout.EAST, <font color=#0000ff>new</font> JButton(<font color=#004488>"East"</font>));
    cp.add(BorderLayout.WEST, <font color=#0000ff>new</font> JButton(<font color=#004488>"West"</font>));
    cp.add(BorderLayout.CENTER, <font color=#0000ff>new</font> JButton(<font color=#004488>"Center"</font>));
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> BorderLayout1(), 300, 250);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p>For every placement but <b>CENTER</b>, the element that you add is compressed to fit in the smallest amount of space along one dimension while it is stretched to the maximum along the other dimension. <b>CENTER</b>, however, spreads out in both dimensions to occupy the middle. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1970" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h3>
<a name="_Toc24775877"></a><a name="Heading18892"></a>FlowLayout<br></h3>
<p><a name="Index1719"></a>This simply &#147;flows&#148; the components onto the form, from left to right until the top space is full, then moves down a row and continues flowing. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1971" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>Here&#146;s an example that sets the layout manager to <b>FlowLayout</b> and then places buttons on the form. You&#146;ll notice that with <b>FlowLayout</b>, the components take on their &#147;natural&#148; size. A <b>JButton</b>, for example, will be the size of its string. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1972" title="Send BackTalk Comment">Feedback</a></font><br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c14:FlowLayout1.java</font>
<font color=#009900>// Demonstrates FlowLayout.</font>
<font color=#009900>// &lt;applet code=FlowLayout1 width=300 height=250&gt;&lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> FlowLayout1 <font color=#0000ff>extends</font> JApplet {
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    Container cp = getContentPane();
    cp.setLayout(<font color=#0000ff>new</font> FlowLayout());
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; 20; i++)
      cp.add(<font color=#0000ff>new</font> JButton(<font color=#004488>"Button "</font> + i));
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> FlowLayout1(), 300, 250);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p>All components will be compacted to their smallest size in a <b>FlowLayout</b>, so you might get a little bit of surprising behavior. For example, because a <b>JLabel</b> will be the size of its string, attempting to right-justify its text yields an unchanged display when using <b>FlowLayout</b>. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1973" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h3>
<a name="_Toc375545460"></a><a name="_Toc24775878"></a><a name="Heading18915"></a>GridLayout</h3>
<p>A <a name="Index1720"></a><b>GridLayout</b> allows you to build a table of components, and as you add them, they are placed left-to-right and top-to-bottom in the grid. In the constructor you specify the number of rows and columns that you need, and these are laid out in equal proportions. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1974" title="Send BackTalk Comment">Feedback</a></font><br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c14:GridLayout1.java</font>
<font color=#009900>// Demonstrates GridLayout.</font>
<font color=#009900>// &lt;applet code=GridLayout1 width=300 height=250&gt;&lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> GridLayout1 <font color=#0000ff>extends</font> JApplet {
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    Container cp = getContentPane();
    cp.setLayout(<font color=#0000ff>new</font> GridLayout(7,3));
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; 20; i++)
      cp.add(<font color=#0000ff>new</font> JButton(<font color=#004488>"Button "</font> + i));
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> GridLayout1(), 300, 250);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p>In this case there are 21 slots but only 20 buttons. The last slot is left empty because no &#147;balancing&#148; goes on with a <b>GridLayout</b>. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1975" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h3>
<a name="_Toc375545462"></a><a name="_Toc24775879"></a><a name="Heading18937"></a>GridBagLayout</h3>
<p>The <a name="Index1721"></a><b>GridBagLayout </b>provides you with tremendous control in deciding exactly how the regions of your window will lay themselves out and reformat themselves when the window is resized. However, it&#146;s also the most complicated layout manager, and is quite difficult to understand. It is intended primarily for automatic code generation by a GUI builder (GUI builders might use <b>GridBagLayout</b> instead of absolute placement). If your design is so complicated that you feel you need to use <b>GridBagLayout</b>, then you should be using a GUI builder tool to generate that design. If you feel you must know the intricate details, I&#146;ll refer you to <i>Core Java 2, Volume 1</i>, by Horstmann &amp; Cornell (Prentice Hall, 2001), or a dedicated Swing book as a starting point. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1976" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h3>
<a name="_Toc24775880"></a><a name="Heading18939"></a>Absolute positioning</h3>
<p>It is also possible to set the absolute position of the graphical components in this way:<br></p>
<ol>
<li><a name="Index1722"></a>Set a <b>null</b> layout manager for your
<b>Container</b>: <b>setLayout(null)</b>. <font size="-2"><a
href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1977" title="Send BackTalk
Comment">Feedback</a></font></li>
<li>Call <b>setBounds(&#160;)</b> or <b>reshape(&#160;)</b> (depending on the
language version) for each component, passing a bounding rectangle in pixel
coordinates. You can do this in the constructor or in <b>paint(&#160;)</b>,
depending on what you want to achieve. <font size="-2"><a
href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1978" title="Send BackTalk
Comment">Feedback</a></font></li></ol><p>Some GUI builders use this approach extensively, but this is usually not the best way to generate code. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1979" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h3>
<a name="_Toc24775881"></a><a name="Heading18944"></a>BoxLayout<br></h3>
<p><a name="Index1723"></a>Because people had so much trouble understanding and working with <b>GridBagLayout</b>, Swing also includes <b>BoxLayout</b>, which gives you many of the benefits of <b>GridBagLayout</b> without the complexity, so you can often use it when you need to do hand-coded layouts (again, if your design becomes too complex, use a GUI builder that generates layouts for you). <b>BoxLayout</b> allows you to control the placement of components either vertically or horizontally, and to control the space between the components using something called &#147;<a name="Index1724"></a>struts and glue.&#148; First, let&#146;s see how to use the <a name="Index1725"></a><b>BoxLayout</b> directly, in the same way that the other layout managers have been demonstrated:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c14:BoxLayout1.java</font>
<font color=#009900>// Vertical and horizontal BoxLayouts.</font>
<font color=#009900>// &lt;applet code=BoxLayout1 width=450 height=200&gt;&lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> BoxLayout1 <font color=#0000ff>extends</font> JApplet {
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    JPanel jpv = <font color=#0000ff>new</font> JPanel();
    jpv.setLayout(<font color=#0000ff>new</font> BoxLayout(jpv, BoxLayout.Y_AXIS));
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; 5; i++)
      jpv.add(<font color=#0000ff>new</font> JButton(<font color=#004488>"jpv "</font> + i));
    JPanel jph = <font color=#0000ff>new</font> JPanel();
    jph.setLayout(<font color=#0000ff>new</font> BoxLayout(jph, BoxLayout.X_AXIS));
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; 5; i++)
      jph.add(<font color=#0000ff>new</font> JButton(<font color=#004488>"jph "</font> + i));
    Container cp = getContentPane();
    cp.add(BorderLayout.EAST, jpv);
    cp.add(BorderLayout.SOUTH, jph);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> BoxLayout1(), 450, 200);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p>The constructor for <b>BoxLayout</b> is a bit different than the other layout managers&#151;you provide the <b>Container</b> that is to be controlled by the <b>BoxLayout</b> as the first argument, and the direction of the layout as the second argument. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1980" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>To simplify matters, there&#146;s a special container called <b>Box</b> that uses <b>BoxLayout</b> as its native manager. The following example lays out components horizontally and vertically using <b>Box</b>, which has two <b>static</b> methods to create boxes with vertical and horizontal alignment:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c14:Box1.java</font>
<font color=#009900>// Vertical and horizontal BoxLayouts.</font>
<font color=#009900>// &lt;applet code=Box1 width=450 height=200&gt;&lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> Box1 <font color=#0000ff>extends</font> JApplet {
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    Box bv = Box.createVerticalBox();
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; 5; i++)
      bv.add(<font color=#0000ff>new</font> JButton(<font color=#004488>"bv "</font> + i));
    Box bh = Box.createHorizontalBox();
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; 5; i++)
      bh.add(<font color=#0000ff>new</font> JButton(<font color=#004488>"bh "</font> + i));
    Container cp = getContentPane();
    cp.add(BorderLayout.EAST, bv);
    cp.add(BorderLayout.SOUTH, bh);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> Box1(), 450, 200);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p>Once you have a <b>Box</b>, you pass it as a second argument when adding components to the content pane. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1981" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>Struts add space, measured in pixels, between components. To use a strut, you simply add it between the addition of the components that you want spaced apart:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c14:Box2.java</font>
<font color=#009900>// Adding struts.</font>
<font color=#009900>// &lt;applet code=Box2 width=450 height=300&gt;&lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> Box2 <font color=#0000ff>extends</font> JApplet {
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    Box bv = Box.createVerticalBox();
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; 5; i++) {
      bv.add(<font color=#0000ff>new</font> JButton(<font color=#004488>"bv "</font> + i));
      bv.add(Box.createVerticalStrut(i * 10));
    }
    Box bh = Box.createHorizontalBox();
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; 5; i++) {
      bh.add(<font color=#0000ff>new</font> JButton(<font color=#004488>"bh "</font> + i));
      bh.add(Box.createHorizontalStrut(i * 10));
    }
    Container cp = getContentPane();
    cp.add(BorderLayout.EAST, bv);
    cp.add(BorderLayout.SOUTH, bh);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> Box2(), 450, 300);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p>Struts separate components by a fixed amount, but glue is the opposite; it separates components by as much as possible. Thus it&#146;s more of a &#147;spring&#148; than &#147;glue&#148; (and the design on which this was based was called &#147;springs and struts,&#148; so the choice of the term is a bit mysterious). <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1982" title="Send BackTalk Comment">Feedback</a></font><br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c14:Box3.java</font>
<font color=#009900>// Using Glue.</font>
<font color=#009900>// &lt;applet code=Box3 width=450 height=300&gt;&lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> Box3 <font color=#0000ff>extends</font> JApplet {
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    Box bv = Box.createVerticalBox();
    bv.add(<font color=#0000ff>new</font> JLabel(<font color=#004488>"Hello"</font>));
    bv.add(Box.createVerticalGlue());
    bv.add(<font color=#0000ff>new</font> JLabel(<font color=#004488>"Applet"</font>));
    bv.add(Box.createVerticalGlue());
    bv.add(<font color=#0000ff>new</font> JLabel(<font color=#004488>"World"</font>));
    Box bh = Box.createHorizontalBox();
    bh.add(<font color=#0000ff>new</font> JLabel(<font color=#004488>"Hello"</font>));
    bh.add(Box.createHorizontalGlue());
    bh.add(<font color=#0000ff>new</font> JLabel(<font color=#004488>"Applet"</font>));
    bh.add(Box.createHorizontalGlue());
    bh.add(<font color=#0000ff>new</font> JLabel(<font color=#004488>"World"</font>));
    bv.add(Box.createVerticalGlue());
    bv.add(bh);
    bv.add(Box.createVerticalGlue());
    getContentPane().add(bv);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> Box3(), 450, 300);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p>A strut works in one direction, but a rigid area fixes the spacing between components in both directions:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c14:Box4.java</font>
<font color=#009900>// Rigid areas are like pairs of struts.</font>
<font color=#009900>// &lt;applet code=Box4 width=450 height=300&gt;&lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> Box4 <font color=#0000ff>extends</font> JApplet {
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    Box bv = Box.createVerticalBox();
    bv.add(<font color=#0000ff>new</font> JButton(<font color=#004488>"Top"</font>));
    bv.add(Box.createRigidArea(<font color=#0000ff>new</font> Dimension(120, 90)));
    bv.add(<font color=#0000ff>new</font> JButton(<font color=#004488>"Bottom"</font>));
    Box bh = Box.createHorizontalBox();
    bh.add(<font color=#0000ff>new</font> JButton(<font color=#004488>"Left"</font>));
    bh.add(Box.createRigidArea(<font color=#0000ff>new</font> Dimension(160, 80)));
    bh.add(<font color=#0000ff>new</font> JButton(<font color=#004488>"Right"</font>));
    bv.add(bh);
    getContentPane().add(bv);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> Box4(), 450, 300);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p>You should be aware that rigid areas are a bit controversial. Since they use absolute values, some people feel that they cause more trouble than they are worth. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1983" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h3>
<a name="_Toc24775882"></a><a name="Heading19087"></a>The best approach?</h3>
<p>Swing is powerful; it can get a lot done with a few lines of code. The examples shown in this book are reasonably simple, and for learning purposes it makes sense to write them by hand. You can actually accomplish quite a bit by combining simple layouts. At some point, however, it stops making sense to hand-code GUI forms; it becomes too complicated and is not a good use of your programming time. The Java and Swing designers oriented the language and libraries to support GUI building tools, which have been created for the express purpose of making your programming experience easier. As long as you understand what&#146;s going on with layouts and how to deal with the events (described next), it&#146;s not particularly important that you actually know the details of how to lay out components by hand; let the appropriate tool do that for you (Java is, after all, designed to increase programmer productivity). <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1984" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h2>
<a name="_Toc24775883"></a><a name="Heading19089"></a>The Swing event
model<br></h2>
<p><a name="Index1726"></a><a name="Index1727"></a><a name="Index1728"></a><a name="Index1729"></a><a name="Index1730"></a>In the Swing event model, a component can initiate (&#147;fire&#148;) an event. Each type of event is represented by a distinct class. When an event is fired, it is received by one or more &#147;listeners,&#148; which act on that event. Thus, the source of an event and the place where the event is handled can be separate. Since you typically use Swing components as they are, but need to write code that is called when the components receive an event, this is an excellent example of the separation of interface and implementation. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1985" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p><a name="Index1731"></a><a name="Index1732"></a>Each event listener is an object of a class that implements a particular type of listener interface. So as a programmer, all you do is create a listener object and register it with the component that&#146;s firing the event. This registration is performed by calling an <b>addXXXListener(&#160;)</b> method in the event-firing component, in which &#147;<b>XXX</b>&#148; represents the type of event listened for. You can easily know what types of events can be handled by noticing the names of the &#147;addListener&#148; methods, and if you try to listen for the wrong events, you&#146;ll discover your mistake at compile time. You&#146;ll see later in the chapter that JavaBeans also use the names of the &#147;addListener&#148; methods to determine what events a Bean can handle. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1986" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>All of your event logic, then, will go inside a listener class. When you create a listener class, the sole restriction is that it must implement the appropriate interface. You can create a global listener class, but this is a situation in which inner classes tend to be quite useful, not only because they provide a logical grouping of your listener classes inside the UI or business logic classes they are serving, but also because (as you shall see later) an inner-class object keeps a reference to its parent object, which provides a nice way to call across class and subsystem boundaries. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1987" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p><a name="Index1733"></a><a name="Index1734"></a>All the examples so far in this chapter have been using the Swing event model, but the remainder of this section will fill out the details of that model. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1988" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h3>
<a name="_Toc24775884"></a><a name="Heading19094"></a>Event and listener
types</h3>
<p>All Swing components include <b>addXXXListener(&#160;)</b> and <b>removeXXXListener(&#160;)</b> methods so that the appropriate types of listeners can be added and removed from each component. You&#146;ll notice that the &#147;<b>XXX</b>&#148; in each case also represents the argument for the method, for example, <b>addMyListener(MyListener m)</b>. The following table includes the basic associated events, listeners, and methods, along with the basic components that support those particular events by providing the <a name="Index1735"></a><b>addXXXListener(&#160;)</b> and <a name="Index1736"></a><b>removeXXXListener(&#160;)</b> methods. You should keep in mind that the event model is designed to be extensible, so you may encounter other events and listener types that are not covered in this table. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0071" title="Send BackTalk Comment">Feedback</a></font><br></p>
<div align="center" style="position:relative; left: 10"><table border="1">
<tr valign="top">
<th width="242.666606" colspan="1" rowspan="1" valign="top">
<p class="Table"><a name="Index1737"></a><a name="Index1738"></a><b>Event, listener interface and add- and remove-methods</b><br></p>
</th>
<th width="242.666606" colspan="1" rowspan="1" valign="top">
<p class="Table"><b>Components supporting this event</b><br></p>
</th>
</tr>
<tr valign="top">
<td width="242.666606" colspan="1" rowspan="1" valign="top">
<p class="Table"><b>ActionEvent</b><br><b>ActionListener</b><br><b>addActionListener(&#160;)</b><br><b>removeActionListener(&#160;)</b><br></p>
</td>
<td width="242.666606" colspan="1" rowspan="1" valign="top">
<p class="Table"><b>JButton, JList, JTextField, JMenuItem </b>and its derivatives<b> </b>including<b> JCheckBoxMenuItem, JMenu, </b>and<b> JpopupMenu</b><br></p>
</td>
</tr>
<tr valign="top">
<td width="242.666606" colspan="1" rowspan="1" valign="top">
<p class="Table"><b>AdjustmentEvent</b><br><b>AdjustmentListener</b><br><b>addAdjustmentListener(&#160;)</b><br><b>removeAdjustmentListener(&#160;)</b><br></p>
</td>
<td width="242.666606" colspan="1" rowspan="1" valign="top">
<p class="Table"><b>JScrollbar</b><br>and anything you create that implements the<b> Adjustable interface</b><br></p>
</td>
</tr>
<tr valign="top">
<td width="242.666606" colspan="1" rowspan="1" valign="top">
<p class="Table"><b>ComponentEvent</b><br><b>ComponentListener</b><br><b>addComponentListener(&#160;)</b><br><b>removeComponentListener(&#160;)</b><br></p>
</td>
<td width="242.666606" colspan="1" rowspan="1" valign="top">
<p class="Table"><b>*Component </b>and its derivatives, including <b>JButton, JCheckBox, JComboBox, Container, JPanel, JApplet, JScrollPane, Window, JDialog, JFileDialog, JFrame, JLabel, JList, JScrollbar, JTextArea, </b>and<b> JTextField</b><br></p>
</td>
</tr>
<tr valign="top">
<td width="242.666606" colspan="1" rowspan="1" valign="top">
<p class="Table"><b>ContainerEvent</b><br><b>ContainerListener</b><br><b>addContainerListener(&#160;)</b><br><b>removeContainerListener(&#160;)</b><br></p>
</td>
<td width="242.666606" colspan="1" rowspan="1" valign="top">
<p class="Table"><b>Container </b>and its derivatives, including<b> JPanel, JApplet, JScrollPane, Window, JDialog, JFileDialog, </b>and<b> JFrame</b><br></p>
</td>
</tr>
<tr valign="top">
<td width="242.666606" colspan="1" rowspan="1" valign="top">
<p class="Table"><b>FocusEvent</b><br><b>FocusListener</b><br><b>addFocusListener(&#160;)</b><br><b>removeFocusListener(&#160;)</b><br></p>
</td>
<td width="242.666606" colspan="1" rowspan="1" valign="top">
<p class="Table"><b>Component </b>and<b> derivatives*</b><br></p>
</td>
</tr>
<tr valign="top">
<td width="242.666606" colspan="1" rowspan="1" valign="top">
<p class="Table"><b>KeyEvent</b><br><b>KeyListener</b><br><b>addKeyListener(&#160;)</b><br><b>removeKeyListener(&#160;)</b><br></p>
</td>
<td width="242.666606" colspan="1" rowspan="1" valign="top">
<p class="Table"><b>Component </b>and<b> derivatives*</b><br></p>
</td>
</tr>
<tr valign="top">
<td width="242.666606" colspan="1" rowspan="1" valign="top">
<p class="Table"><b>MouseEvent </b>(for both clicks and motion)<br><b>MouseListener</b><br><b>addMouseListener(&#160;)</b><br><b>removeMouseListener(&#160;)</b><br></p>
</td>
<td width="242.666606" colspan="1" rowspan="1" valign="top">
<p class="Table"><b>Component </b>and<b> derivatives* </b><br></p>
</td>
</tr>
<tr valign="top">
<td width="242.666606" colspan="1" rowspan="1" valign="top">
<p class="Table"><b>MouseEvent</b><sup><a name="fnB81" href="#fn81">[81]</a></sup><b> </b>(for both clicks and motion)<br><b>MouseMotionListener</b><br><b>addMouseMotionListener(&#160;)</b><br><b>removeMouseMotionListener(&#160;)</b><br></p>
</td>
<td width="242.666606" colspan="1" rowspan="1" valign="top">
<p class="Table"><b>Component </b>and<b> derivatives*</b><br></p>
</td>
</tr>
<tr valign="top">
<td width="242.666606" colspan="1" rowspan="1" valign="top">
<p class="Table"><b>WindowEvent</b><br><b>WindowListener</b><br><b>addWindowListener(&#160;)</b><br><b>removeWindowListener(&#160;)</b><br></p>
</td>
<td width="242.666606" colspan="1" rowspan="1" valign="top">
<p class="Table"><b>Window </b>and its derivatives, including<b> JDialog, JFileDialog, and JFrame</b><br></p>
</td>
</tr>
<tr valign="top">
<td width="242.666606" colspan="1" rowspan="1" valign="top">
<p class="Table"><b>ItemEvent</b><br><b>ItemListener</b><br><b>addItemListener(&#160;)</b><br><b>removeItemListener(&#160;)</b><br></p>
</td>
<td width="242.666606" colspan="1" rowspan="1" valign="top">
<p class="Table"><b>JCheckBox, JCheckBoxMenuItem, JComboBox, JList, </b>and anything that implements the <b>ItemSelectable interface</b><br></p>
</td>
</tr>
<tr valign="top">
<td width="242.666606" colspan="1" rowspan="1" valign="top">
<p class="Table"><b>TextEvent</b><br><b>TextListener</b><br><b>addTextListener(&#160;)</b><br><b>removeTextListener(&#160;)</b><br></p>
</td>
<td width="242.666606" colspan="1" rowspan="1" valign="top">
<p class="Table">Anything derived from<b> JTextComponent, </b>including<b> JTextArea </b>and<b> JTextField</b><br></p>
</td>
</tr>
</table></div>
<p class="TableFollower">You can see that each type of component supports only certain types of events. It turns out to be rather difficult to look up all the events supported by each component. A simpler approach is to modify the <b>ShowMethods.java</b> program from Chapter 10 so that it displays all the event listeners supported by any Swing component that you enter. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0072" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p><a name="Index1739"></a>Chapter 10 introduced <a name="Index1740"></a><i>reflection</i> and used that feature to look up methods for a particular class&#151;either the entire list of methods or a subset of those whose names match a keyword that you provide. The magic of reflection is that it can automatically show you <i>all</i> the methods for a class without forcing you to walk up the inheritance hierarchy, examining the base classes at each level. Thus, it provides a valuable timesaving tool for programming; because the names of most Java methods are made nicely verbose and descriptive, you can search for the method names that contain a particular word of interest. When you find what you think you&#146;re looking for, check the JDK documentation. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1989" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>However, by Chapter 10 you hadn&#146;t seen Swing, so the tool in that chapter was developed as a command-line application. Here is the more useful GUI version, specialized to look for the &#147;addListener&#148; methods in Swing components: <br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c14:ShowAddListeners.java</font>
<font color=#009900>// Display the "addXXXListener" methods of any Swing class.</font>
<font color=#009900>// &lt;applet code=ShowAddListeners</font>
<font color=#009900>// width=500 height=400&gt;&lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> javax.swing.event.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> java.lang.reflect.*;
<font color=#0000ff>import</font> java.util.regex.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> ShowAddListeners <font color=#0000ff>extends</font> JApplet {
  <font color=#0000ff>private</font> JTextField name = <font color=#0000ff>new</font> JTextField(25);
  <font color=#0000ff>private</font> JTextArea results = <font color=#0000ff>new</font> JTextArea(40, 65);
  <font color=#0000ff>private</font> <font color=#0000ff>static</font> Pattern addListener =
    Pattern.compile(<font color=#004488>"(add\\w+?Listener\\(.*?\\))"</font>);
  <font color=#0000ff>private</font> <font color=#0000ff>static</font> Pattern qualifier =
    Pattern.compile(<font color=#004488>"\\w+\\."</font>);
  <font color=#0000ff>class</font> NameL <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      String nm = name.getText().trim();
      <font color=#0000ff>if</font>(nm.length() == 0) {
        results.setText(<font color=#004488>"No match"</font>);
        <font color=#0000ff>return</font>;
      }
      Class klass;
      <font color=#0000ff>try</font> {
        klass = Class.forName(<font color=#004488>"javax.swing."</font> + nm);
      } <font color=#0000ff>catch</font>(ClassNotFoundException ex) {
        results.setText(<font color=#004488>"No match"</font>);
        <font color=#0000ff>return</font>;
      }
      Method[] methods = klass.getMethods();
      results.setText(<font color=#004488>""</font>);
      <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; methods.length; i++) {
        Matcher matcher =
          addListener.matcher(methods[i].toString());
        <font color=#0000ff>if</font>(matcher.find())
          results.append(qualifier.matcher(
            matcher.group(1)).replaceAll(<font color=#004488>""</font>) + <font color=#004488>"\n"</font>);
      }
    }
  }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    NameL nameListener = <font color=#0000ff>new</font> NameL();
    name.addActionListener(nameListener);
    JPanel top = <font color=#0000ff>new</font> JPanel();
    top.add(<font color=#0000ff>new</font> JLabel(<font color=#004488>"Swing class name (press ENTER):"</font>));
    top.add(name);
    Container cp = getContentPane();
    cp.add(BorderLayout.NORTH, top);
    cp.add(<font color=#0000ff>new</font> JScrollPane(results));
    <font color=#009900>// Initial data and test:</font>
    name.setText(<font color=#004488>"JTextArea"</font>);
    nameListener.actionPerformed(
      <font color=#0000ff>new</font> ActionEvent(<font color=#004488>""</font>, 0 ,<font color=#004488>""</font>));
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> ShowAddListeners(), 500,400);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p>You enter the Swing class name that you want to look up in the <b>name JTextField</b>. The results are extracted using regular expressions, and displayed in a<b> JTextArea</b>. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1991" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>You&#146;ll notice that there are no buttons or other components to indicate that you want the search to begin. That&#146;s because the<b> JTextField</b> is monitored by an <b>ActionListener</b>. Whenever you make a change and press ENTER, the list is immediately updated. If the text field isn&#146;t empty, it is used inside <a name="Index1741"></a><a name="Index1742"></a><b>Class.forName(&#160;)</b> to try to look up the class. If the name is incorrect, <b>Class.forName(&#160;)</b> will fail, which means that it throws an exception. This is trapped, and the<b> JTextArea</b> is set to &#147;No match.&#148; But if you type in a correct name (capitalization counts), <b>Class.forName(&#160;)</b> is successful, and <b>getMethods(&#160;)</b> will return an array of <b>Method</b> objects. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1992" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>Two regular expressions are used here. The first, <b>addListener</b>, looks for &#147;add&#148; followed by any word characters, followed by &#147;Listener&#148; and the argument list in parentheses. Notice that this whole regular expression is surrounded by non-escaped parentheses, which means it will be accessible as a regular expression &#147;group&#148; when it matches. Inside <b>NameL.ActionPerformed(&#160;)</b>, a <b>Matcher</b> is created by passing each <b>Method</b> object to the <b>Pattern.matcher(&#160;)</b> method. When <b>find(&#160;)</b> is called for this <b>Matcher</b> object, it returns <b>true</b> only if a match occurs, and in that case you can select the first matching parenthesized group by calling <b>group(1)</b>. This string still contains qualifiers, so to strip them off the <b>qualifier</b> <b>Pattern</b> object is used just as it was in <b>c09:ShowMethods.java</b>. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0498" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>At the end of <b>init(&#160;)</b>, an initial value is placed in <b>name </b>and the action event is run to provide a test with initial data. <br></p>
<p>This program is a convenient way to investigate the capabilities of a Swing component. Once you know which events a particular component supports, you don&#146;t need to look anything up to react to that event. You simply:<br></p>
<ol>
<li>Take the name of the event class and remove the word
&#147;<b>Event</b>.&#148; Add the word &#147;<b>Listener</b>&#148; to what
remains. This is the listener interface you must implement in your inner class.
<font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1994"
title="Send BackTalk Comment">Feedback</a></font></li>
<li>Implement the interface above and write out the methods for the events you
want to capture. For example, you might be looking for mouse movements, so you
write code for the <b>mouseMoved(&#160;)</b> method of the
<b>MouseMotionListener</b> interface. (You must implement the other methods, of
course, but there&#146;s often a shortcut for this, which you&#146;ll see
soon.) <font size="-2"><a
href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1995" title="Send BackTalk
Comment">Feedback</a></font></li>
<li>Create an object of the listener class in Step 2. Register it with your
component with the method produced by prefixing &#147;<b>add</b>&#148; to your
listener name. For example, <b>addMouseMotionListener(&#160;)</b>. <font
size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1996"
title="Send BackTalk
Comment">Feedback</a></font></li></ol><p>Here are some of the listener interfaces: <br></p>
<div align="center" style="position:relative; left: 0"><table border="1">
<tr valign="top">
<th width="191.999952" colspan="1" rowspan="1" valign="top">
<p class="Table"><a name="Index1743"></a><b>Listener interface</b><br><b>w/ adapter</b><br></p>
</th>
<th width="317.333254" colspan="1" rowspan="1" valign="top">
<p class="Table"><b>Methods in interface</b><br></p>
</th>
</tr>
<tr valign="top">
<td width="191.999952" colspan="1" rowspan="1" valign="top">
<p class="Table"><b>ActionListener</b><br></p>
</td>
<td width="317.333254" colspan="1" rowspan="1" valign="top">
<p class="Table"><b>actionPerformed(ActionEvent)</b><br></p>
</td>
</tr>
<tr valign="top">
<td width="191.999952" colspan="1" rowspan="1" valign="top">
<p class="Table"><b>AdjustmentListener</b><br></p>
</td>
<td width="317.333254" colspan="1" rowspan="1" valign="top">
<p class="Table"><b>adjustmentValueChanged(</b><br><b> AdjustmentEvent)</b><br></p>
</td>
</tr>
<tr valign="top">
<td width="191.999952" colspan="1" rowspan="1" valign="top">
<p class="Table"><b>ComponentListener</b><br><b>ComponentAdapter</b><br></p>
</td>
<td width="317.333254" colspan="1" rowspan="1" valign="top">
<p class="Table"><b>componentHidden(ComponentEvent)</b><br><b>componentShown(ComponentEvent)</b><br><b>componentMoved(ComponentEvent)</b><br><b>componentResized(ComponentEvent)</b><br></p>
</td>
</tr>
<tr valign="top">
<td width="191.999952" colspan="1" rowspan="1" valign="top">
<p class="Table"><b>ContainerListener</b><br><b>ContainerAdapter</b><br></p>
</td>
<td width="317.333254" colspan="1" rowspan="1" valign="top">
<p class="Table"><b>componentAdded(ContainerEvent)</b><br><b>componentRemoved(ContainerEvent)</b><br></p>
</td>
</tr>
<tr valign="top">
<td width="191.999952" colspan="1" rowspan="1" valign="top">
<p class="Table"><b>FocusListener</b><br><b>FocusAdapter</b><br></p>
</td>
<td width="317.333254" colspan="1" rowspan="1" valign="top">
<p class="Table"><b>focusGained(FocusEvent)</b><br><b>focusLost(FocusEvent)</b><br></p>
</td>
</tr>
<tr valign="top">
<td width="191.999952" colspan="1" rowspan="1" valign="top">
<p class="Table"><b>KeyListener</b><br><b>KeyAdapter</b><br></p>
</td>
<td width="317.333254" colspan="1" rowspan="1" valign="top">
<p class="Table"><b>keyPressed(KeyEvent)</b><br><b>keyReleased(KeyEvent)</b><br><b>keyTyped(KeyEvent)</b><br></p>
</td>
</tr>
<tr valign="top">
<td width="191.999952" colspan="1" rowspan="1" valign="top">
<p class="Table"><b>MouseListener</b><br><b>MouseAdapter</b><br></p>
</td>
<td width="317.333254" colspan="1" rowspan="1" valign="top">
<p class="Table"><b>mouseClicked(MouseEvent)</b><br><b>mouseEntered(MouseEvent)</b><br><b>mouseExited(MouseEvent)</b><br><b>mousePressed(MouseEvent)</b><br><b>mouseReleased(MouseEvent)</b><br></p>
</td>
</tr>
<tr valign="top">
<td width="191.999952" colspan="1" rowspan="1" valign="top">
<p class="Table"><b>MouseMotionListener</b><br><b>MouseMotionAdapter</b><br></p>
</td>
<td width="317.333254" colspan="1" rowspan="1" valign="top">
<p class="Table"><b>mouseDragged(MouseEvent)</b><br><b>mouseMoved(MouseEvent)</b><br></p>
</td>
</tr>
<tr valign="top">
<td width="191.999952" colspan="1" rowspan="1" valign="top">
<p class="Table"><b>WindowListener</b><br><b>WindowAdapter</b><br></p>
</td>
<td width="317.333254" colspan="1" rowspan="1" valign="top">
<p class="Table"><b>windowOpened(WindowEvent)</b><br><b>windowClosing(WindowEvent) </b><br><b>windowClosed(WindowEvent) </b><br><b>windowActivated(WindowEvent) </b><br><b>windowDeactivated(WindowEvent) </b><br><b>windowIconified(WindowEvent) </b><br><b>windowDeiconified(WindowEvent)</b><br></p>
</td>
</tr>
<tr valign="top">
<td width="191.999952" colspan="1" rowspan="1" valign="top">
<p class="Table"><b>ItemListener</b><br></p>
</td>
<td width="317.333254" colspan="1" rowspan="1" valign="top">
<p class="Table"><b>itemStateChanged(ItemEvent)</b><br></p>
</td>
</tr>
</table></div>
<p class="TableFollower">This is not an exhaustive listing, partly because the event model allows you to create your own event types and associated listeners. Thus, you&#146;ll regularly come across libraries that have invented their own events, and the knowledge gained in this chapter will allow you to figure out how to use these events. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0073" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h4>
<a name="Heading19219"></a>Using listener adapters for simplicity<br></h4>
<p><a name="Index1744"></a><a name="Index1745"></a>In the table above, you can see that some listener interfaces have only one method. These are trivial to implement, because you&#146;ll implement them only when you want to write that particular method. However, the listener interfaces that have multiple methods can be less pleasant to use. For example, if you want to capture a mouse click (that isn&#146;t already captured for you, for example, by a button), then you need to write a method for <b>mouseClicked(&#160;)</b>. But since <b>MouseListener</b> is an <b>interface</b>, you must implement all of the other methods even if they don&#146;t do anything. This can be annoying. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1997" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>To solve the problem, some (but not all) of the listener interfaces that have more than one method are provided with <i>adapters</i>, the names of which you can see in the table above. Each adapter provides default empty methods for each of the interface methods. Then all you need to do is inherit from the adapter and override only the methods you need to change. For example, the typical <b>MouseListener</b> you&#146;ll use looks like this:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#0000ff>class</font> MyMouseListener <font color=#0000ff>extends</font> MouseAdapter {
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> mouseClicked(MouseEvent e) {
    <font color=#009900>// Respond to mouse click...</font>
  }
}</PRE></FONT></BLOCKQUOTE><p><br></p>
<p>The whole point of the adapters is to make the creation of listener classes easy. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1998" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>There is a downside to adapters, however, in the form of a pitfall. Suppose you write a <b>MouseAdapter</b> like the previous one:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#0000ff>class</font> MyMouseListener <font color=#0000ff>extends</font> MouseAdapter {
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> MouseClicked(MouseEvent e) {
    <font color=#009900>// Respond to mouse click...</font>
  }
}</PRE></FONT></BLOCKQUOTE><p><br></p>
<p>This doesn&#146;t work, but it will drive you crazy trying to figure out why, since everything will compile and run fine&#151;except that your method won&#146;t be called for a mouse click. Can you see the problem? It&#146;s in the name of the method: <b>MouseClicked(&#160;)</b> instead of <b>mouseClicked (&#160;)</b>. A simple slip in capitalization results in the addition of a completely new method. However, this is not the method that&#146;s called when the window is closing, so you don&#146;t get the desired results. Despite the inconvenience, an <b>interface</b> will guarantee that the methods are properly implemented. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_1999" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h3>
<a name="_Toc375545452"></a><a name="_Toc24775885"></a><a name="Heading19237"></a>Tracking
multiple events</h3>
<p>To prove to yourself that these events are in fact being fired, and as an interesting experiment, it&#146;s worth creating an applet that tracks extra behavior in a <b>JButton </b>(in addition to whether it has been pressed). This example also shows you how to inherit your own button object because that&#146;s what is used as the target of all the events of interest. To do so, you can just inherit from <a name="Index1746"></a><b>Jbutton</b>.<sup><a name="fnB82" href="#fn82">[82]</a></sup> <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2000" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>The <b>MyButton</b> class is an inner class of <b>TrackEvent</b>, so <b>MyButton</b> can reach into the parent window and manipulate its text fields, which is what&#146;s necessary to be able to write the status information into the fields of the parent. Of course, this is a limited solution, since <b>MyButton</b> can be used only in conjunction with <b>TrackEvent</b>. This kind of code is sometimes called &#147;highly coupled&#148;: <br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c14:TrackEvent.java</font>
<font color=#009900>// Show events as they happen.</font>
<font color=#009900>// &lt;applet code=TrackEvent width=700 height=500&gt;&lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> java.util.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> TrackEvent <font color=#0000ff>extends</font> JApplet {
  <font color=#0000ff>private</font> HashMap h = <font color=#0000ff>new</font> HashMap();
  <font color=#0000ff>private</font> String[] event = {
    <font color=#004488>"focusGained"</font>, <font color=#004488>"focusLost"</font>, <font color=#004488>"keyPressed"</font>,
    <font color=#004488>"keyReleased"</font>, <font color=#004488>"keyTyped"</font>, <font color=#004488>"mouseClicked"</font>,
    <font color=#004488>"mouseEntered"</font>, <font color=#004488>"mouseExited"</font>, <font color=#004488>"mousePressed"</font>,
    <font color=#004488>"mouseReleased"</font>, <font color=#004488>"mouseDragged"</font>, <font color=#004488>"mouseMoved"</font>
  };
  <font color=#0000ff>private</font> MyButton
    b1 = <font color=#0000ff>new</font> MyButton(Color.BLUE, <font color=#004488>"test1"</font>),
    b2 = <font color=#0000ff>new</font> MyButton(Color.RED, <font color=#004488>"test2"</font>);
  <font color=#0000ff>class</font> MyButton <font color=#0000ff>extends</font> JButton {
    <font color=#0000ff>void</font> report(String field, String msg) {
      ((JTextField)h.get(field)).setText(msg);
    }
    FocusListener fl = <font color=#0000ff>new</font> FocusListener() {
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> focusGained(FocusEvent e) {
        report(<font color=#004488>"focusGained"</font>, e.paramString());
      }
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> focusLost(FocusEvent e) {
        report(<font color=#004488>"focusLost"</font>, e.paramString());
      }
    };
    KeyListener kl = <font color=#0000ff>new</font> KeyListener() {
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> keyPressed(KeyEvent e) {
        report(<font color=#004488>"keyPressed"</font>, e.paramString());
      }
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> keyReleased(KeyEvent e) {
        report(<font color=#004488>"keyReleased"</font>, e.paramString());
      }
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> keyTyped(KeyEvent e) {
        report(<font color=#004488>"keyTyped"</font>, e.paramString());
      }
    };
    MouseListener ml = <font color=#0000ff>new</font> MouseListener() {
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> mouseClicked(MouseEvent e) {
        report(<font color=#004488>"mouseClicked"</font>, e.paramString());
      }
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> mouseEntered(MouseEvent e) {
        report(<font color=#004488>"mouseEntered"</font>, e.paramString());
      }
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> mouseExited(MouseEvent e) {
        report(<font color=#004488>"mouseExited"</font>, e.paramString());
      }
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> mousePressed(MouseEvent e) {
        report(<font color=#004488>"mousePressed"</font>, e.paramString());
      }
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> mouseReleased(MouseEvent e) {
        report(<font color=#004488>"mouseReleased"</font>, e.paramString());
      }
    };
    MouseMotionListener mml = <font color=#0000ff>new</font> MouseMotionListener() {
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> mouseDragged(MouseEvent e) {
        report(<font color=#004488>"mouseDragged"</font>, e.paramString());
      }
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> mouseMoved(MouseEvent e) {
        report(<font color=#004488>"mouseMoved"</font>, e.paramString());
      }
    };
    <font color=#0000ff>public</font> MyButton(Color color, String label) {
      <font color=#0000ff>super</font>(label);
      setBackground(color);
      addFocusListener(fl);
      addKeyListener(kl);
      addMouseListener(ml);
      addMouseMotionListener(mml);
    }
  }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    Container c = getContentPane();
    c.setLayout(<font color=#0000ff>new</font> GridLayout(event.length + 1, 2));
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; event.length; i++) {
      JTextField t = <font color=#0000ff>new</font> JTextField();
      t.setEditable(<font color=#0000ff>false</font>);
      c.add(<font color=#0000ff>new</font> JLabel(event[i], JLabel.RIGHT));
      c.add(t);
      h.put(event[i], t);
    }
    c.add(b1);
    c.add(b2);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> TrackEvent(), 700, 500);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p>In the <b>MyButton</b> constructor, the button&#146;s color is set with a call to <b>SetBackground(&#160;)</b>. The listeners are all installed with simple method calls. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2001" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>The <b>TrackEvent</b> class contains a <a name="Index1747"></a><b>HashMap</b> to hold the strings representing the type of event and <b>JTextField</b>s where information about that event is held. Of course, these could have been created statically rather than putting them in a <b>HashMap</b>, but I think you&#146;ll agree that it&#146;s a lot easier to use and change. In particular, if you need to add or remove a new type of event in <b>TrackEvent</b>, you simply add or remove a string in the <b>event</b> array&#151;everything else happens automatically. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2002" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>When <b>report(&#160;)</b> is called, it is given the name of the event and the parameter string from the event. It uses the <b>HashMap h </b>in the outer class to look up the actual <b>JTextField </b>associated with that event name and then places the parameter string into that field. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2003" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>This example is fun to play with because you can really see what&#146;s going on with the events in your program. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2004" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h2>
<a name="_Toc24775886"></a><a name="Heading19340"></a>A catalog of Swing
components<br></h2>
<p><a name="Index1748"></a>Now that you understand layout managers and the event model, you&#146;re ready to see how Swing components can be used. This section is a non-exhaustive tour of the Swing components and features that you&#146;ll probably use most of the time. Each example is intended to be reasonably small so that you can easily lift the code and use it in your own programs. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2005" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>Keep in mind:<br></p>
<ol>
<li>You can easily see what each of these examples looks like while running by
viewing the HTML pages in the downloadable source code for this chapter
(<i>www.BruceEckel.com</i>). <font size="-2"><a
href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2006" title="Send BackTalk
Comment">Feedback</a></font></li>
<li>The JDK documentation from <i>java.sun.com</i> contains all of the Swing
classes and methods (only a few are shown here). <font size="-2"><a
href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2007" title="Send BackTalk
Comment">Feedback</a></font></li>
<li>Because of the naming convention used for Swing events, it&#146;s fairly
easy to guess how to write and install a handler for a particular type of event.
Use the lookup program <b>ShowAddListeners.java</b> from earlier in this chapter
to aid in your investigation of a particular component. <font size="-2"><a
href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2008" title="Send BackTalk
Comment">Feedback</a></font></li>
<li>When things start to get complicated you should graduate to a GUI builder.
<font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2009"
title="Send BackTalk Comment">Feedback</a></font></li></ol><h3>
<a name="_Toc24775887"></a><a name="Heading19347"></a>Buttons</h3>
<p>Swing includes a number of different types of buttons. All buttons, check boxes, radio buttons, and even menu items are inherited from <a name="Index1749"></a><a name="Index1750"></a><b>AbstractButton</b> (which, since menu items are included, would probably have been better named &#147;AbstractSelector&#148; or something equally general). You&#146;ll see the use of menu items shortly, but the following example shows the various types of buttons available: <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2010" title="Send BackTalk Comment">Feedback</a></font><br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c14:Buttons.java</font>
<font color=#009900>// Various Swing buttons.</font>
<font color=#009900>// &lt;applet code=Buttons width=350 height=100&gt;&lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> javax.swing.plaf.basic.*;
<font color=#0000ff>import</font> javax.swing.border.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> Buttons <font color=#0000ff>extends</font> JApplet {
  <font color=#0000ff>private</font> JButton jb = <font color=#0000ff>new</font> JButton(<font color=#004488>"JButton"</font>);
  <font color=#0000ff>private</font> BasicArrowButton
    up = <font color=#0000ff>new</font> BasicArrowButton(BasicArrowButton.NORTH),
    down = <font color=#0000ff>new</font> BasicArrowButton(BasicArrowButton.SOUTH),
    right = <font color=#0000ff>new</font> BasicArrowButton(BasicArrowButton.EAST),
    left = <font color=#0000ff>new</font> BasicArrowButton(BasicArrowButton.WEST);
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    Container cp = getContentPane();
    cp.setLayout(<font color=#0000ff>new</font> FlowLayout());
    cp.add(jb);
    cp.add(<font color=#0000ff>new</font> JToggleButton(<font color=#004488>"JToggleButton"</font>));
    cp.add(<font color=#0000ff>new</font> JCheckBox(<font color=#004488>"JCheckBox"</font>));
    cp.add(<font color=#0000ff>new</font> JRadioButton(<font color=#004488>"JRadioButton"</font>));
    JPanel jp = <font color=#0000ff>new</font> JPanel();
    jp.setBorder(<font color=#0000ff>new</font> TitledBorder(<font color=#004488>"Directions"</font>));
    jp.add(up);
    jp.add(down);
    jp.add(left);
    jp.add(right);
    cp.add(jp);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> Buttons(), 350, 100);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p>This begins with the <a name="Index1751"></a><b>BasicArrowButton</b> from <b>javax.swing.plaf.basic</b>, then continues with the various specific types of buttons. When you run the example, you&#146;ll see that the toggle button holds its last position, in or out. But the check boxes and radio buttons behave identically to each other, just clicking on or off (they are inherited from <a name="Index1752"></a><b>JToggleButton</b>). <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2011" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h4>
<a name="Heading19387"></a>Button groups<br></h4>
<p><a name="Index1753"></a>If you want radio buttons to behave in an &#147;exclusive or&#148; fashion, you must add them to a &#147;button group.&#148; But, as the following example demonstrates, any <b>AbstractButton</b> can be added to a <b>ButtonGroup</b>. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2012" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>To avoid repeating a lot of code, this example uses reflection to generate the groups of different types of buttons. This is seen in <a name="Index1754"></a><b>makeBPanel(&#160;)</b>, which creates a button group and a <a name="Index1755"></a><b>JPanel</b>. The second argument to <b>makeBPanel(&#160;)</b> is an array of <b>String</b>. For each <b>String</b>, a button of the class represented by the first argument is added to the <b>JPanel</b>:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c14:ButtonGroups.java</font>
<font color=#009900>// Uses reflection to create groups</font>
<font color=#009900>// of different types of AbstractButton.</font>
<font color=#009900>// &lt;applet code=ButtonGroups width=500 height=300&gt;&lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> javax.swing.border.*;
<font color=#0000ff>import</font> java.lang.reflect.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> ButtonGroups <font color=#0000ff>extends</font> JApplet {
  <font color=#0000ff>private</font> <font color=#0000ff>static</font> String[] ids = {
    <font color=#004488>"June"</font>, <font color=#004488>"Ward"</font>, <font color=#004488>"Beaver"</font>,
    <font color=#004488>"Wally"</font>, <font color=#004488>"Eddie"</font>, <font color=#004488>"Lumpy"</font>,
  };
  <font color=#0000ff>static</font> JPanel makeBPanel(Class klass, String[] ids) {
    ButtonGroup bg = <font color=#0000ff>new</font> ButtonGroup();
    JPanel jp = <font color=#0000ff>new</font> JPanel();
    String title = klass.getName();
    title = title.substring(title.lastIndexOf('.') + 1);
    jp.setBorder(<font color=#0000ff>new</font> TitledBorder(title));
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; ids.length; i++) {
      AbstractButton ab = <font color=#0000ff>new</font> JButton(<font color=#004488>"failed"</font>);
      <font color=#0000ff>try</font> {
        <font color=#009900>// Get the dynamic constructor method</font>
        <font color=#009900>// that takes a String argument:</font>
        Constructor ctor =
          klass.getConstructor(<font color=#0000ff>new</font> Class[]{String.<font color=#0000ff>class</font>});
        <font color=#009900>// Create a new object:</font>
        ab = (AbstractButton)
          ctor.newInstance(<font color=#0000ff>new</font> Object[] { ids[i] });
      } <font color=#0000ff>catch</font>(Exception ex) {
        System.err.println(<font color=#004488>"can't create "</font> + klass);
      }
      bg.add(ab);
      jp.add(ab);
    }
    <font color=#0000ff>return</font> jp;
  }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    Container cp = getContentPane();
    cp.setLayout(<font color=#0000ff>new</font> FlowLayout());
    cp.add(makeBPanel(JButton.<font color=#0000ff>class</font>, ids));
    cp.add(makeBPanel(JToggleButton.<font color=#0000ff>class</font>, ids));
    cp.add(makeBPanel(JCheckBox.<font color=#0000ff>class</font>, ids));
    cp.add(makeBPanel(JRadioButton.<font color=#0000ff>class</font>, ids));
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> ButtonGroups(), 500, 300);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p>The title for the border is taken from the name of the class, stripping off all the path information. The <b>AbstractButton</b> is initialized to a <b>JButton</b> that has the label &#147;Failed,&#148; so if you ignore the exception message, you&#146;ll still see the problem on screen. The <a name="Index1756"></a><a name="Index1757"></a><b>getConstructor(&#160;)</b> method produces a <b>Constructor</b> object that takes the array of arguments of the types in the <a name="Index1758"></a><a name="Index1759"></a><b>Class </b>array passed to <b>getConstructor(&#160;)</b>. Then all you do is call <a name="Index1760"></a><a name="Index1761"></a><b>newInstance(&#160;)</b>, passing it an array of <b>Object</b> containing your actual arguments&#151;in this case, just the <b>String</b> from the <b>ids</b> array. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2013" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>This adds a little complexity to what is a simple process. To get &#147;exclusive or&#148; behavior with buttons, you create a button group and add each button for which you want that behavior to the group. When you run the program, you&#146;ll see that all the buttons except <b>JButton</b> exhibit this &#147;exclusive or&#148; behavior. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2014" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h3>
<a name="_Toc24775888"></a><a name="Heading19445"></a>Icons</h3>
<p>You can use an <a name="Index1762"></a><b>Icon</b> inside a <b>JLabel</b> or anything that inherits from <b>AbstractButton</b> (including <a name="Index1763"></a><b>JButton</b>, <a name="Index1764"></a><b>JCheckBox</b>, <a name="Index1765"></a><b>JRadioButton,</b> and the different kinds of <a name="Index1766"></a><b>JMenuItem</b>). Using <b>Icon</b>s with <b>JLabel</b>s is quite straightforward (you&#146;ll see an example later). The following example explores all the additional ways you can use <b>Icon</b>s with buttons and their descendants. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2015" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>You can use any <b>gif</b> files you want, but the ones used in this example are part of this book&#146;s code distribution, available at <i>www.BruceEckel.com</i>. To open a file and bring in the image, simply create an <a name="Index1767"></a><b>ImageIcon</b> and hand it the file name. From then on, you can use the resulting <b>Icon</b> in your program. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2016" title="Send BackTalk Comment">Feedback</a></font><br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c14:Faces.java</font>
<font color=#009900>// Icon behavior in Jbuttons.</font>
<font color=#009900>// &lt;applet code=Faces width=400 height=100&gt;&lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> java.io.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> Faces <font color=#0000ff>extends</font> JApplet {
  <font color=#0000ff>private</font> <font color=#0000ff>static</font> Icon[] faces;
  <font color=#0000ff>private</font> JButton jb, jb2 = <font color=#0000ff>new</font> JButton(<font color=#004488>"Disable"</font>);
  <font color=#0000ff>private</font> <font color=#0000ff>boolean</font> mad = <font color=#0000ff>false</font>;
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    faces = <font color=#0000ff>new</font> Icon[] {
      <font color=#0000ff>new</font> ImageIcon(getClass().getResource(<font color=#004488>"Face0.gif"</font>)),
      <font color=#0000ff>new</font> ImageIcon(getClass().getResource(<font color=#004488>"Face1.gif"</font>)),
      <font color=#0000ff>new</font> ImageIcon(getClass().getResource(<font color=#004488>"Face2.gif"</font>)),
      <font color=#0000ff>new</font> ImageIcon(getClass().getResource(<font color=#004488>"Face3.gif"</font>)),
      <font color=#0000ff>new</font> ImageIcon(getClass().getResource(<font color=#004488>"Face4.gif"</font>)),
    };
    jb = <font color=#0000ff>new</font> JButton(<font color=#004488>"JButton"</font>, faces[3]);
    Container cp = getContentPane();
    cp.setLayout(<font color=#0000ff>new</font> FlowLayout());
    jb.addActionListener(<font color=#0000ff>new</font> ActionListener() {
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
        <font color=#0000ff>if</font>(mad) {
          jb.setIcon(faces[3]);
          mad = <font color=#0000ff>false</font>;
        } <font color=#0000ff>else</font> {
          jb.setIcon(faces[0]);
          mad = <font color=#0000ff>true</font>;
        }
        jb.setVerticalAlignment(JButton.TOP);
        jb.setHorizontalAlignment(JButton.LEFT);
      }
    });
    jb.setRolloverEnabled(<font color=#0000ff>true</font>);
    jb.setRolloverIcon(faces[1]);
    jb.setPressedIcon(faces[2]);
    jb.setDisabledIcon(faces[4]);
    jb.setToolTipText(<font color=#004488>"Yow!"</font>);
    cp.add(jb);
    jb2.addActionListener(<font color=#0000ff>new</font> ActionListener() {
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
        <font color=#0000ff>if</font>(jb.isEnabled()) {
          jb.setEnabled(<font color=#0000ff>false</font>);
          jb2.setText(<font color=#004488>"Enable"</font>);
        } <font color=#0000ff>else</font> {
          jb.setEnabled(<font color=#0000ff>true</font>);
          jb2.setText(<font color=#004488>"Disable"</font>);
        }
      }
    });
    cp.add(jb2);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> Faces(), 400, 200);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p>An <b>Icon</b> can be used as an argument for many different Swing component constructors, but you can also use <a name="Index1768"></a><b>setIcon(&#160;)</b> to add or change an <b>Icon</b>. This example also shows how a <b>JButton</b> (or any <b>AbstractButton</b>) can set the various different sorts of icons that appear when things happen to that button: when it&#146;s pressed, disabled, or &#147;rolled over&#148; (the mouse moves over it without clicking). You&#146;ll see that this gives the button a nice animated feel. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2017" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h3>
<a name="Index1769"></a><a name="_Toc24775889"></a><a name="Heading19510"></a>Tool
tips<br></h3>
<p><a name="Index1770"></a>The previous example added a &#147;tool tip&#148; to the button. Almost all of the classes that you&#146;ll be using to create your user interfaces are derived from <a name="Index1771"></a><b>JComponent</b>, which contains a method called <a name="Index1772"></a><b>setToolTipText(String)</b>. So, for virtually anything you place on your form, all you need to do is say (for an object <b>jc </b>of any <b>JComponent</b>-derived class):<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>jc.setToolTipText(<font color=#004488>"My tip"</font>);</PRE></FONT></BLOCKQUOTE><p><br></p>
<p>and when the mouse stays over that <b>JComponent</b> for a predetermined period of time, a tiny box containing your text will pop up next to the mouse. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2018" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h3>
<a name="_Toc24775890"></a><a name="Heading19515"></a>Text fields<br></h3>
<p><a name="Index1773"></a>This example shows the extra behavior that <b>JTextField</b>s are capable of:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c14:TextFields.java</font>
<font color=#009900>// Text fields and Java events.</font>
<font color=#009900>// &lt;applet code=TextFields width=375 height=125&gt;&lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> javax.swing.event.*;
<font color=#0000ff>import</font> javax.swing.text.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> TextFields <font color=#0000ff>extends</font> JApplet {
  <font color=#0000ff>private</font> JButton
    b1 = <font color=#0000ff>new</font> JButton(<font color=#004488>"Get Text"</font>),
    b2 = <font color=#0000ff>new</font> JButton(<font color=#004488>"Set Text"</font>);
  <font color=#0000ff>private</font> JTextField
    t1 = <font color=#0000ff>new</font> JTextField(30),
    t2 = <font color=#0000ff>new</font> JTextField(30),
    t3 = <font color=#0000ff>new</font> JTextField(30);
  <font color=#0000ff>private</font> String s = <font color=#0000ff>new</font> String();
  <font color=#0000ff>private</font> UpperCaseDocument ucd = <font color=#0000ff>new</font> UpperCaseDocument();
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    t1.setDocument(ucd);
    ucd.addDocumentListener(<font color=#0000ff>new</font> T1());
    b1.addActionListener(<font color=#0000ff>new</font> B1());
    b2.addActionListener(<font color=#0000ff>new</font> B2());
    DocumentListener dl = <font color=#0000ff>new</font> T1();
    t1.addActionListener(<font color=#0000ff>new</font> T1A());
    Container cp = getContentPane();
    cp.setLayout(<font color=#0000ff>new</font> FlowLayout());
    cp.add(b1);
    cp.add(b2);
    cp.add(t1);
    cp.add(t2);
    cp.add(t3);
  }
  <font color=#0000ff>class</font> T1 <font color=#0000ff>implements</font> DocumentListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> changedUpdate(DocumentEvent e) {}
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> insertUpdate(DocumentEvent e) {
      t2.setText(t1.getText());
      t3.setText(<font color=#004488>"Text: "</font>+ t1.getText());
    }
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> removeUpdate(DocumentEvent e) {
      t2.setText(t1.getText());
    }
  }
  <font color=#0000ff>class</font> T1A <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>private</font> <font color=#0000ff>int</font> count = 0;
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      t3.setText(<font color=#004488>"t1 Action Event "</font> + count++);
    }
  }
  <font color=#0000ff>class</font> B1 <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      <font color=#0000ff>if</font>(t1.getSelectedText() == <font color=#0000ff>null</font>)
        s = t1.getText();
      <font color=#0000ff>else</font>
        s = t1.getSelectedText();
      t1.setEditable(<font color=#0000ff>true</font>);
    }
  }
  <font color=#0000ff>class</font> B2 <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      ucd.setUpperCase(<font color=#0000ff>false</font>);
      t1.setText(<font color=#004488>"Inserted by Button 2: "</font> + s);
      ucd.setUpperCase(<font color=#0000ff>true</font>);
      t1.setEditable(<font color=#0000ff>false</font>);
    }
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> TextFields(), 375, 125);
  }
}

<font color=#0000ff>class</font> UpperCaseDocument <font color=#0000ff>extends</font> PlainDocument {
  <font color=#0000ff>private</font> <font color=#0000ff>boolean</font> upperCase = <font color=#0000ff>true</font>;
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> setUpperCase(<font color=#0000ff>boolean</font> flag) {
    upperCase = flag;
  }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font>
  insertString(<font color=#0000ff>int</font> offset, String str, AttributeSet attSet)
  <font color=#0000ff>throws</font> BadLocationException {
    <font color=#0000ff>if</font>(upperCase) str = str.toUpperCase();
    <font color=#0000ff>super</font>.insertString(offset, str, attSet);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p>The <b>JTextField t3</b> is included as a place to report when the action listener for the<b> JTextField</b> <b>t1</b> is fired. You&#146;ll see that the action listener for a<b> JTextField</b> is fired only when you press the &#147;enter&#148; key. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2019" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>The<b> JTextField t1</b> has several listeners attached to it. The <b>T1</b> listener is a <b>DocumentListener </b>that responds to any change in the &#147;document&#148; (the contents of the <b>JTextField</b>, in this case).<b> </b>It automatically copies all text from <b>t1</b> into <b>t2</b>. In addition, <b>t1</b>&#146;s document is set to a derived class of <b>PlainDocument</b>, called <b>UpperCaseDocument</b>, which forces all characters to uppercase. It automatically detects backspaces and performs the deletion, adjusting the caret and handling everything as you would expect. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2020" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h3>
<a name="_Toc24775891"></a><a name="Heading19605"></a>Borders</h3>
<p><b>JComponent</b> contains a method called <b>setBorder(&#160;)</b><a name="Index1774"></a>, which allows you to place various interesting borders on any visible component. The following example demonstrates a number of the different borders that are available, using a method called <b>showBorder(&#160;)</b> that creates a <b>JPanel</b> and puts on the border in each case. Also, it uses RTTI to find the name of the border that you&#146;re using (stripping off all the path information), then puts that name in a <b>JLabel</b><a name="Index1775"></a> in the middle of the panel:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c14:Borders.java</font>
<font color=#009900>// Different Swing borders.</font>
<font color=#009900>// &lt;applet code=Borders width=500 height=300&gt;&lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> javax.swing.border.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> Borders <font color=#0000ff>extends</font> JApplet {
  <font color=#0000ff>static</font> JPanel showBorder(Border b) {
    JPanel jp = <font color=#0000ff>new</font> JPanel();
    jp.setLayout(<font color=#0000ff>new</font> BorderLayout());
    String nm = b.getClass().toString();
    nm = nm.substring(nm.lastIndexOf('.') + 1);
    jp.add(<font color=#0000ff>new</font> JLabel(nm, JLabel.CENTER),
      BorderLayout.CENTER);
    jp.setBorder(b);
    <font color=#0000ff>return</font> jp;
  }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    Container cp = getContentPane();
    cp.setLayout(<font color=#0000ff>new</font> GridLayout(2,4));
    cp.add(showBorder(<font color=#0000ff>new</font> TitledBorder(<font color=#004488>"Title"</font>)));
    cp.add(showBorder(<font color=#0000ff>new</font> EtchedBorder()));
    cp.add(showBorder(<font color=#0000ff>new</font> LineBorder(Color.BLUE)));
    cp.add(showBorder(
      <font color=#0000ff>new</font> MatteBorder(5,5,30,30,Color.GREEN)));
    cp.add(showBorder(
      <font color=#0000ff>new</font> BevelBorder(BevelBorder.RAISED)));
    cp.add(showBorder(
      <font color=#0000ff>new</font> SoftBevelBorder(BevelBorder.LOWERED)));
    cp.add(showBorder(<font color=#0000ff>new</font> CompoundBorder(
      <font color=#0000ff>new</font> EtchedBorder(),
      <font color=#0000ff>new</font> LineBorder(Color.RED))));
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> Borders(), 500, 300);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p>You can also create your own borders and put them inside buttons, labels, etc.&#151;anything derived from <b>JComponent</b>. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2021" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h3>
<a name="_Toc24775892"></a><a name="Heading19649"></a>JScrollPanes<br></h3>
<p><a name="Index1776"></a>Most of the time you&#146;ll just want to let a <b>JScrollPane</b> do its job, but you can also control which scroll bars are allowed&#151;vertical, horizontal, both, or neither:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c14:JScrollPanes.java</font>
<font color=#009900>// Controlling the scrollbars in a JScrollPane.</font>
<font color=#009900>// &lt;applet code=JScrollPanes width=300 height=725&gt;&lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> javax.swing.border.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> JScrollPanes <font color=#0000ff>extends</font> JApplet {
  <font color=#0000ff>private</font> JButton
    b1 = <font color=#0000ff>new</font> JButton(<font color=#004488>"Text Area 1"</font>),
    b2 = <font color=#0000ff>new</font> JButton(<font color=#004488>"Text Area 2"</font>),
    b3 = <font color=#0000ff>new</font> JButton(<font color=#004488>"Replace Text"</font>),
    b4 = <font color=#0000ff>new</font> JButton(<font color=#004488>"Insert Text"</font>);
  <font color=#0000ff>private</font> JTextArea
    t1 = <font color=#0000ff>new</font> JTextArea(<font color=#004488>"t1"</font>, 1, 20),
    t2 = <font color=#0000ff>new</font> JTextArea(<font color=#004488>"t2"</font>, 4, 20),
    t3 = <font color=#0000ff>new</font> JTextArea(<font color=#004488>"t3"</font>, 1, 20),
    t4 = <font color=#0000ff>new</font> JTextArea(<font color=#004488>"t4"</font>, 10, 10),
    t5 = <font color=#0000ff>new</font> JTextArea(<font color=#004488>"t5"</font>, 4, 20),
    t6 = <font color=#0000ff>new</font> JTextArea(<font color=#004488>"t6"</font>, 10, 10);
  <font color=#0000ff>private</font> JScrollPane
    sp3 = <font color=#0000ff>new</font> JScrollPane(t3,
      JScrollPane.VERTICAL_SCROLLBAR_NEVER,
      JScrollPane.HORIZONTAL_SCROLLBAR_NEVER),
    sp4 = <font color=#0000ff>new</font> JScrollPane(t4,
      JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,
      JScrollPane.HORIZONTAL_SCROLLBAR_NEVER),
    sp5 = <font color=#0000ff>new</font> JScrollPane(t5,
      JScrollPane.VERTICAL_SCROLLBAR_NEVER,
      JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS),
    sp6 = <font color=#0000ff>new</font> JScrollPane(t6,
      JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,
      JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
  <font color=#0000ff>class</font> B1L <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      t5.append(t1.getText() + <font color=#004488>"\n"</font>);
    }
  }
  <font color=#0000ff>class</font> B2L <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      t2.setText(<font color=#004488>"Inserted by Button 2"</font>);
      t2.append(<font color=#004488>": "</font> + t1.getText());
      t5.append(t2.getText() + <font color=#004488>"\n"</font>);
    }
  }
  <font color=#0000ff>class</font> B3L <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      String s = <font color=#004488>" Replacement "</font>;
      t2.replaceRange(s, 3, 3 + s.length());
    }
  }
  <font color=#0000ff>class</font> B4L <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      t2.insert(<font color=#004488>" Inserted "</font>, 10);
    }
  }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    Container cp = getContentPane();
    cp.setLayout(<font color=#0000ff>new</font> FlowLayout());
    <font color=#009900>// Create Borders for components:</font>
    Border brd = BorderFactory.createMatteBorder(
      1, 1, 1, 1, Color.BLACK);
    t1.setBorder(brd);
    t2.setBorder(brd);
    sp3.setBorder(brd);
    sp4.setBorder(brd);
    sp5.setBorder(brd);
    sp6.setBorder(brd);
    <font color=#009900>// Initialize listeners and add components:</font>
    b1.addActionListener(<font color=#0000ff>new</font> B1L());
    cp.add(b1);
    cp.add(t1);
    b2.addActionListener(<font color=#0000ff>new</font> B2L());
    cp.add(b2);
    cp.add(t2);
    b3.addActionListener(<font color=#0000ff>new</font> B3L());
    cp.add(b3);
    b4.addActionListener(<font color=#0000ff>new</font> B4L());
    cp.add(b4);
    cp.add(sp3);
    cp.add(sp4);
    cp.add(sp5);
    cp.add(sp6);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> JScrollPanes(), 300, 725);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p>Using different arguments in the <b>JScrollPane</b> constructor controls the scrollbars that are available. This example also dresses things up a bit using borders. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2022" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h3>
<a name="_Toc24775893"></a><a name="Heading19743"></a>A mini-editor<br></h3>
<p><a name="Index1777"></a>The <a name="Index1778"></a><b>JTextPane</b> control provides a great deal of support for editing, without much effort. The following example makes very simple use of this component, ignoring the bulk of the functionality of the class:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c14:TextPane.java</font>
<font color=#009900>// The JTextPane control is a little editor.</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;
<font color=#0000ff>import</font> com.bruceeckel.util.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> TextPane <font color=#0000ff>extends</font> JFrame {
  <font color=#0000ff>private</font> JButton b = <font color=#0000ff>new</font> JButton(<font color=#004488>"Add Text"</font>);
  <font color=#0000ff>private</font> JTextPane tp = <font color=#0000ff>new</font> JTextPane();
  <font color=#0000ff>private</font> <font color=#0000ff>static</font> Generator sg =
    <font color=#0000ff>new</font> Arrays2.RandStringGenerator(7);
  <font color=#0000ff>public</font> TextPane() {
    b.addActionListener(<font color=#0000ff>new</font> ActionListener() {
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
        <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 1; i &lt; 10; i++)
          tp.setText(tp.getText() + sg.next() + <font color=#004488>"\n"</font>);
      }
    });
    Container cp = getContentPane();
    cp.add(<font color=#0000ff>new</font> JScrollPane(tp));
    cp.add(BorderLayout.SOUTH, b);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> TextPane(), 475, 425);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p>The button just adds randomly generated text. The intent of the <b>JTextPane</b> is to allow text to be edited in place, so you will see that there is no <b>append(&#160;)</b> method. In this case (admittedly, a poor use of the capabilities of <b>JTextPane</b>), the text must be captured, modified, and placed back into the pane using <b>setText(&#160;)</b>. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2023" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>As mentioned before, the default layout behavior of an applet is to use the <b>BorderLayout</b>. If you add something to the pane without specifying any details, it just fills the center of the pane out to the edges. However, if you specify one of the surrounding regions (NORTH, SOUTH, EAST, or WEST) as is done here, the component will fit itself into that region; in this case, the button will nest down at the bottom of the screen. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2024" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>Notice the built-in features of <b>JTextPane</b>, such as automatic line wrapping. There are lots of other features that you can look up using the JDK documentation. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2025" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h3>
<a name="_Toc24775894"></a><a name="Heading19777"></a>Check boxes</h3>
<p>A check box provides a way to make a single on/off choice. It consists of a tiny box and a label. The box typically holds a little &#147;x&#148; (or some other indication that it is set) or is empty, depending on whether that item was selected. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2026" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p><a name="Index1779"></a>You&#146;ll normally create a <a name="Index1780"></a><b>JCheckBox</b> using a constructor that takes the label as an argument. You can get and set the state, and also get and set the label if you want to read or change it after the <b>JCheckBox</b> has been created. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2027" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>Whenever a <b>JCheckBox</b> is set or cleared, an event occurs, which you can capture the same way you do a button: by using an <b>ActionListener</b>. The following example uses a<b> JTextArea</b> to enumerate all the check boxes that have been checked:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c14:CheckBoxes.java</font>
<font color=#009900>// Using JCheckBoxes.</font>
<font color=#009900>// &lt;applet code=CheckBoxes width=200 height=200&gt;&lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> CheckBoxes <font color=#0000ff>extends</font> JApplet {
  <font color=#0000ff>private</font> JTextArea t = <font color=#0000ff>new</font> JTextArea(6, 15);
  <font color=#0000ff>private</font> JCheckBox
    cb1 = <font color=#0000ff>new</font> JCheckBox(<font color=#004488>"Check Box 1"</font>),
    cb2 = <font color=#0000ff>new</font> JCheckBox(<font color=#004488>"Check Box 2"</font>),
    cb3 = <font color=#0000ff>new</font> JCheckBox(<font color=#004488>"Check Box 3"</font>);
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    cb1.addActionListener(<font color=#0000ff>new</font> ActionListener() {
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
        trace(<font color=#004488>"1"</font>, cb1);
      }
    });
    cb2.addActionListener(<font color=#0000ff>new</font> ActionListener() {
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
        trace(<font color=#004488>"2"</font>, cb2);
      }
    });
    cb3.addActionListener(<font color=#0000ff>new</font> ActionListener() {
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
        trace(<font color=#004488>"3"</font>, cb3);
      }
    });
    Container cp = getContentPane();
    cp.setLayout(<font color=#0000ff>new</font> FlowLayout());
    cp.add(<font color=#0000ff>new</font> JScrollPane(t));
    cp.add(cb1);
    cp.add(cb2);
    cp.add(cb3);
  }
  <font color=#0000ff>private</font> <font color=#0000ff>void</font> trace(String b, JCheckBox cb) {
    <font color=#0000ff>if</font>(cb.isSelected())
      t.append(<font color=#004488>"Box "</font> + b + <font color=#004488>" Set\n"</font>);
    <font color=#0000ff>else</font>
      t.append(<font color=#004488>"Box "</font> + b + <font color=#004488>" Cleared\n"</font>);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> CheckBoxes(), 200, 200);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p>The <b>trace(&#160;)</b> method sends the name of the selected <b>JCheckBox</b> and its current state to the<b> JTextArea</b> using <b>append(&#160;)</b>, so you&#146;ll see a cumulative list of the checkboxes that were selected and what their state is. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2028" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h3>
<a name="_Toc375545453"></a><a name="_Toc24775895"></a><a name="Heading19830"></a>Radio
buttons</h3>
<p>The concept of a radio button in GUI programming comes from pre-electronic car radios with mechanical buttons; when you push one in, any other button that was pressed pops out. Thus, it allows you to force a single choice among many. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2029" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p><a name="Index1781"></a><a name="Index1782"></a>All you need to do to set up an associated group of <a name="Index1783"></a><b>JRadioButton</b>s is to add them to a <a name="Index1784"></a><b>ButtonGroup</b> (you can have any number of <b>ButtonGroup</b>s on a form). One of the buttons can optionally have its starting state set to <b>true</b> (using the second argument in the constructor). If you try to set more than one radio button to <b>true</b>, then only the final one set will be <b>true</b>. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2030" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>Here&#146;s a simple example of the use of radio buttons. Note that you capture radio button events like all others:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c14:RadioButtons.java</font>
<font color=#009900>// Using JRadioButtons.</font>
<font color=#009900>// &lt;applet code=RadioButtons width=200 height=100&gt;&lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> RadioButtons <font color=#0000ff>extends</font> JApplet {
  <font color=#0000ff>private</font> JTextField t = <font color=#0000ff>new</font> JTextField(15);
  <font color=#0000ff>private</font> ButtonGroup g = <font color=#0000ff>new</font> ButtonGroup();
  <font color=#0000ff>private</font> JRadioButton
    rb1 = <font color=#0000ff>new</font> JRadioButton(<font color=#004488>"one"</font>, <font color=#0000ff>false</font>),
    rb2 = <font color=#0000ff>new</font> JRadioButton(<font color=#004488>"two"</font>, <font color=#0000ff>false</font>),
    rb3 = <font color=#0000ff>new</font> JRadioButton(<font color=#004488>"three"</font>, <font color=#0000ff>false</font>);
  <font color=#0000ff>private</font> ActionListener al = <font color=#0000ff>new</font> ActionListener() {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      t.setText(<font color=#004488>"Radio button "</font> +
        ((JRadioButton)e.getSource()).getText());
    }
  };
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    rb1.addActionListener(al);
    rb2.addActionListener(al);
    rb3.addActionListener(al);
    g.add(rb1); g.add(rb2); g.add(rb3);
    t.setEditable(<font color=#0000ff>false</font>);
    Container cp = getContentPane();
    cp.setLayout(<font color=#0000ff>new</font> FlowLayout());
    cp.add(t);
    cp.add(rb1);
    cp.add(rb2);
    cp.add(rb3);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> RadioButtons(), 200, 100);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p>To display the state, a text field is used. This field is set to non-editable because it&#146;s used only to display data, not to collect it. Thus it is an alternative to using a <b>JLabel</b>. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2031" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h3>
<a name="_Toc375545454"></a><a name="_Toc24775896"></a><a name="Heading19874"></a>Combo
boxes (drop-down lists)</h3>
<p>Like a group of radio buttons, a drop-down list is a way to force the user to select only one element from a group of possibilities. However, it&#146;s a more compact way to accomplish this, and it&#146;s easier to change the elements of the list without surprising the user. (You can change radio buttons dynamically, but that tends to be visibly jarring). <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2032" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p><a name="Index1785"></a><a name="Index1786"></a>By default, <a name="Index1787"></a><a name="Index1788"></a><b>JComboBox</b> box is not like the combo box in Windows, which lets you select from a list <i>or</i> type in your own selection. To produce this behavior you must call <a href="file:///C:/ProgTools/Java/docs/api/javax/swing/JComboBox.html#setEditable(boolean)">setEditable</a><b>(&#160;)</b>. With a <b>JComboBox</b> box, you choose one and only one element from the list. In the following example, the <b>JComboBox</b> box starts with a certain number of entries, and then new entries are added to the box when a button is pressed. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2033" title="Send BackTalk Comment">Feedback</a></font><br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c14:ComboBoxes.java</font>
<font color=#009900>// Using drop-down lists.</font>
<font color=#009900>// &lt;applet code=ComboBoxes width=200 height=125&gt;&lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> ComboBoxes <font color=#0000ff>extends</font> JApplet {
  <font color=#0000ff>private</font> String[] description = {
    <font color=#004488>"Ebullient"</font>, <font color=#004488>"Obtuse"</font>, <font color=#004488>"Recalcitrant"</font>, <font color=#004488>"Brilliant"</font>,
    <font color=#004488>"Somnescent"</font>, <font color=#004488>"Timorous"</font>, <font color=#004488>"Florid"</font>, <font color=#004488>"Putrescent"</font>
  };
  <font color=#0000ff>private</font> JTextField t = <font color=#0000ff>new</font> JTextField(15);
  <font color=#0000ff>private</font> JComboBox c = <font color=#0000ff>new</font> JComboBox();
  <font color=#0000ff>private</font> JButton b = <font color=#0000ff>new</font> JButton(<font color=#004488>"Add items"</font>);
  <font color=#0000ff>private</font> <font color=#0000ff>int</font> count = 0;
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; 4; i++)
      c.addItem(description[count++]);
    t.setEditable(<font color=#0000ff>false</font>);
    b.addActionListener(<font color=#0000ff>new</font> ActionListener() {
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
        <font color=#0000ff>if</font>(count &lt; description.length)
          c.addItem(description[count++]);
      }
    });
    c.addActionListener(<font color=#0000ff>new</font> ActionListener() {
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
        t.setText(<font color=#004488>"index: "</font>+ c.getSelectedIndex() + <font color=#004488>"   "</font> +
         ((JComboBox)e.getSource()).getSelectedItem());
      }
    });
    Container cp = getContentPane();
    cp.setLayout(<font color=#0000ff>new</font> FlowLayout());
    cp.add(t);
    cp.add(c);
    cp.add(b);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> ComboBoxes(), 200, 125);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p>The<b> JTextField</b> displays the &#147;selected index,&#148; which is the sequence number of the currently selected element, as well as the text of the selected item in the combo box. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2034" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h3>
<a name="_Toc375545455"></a><a name="_Toc24775897"></a><a name="Heading19922"></a>List
boxes<br></h3>
<p><a name="Index1789"></a><a name="Index1790"></a>List boxes are significantly different from <b>JComboBox</b> boxes, and not just in appearance. While a <b>JComboBox</b> box drops down when you activate it, a <b>JList</b><a name="Index1791"></a> occupies some fixed number of lines on a screen all the time and doesn&#146;t change. If you want to see the items in a list, you simply call <a name="Index1792"></a><b>getSelectedValues(&#160;), </b>which produces an array of <b>String</b> of the items that have been selected. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2035" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>A <b>JList</b> allows multiple selection; if you control-click on more than one item (holding down the &#147;control&#148; key while performing additional mouse clicks), the original item stays highlighted and you can select as many as you want. If you select an item, then shift-click on another item, all the items in the span between the two are selected. To remove an item from a group, you can control-click it. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2036" title="Send BackTalk Comment">Feedback</a></font><br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c14:List.java</font>
<font color=#009900>// &lt;applet code=List width=250 height=375&gt;&lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> javax.swing.event.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> javax.swing.border.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> List <font color=#0000ff>extends</font> JApplet {
  <font color=#0000ff>private</font> String[] flavors = {
    <font color=#004488>"Chocolate"</font>, <font color=#004488>"Strawberry"</font>, <font color=#004488>"Vanilla Fudge Swirl"</font>,
    <font color=#004488>"Mint Chip"</font>, <font color=#004488>"Mocha Almond Fudge"</font>, <font color=#004488>"Rum Raisin"</font>,
    <font color=#004488>"Praline Cream"</font>, <font color=#004488>"Mud Pie"</font>
  };
  <font color=#0000ff>private</font> DefaultListModel lItems=<font color=#0000ff>new</font> DefaultListModel();
  <font color=#0000ff>private</font> JList lst = <font color=#0000ff>new</font> JList(lItems);
  <font color=#0000ff>private</font> JTextArea t =
    <font color=#0000ff>new</font> JTextArea(flavors.length, 20);
  <font color=#0000ff>private</font> JButton b = <font color=#0000ff>new</font> JButton(<font color=#004488>"Add Item"</font>);
  <font color=#0000ff>private</font> ActionListener bl = <font color=#0000ff>new</font> ActionListener() {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      <font color=#0000ff>if</font>(count &lt; flavors.length) {
        lItems.add(0, flavors[count++]);
      } <font color=#0000ff>else</font> {
        <font color=#009900>// Disable, since there are no more</font>
        <font color=#009900>// flavors left to be added to the List</font>
        b.setEnabled(<font color=#0000ff>false</font>);
      }
    }
  };
  <font color=#0000ff>private</font> ListSelectionListener ll =
    <font color=#0000ff>new</font> ListSelectionListener() {
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> valueChanged(ListSelectionEvent e) {
        <font color=#0000ff>if</font>(e.getValueIsAdjusting()) <font color=#0000ff>return</font>;
        t.setText(<font color=#004488>""</font>);
        Object[] items=lst.getSelectedValues();
        <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; items.length; i++)
          t.append(items[i] + <font color=#004488>"\n"</font>);
      }
    };
  <font color=#0000ff>private</font> <font color=#0000ff>int</font> count = 0;
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    Container cp = getContentPane();
    t.setEditable(<font color=#0000ff>false</font>);
    cp.setLayout(<font color=#0000ff>new</font> FlowLayout());
    <font color=#009900>// Create Borders for components:</font>
    Border brd = BorderFactory.createMatteBorder(
      1, 1, 2, 2, Color.BLACK);
    lst.setBorder(brd);
    t.setBorder(brd);
    <font color=#009900>// Add the first four items to the List</font>
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; 4; i++)
      lItems.addElement(flavors[count++]);
    <font color=#009900>// Add items to the Content Pane for Display</font>
    cp.add(t);
    cp.add(lst);
    cp.add(b);
    <font color=#009900>// Register event listeners</font>
    lst.addListSelectionListener(ll);
    b.addActionListener(bl);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> List(), 250, 375);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p>You can see that borders have also been added to the lists. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2038" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>If you just want to put an array of <b>String</b>s into a <b>JList</b>, there&#146;s a much simpler solution; you pass the array to the <b>JList </b>constructor, and it builds the list automatically. The only reason for using the &#147;list model&#148; in the preceding example is so that the list could be manipulated during the execution of the program. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2039" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p><b>JList</b>s do not automatically provide direct support for scrolling. Of course, all you need to do is wrap the <b>JList</b> in a <b>JScrollPane</b><a name="Index1793"></a>, and the details are automatically managed for you. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2040" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h3>
<a name="_Toc375545457"></a><a name="_Toc24775898"></a><a name="Heading19995"></a>Tabbed
panes<br></h3>
<p><a name="Index1794"></a><a name="Index1795"></a><a name="Index1796"></a>The <b>JTabbedPane</b> allows you to create a &#147;tabbed dialog,&#148; which has file-folder tabs running across one edge, and all you have to do is press a tab to bring forward a different dialog.<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c14:TabbedPane1.java</font>
<font color=#009900>// Demonstrates the Tabbed Pane.</font>
<font color=#009900>// &lt;applet code=TabbedPane1 width=350 height=200&gt;&lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> javax.swing.event.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> TabbedPane1 <font color=#0000ff>extends</font> JApplet {
  <font color=#0000ff>private</font> String[] flavors = {
    <font color=#004488>"Chocolate"</font>, <font color=#004488>"Strawberry"</font>, <font color=#004488>"Vanilla Fudge Swirl"</font>,
    <font color=#004488>"Mint Chip"</font>, <font color=#004488>"Mocha Almond Fudge"</font>, <font color=#004488>"Rum Raisin"</font>,
    <font color=#004488>"Praline Cream"</font>, <font color=#004488>"Mud Pie"</font>
  };
  <font color=#0000ff>private</font> JTabbedPane tabs = <font color=#0000ff>new</font> JTabbedPane();
  <font color=#0000ff>private</font> JTextField txt = <font color=#0000ff>new</font> JTextField(20);
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; flavors.length; i++)
      tabs.addTab(flavors[i],
        <font color=#0000ff>new</font> JButton(<font color=#004488>"Tabbed pane "</font> + i));
    tabs.addChangeListener(<font color=#0000ff>new</font> ChangeListener() {
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> stateChanged(ChangeEvent e) {
        txt.setText(<font color=#004488>"Tab selected: "</font> +
          tabs.getSelectedIndex());
      }
    });
    Container cp = getContentPane();
    cp.add(BorderLayout.SOUTH, txt);
    cp.add(tabs);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> TabbedPane1(), 350, 200);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p>In Java, the use of some sort of &#147;tabbed panel&#148; mechanism is quite important, because in applet programming the use of pop-up dialogs is discouraged by automatically adding a little warning to any dialog that pops up out of an applet. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2041" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>When you run the program, you&#146;ll see that the <b>JTabbedPane</b> automatically stacks the tabs if there are too many of them to fit on one row. You can see this by resizing the window when you run the program from the console command line. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2042" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h3>
<a name="_Toc24775899"></a><a name="Heading20034"></a>Message boxes</h3>
<p>Windowing environments commonly contain a standard set of message boxes that allow you to quickly post information to the user or to capture information from the user. In Swing, these message boxes are contained in <a name="Index1797"></a><a name="Index1798"></a><b>JOptionPane</b>. You have many different possibilities (some quite sophisticated), but the ones you&#146;ll most commonly use are probably the message dialog and confirmation dialog, invoked using the <b>static</b> <b>JOptionPane.showMessageDialog(&#160;)</b> and <b>JOptionPane. showConfirmDialog(&#160;)</b>. The following example shows a subset of the message boxes available with <b>JOptionPane</b>:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c14:MessageBoxes.java</font>
<font color=#009900>// Demonstrates JoptionPane.</font>
<font color=#009900>// &lt;applet code=MessageBoxes width=200 height=150&gt;&lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> MessageBoxes <font color=#0000ff>extends</font> JApplet {
  <font color=#0000ff>private</font> JButton[] b = {
    <font color=#0000ff>new</font> JButton(<font color=#004488>"Alert"</font>), <font color=#0000ff>new</font> JButton(<font color=#004488>"Yes</font><font color=#004488>/No"</font>),
    <font color=#0000ff>new</font> JButton(<font color=#004488>"Color"</font>), <font color=#0000ff>new</font> JButton(<font color=#004488>"Input"</font>),
    <font color=#0000ff>new</font> JButton(<font color=#004488>"3 Vals"</font>)
  };
  <font color=#0000ff>private</font> JTextField txt = <font color=#0000ff>new</font> JTextField(15);
  <font color=#0000ff>private</font> ActionListener al = <font color=#0000ff>new</font> ActionListener() {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      String id = ((JButton)e.getSource()).getText();
      <font color=#0000ff>if</font>(id.equals(<font color=#004488>"Alert"</font>))
        JOptionPane.showMessageDialog(<font color=#0000ff>null</font>,
          <font color=#004488>"There's a bug on you!"</font>, <font color=#004488>"Hey!"</font>,
          JOptionPane.ERROR_MESSAGE);
      <font color=#0000ff>else</font> <font color=#0000ff>if</font>(id.equals(<font color=#004488>"Yes</font><font color=#004488>/No"</font>))
        JOptionPane.showConfirmDialog(<font color=#0000ff>null</font>,
          <font color=#004488>"or no"</font>, <font color=#004488>"choose yes"</font>,
          JOptionPane.YES_NO_OPTION);
      <font color=#0000ff>else</font> <font color=#0000ff>if</font>(id.equals(<font color=#004488>"Color"</font>)) {
        Object[] options = { <font color=#004488>"Red"</font>, <font color=#004488>"Green"</font> };
        <font color=#0000ff>int</font> sel = JOptionPane.showOptionDialog(
          <font color=#0000ff>null</font>, <font color=#004488>"Choose a Color!"</font>, <font color=#004488>"Warning"</font>,
          JOptionPane.DEFAULT_OPTION,
          JOptionPane.WARNING_MESSAGE, <font color=#0000ff>null</font>,
          options, options[0]);
        <font color=#0000ff>if</font>(sel != JOptionPane.CLOSED_OPTION)
          txt.setText(<font color=#004488>"Color Selected: "</font> + options[sel]);
      } <font color=#0000ff>else</font> <font color=#0000ff>if</font>(id.equals(<font color=#004488>"Input"</font>)) {
        String val = JOptionPane.showInputDialog(
            <font color=#004488>"How many fingers do you see?"</font>);
        txt.setText(val);
      } <font color=#0000ff>else</font> <font color=#0000ff>if</font>(id.equals(<font color=#004488>"3 Vals"</font>)) {
        Object[] selections = {<font color=#004488>"First"</font>, <font color=#004488>"Second"</font>, <font color=#004488>"Third"</font>};
        Object val = JOptionPane.showInputDialog(
          <font color=#0000ff>null</font>, <font color=#004488>"Choose one"</font>, <font color=#004488>"Input"</font>,
          JOptionPane.INFORMATION_MESSAGE,
          <font color=#0000ff>null</font>, selections, selections[0]);
        <font color=#0000ff>if</font>(val != <font color=#0000ff>null</font>)
          txt.setText(val.toString());
      }
    }
  };
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    Container cp = getContentPane();
    cp.setLayout(<font color=#0000ff>new</font> FlowLayout());
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; b.length; i++) {
      b[i].addActionListener(al);
      cp.add(b[i]);
    }
    cp.add(txt);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> MessageBoxes(), 200, 200);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p>To be able to write a single <b>ActionListener</b>, I&#146;ve used the somewhat risky approach of checking the <b>String</b> labels on the buttons. The problem with this is that it&#146;s easy to get the label a little bit wrong, typically in capitalization, and this bug can be hard to spot. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2043" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>Note that <b>showOptionDialog(&#160;)</b> and <b>showInputDialog(&#160;)</b> provide return objects that contain the value entered by the user. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2044" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h3>
<a name="_Toc24775900"></a><a name="Heading20102"></a>Menus<br></h3>
<p><a name="Index1799"></a><a name="Index1800"></a><a name="Index1801"></a><a name="Index1802"></a><a name="Index1803"></a><a name="Index1804"></a><a name="Index1805"></a>Each component capable of holding a menu, including <b>JApplet</b>, <b>JFrame</b>, <b>JDialog</b>, and their descendants, has a <b>setJMenuBar(&#160;) </b>method that accepts a <b>JMenuBar</b> (you can have only one <b>JMenuBar</b> on a particular component). You add <b>JMenu</b>s to the <b>JMenuBar</b>, and <b>JMenuItem</b>s to the <b>JMenu</b>s. Each <b>JMenuItem</b> can have an <b>ActionListener</b> attached to it, to be fired when that menu item is selected. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2045" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>Unlike a system that uses resources, with Java and Swing you must hand assemble all the menus in source code. Here is a very simple menu example:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c14:SimpleMenus.java</font>
<font color=#009900>// &lt;applet code=SimpleMenus width=200 height=75&gt;&lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> SimpleMenus <font color=#0000ff>extends</font> JApplet {
  <font color=#0000ff>private</font> JTextField t = <font color=#0000ff>new</font> JTextField(15);
  <font color=#0000ff>private</font> ActionListener al = <font color=#0000ff>new</font> ActionListener() {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      t.setText(((JMenuItem)e.getSource()).getText());
    }
  };
  <font color=#0000ff>private</font> JMenu[] menus = {
    <font color=#0000ff>new</font> JMenu(<font color=#004488>"Winken"</font>), <font color=#0000ff>new</font> JMenu(<font color=#004488>"Blinken"</font>),
    <font color=#0000ff>new</font> JMenu(<font color=#004488>"Nod"</font>)
  };
  <font color=#0000ff>private</font> JMenuItem[] items = {
    <font color=#0000ff>new</font> JMenuItem(<font color=#004488>"Fee"</font>), <font color=#0000ff>new</font> JMenuItem(<font color=#004488>"Fi"</font>),
    <font color=#0000ff>new</font> JMenuItem(<font color=#004488>"Fo"</font>),  <font color=#0000ff>new</font> JMenuItem(<font color=#004488>"Zip"</font>),
    <font color=#0000ff>new</font> JMenuItem(<font color=#004488>"Zap"</font>), <font color=#0000ff>new</font> JMenuItem(<font color=#004488>"Zot"</font>),
    <font color=#0000ff>new</font> JMenuItem(<font color=#004488>"Olly"</font>), <font color=#0000ff>new</font> JMenuItem(<font color=#004488>"Oxen"</font>),
    <font color=#0000ff>new</font> JMenuItem(<font color=#004488>"Free"</font>)
  };
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; items.length; i++) {
      items[i].addActionListener(al);
      menus[i % 3].add(items[i]);
    }
    JMenuBar mb = <font color=#0000ff>new</font> JMenuBar();
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; menus.length; i++)
      mb.add(menus[i]);
    setJMenuBar(mb);
    Container cp = getContentPane();
    cp.setLayout(<font color=#0000ff>new</font> FlowLayout());
    cp.add(t);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> SimpleMenus(), 200, 75);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p>The use of the modulus operator in &#147;<b>i%3</b>&#148; distributes the menu items among the three <b>JMenu</b>s. Each <b>JMenuItem</b> must have an <b>ActionListener</b> attached to it; here, the same <b>ActionListener</b> is used everywhere, but you&#146;ll usually need an individual one for each <b>JMenuItem</b>. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2046" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p><a name="Index1806"></a><b>JMenuItem </b>inherits <b>AbstractButton</b>, so it has some button-like behaviors. By itself, it provides an item that can be placed on a drop-down menu. There are also three types inherited from <b>JMenuItem</b>: <b>JMenu</b> to hold other <b>JMenuItem</b>s (so you can have cascading menus); <b>JCheckBoxMenuItem</b>, which produces a checkmark to indicate whether that menu item is selected; and <b>JRadioButtonMenuItem</b>, which contains a radio button. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2047" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>As a more sophisticated example, here are the ice cream flavors again, used to create menus. This example also shows cascading menus, keyboard mnemonics, <b>JCheckBoxMenuItem</b>s, and the way you can dynamically change menus:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c14:Menus.java</font>
<font color=#009900>// Submenus, checkbox menu items, swapping menus,</font>
<font color=#009900>// mnemonics (shortcuts) and action commands.</font>
<font color=#009900>// &lt;applet code=Menus width=300 height=100&gt;&lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> Menus <font color=#0000ff>extends</font> JApplet {
  <font color=#0000ff>private</font> String[] flavors = {
    <font color=#004488>"Chocolate"</font>, <font color=#004488>"Strawberry"</font>, <font color=#004488>"Vanilla Fudge Swirl"</font>,
    <font color=#004488>"Mint Chip"</font>, <font color=#004488>"Mocha Almond Fudge"</font>, <font color=#004488>"Rum Raisin"</font>,
    <font color=#004488>"Praline Cream"</font>, <font color=#004488>"Mud Pie"</font>
  };
  <font color=#0000ff>private</font> JTextField t = <font color=#0000ff>new</font> JTextField(<font color=#004488>"No flavor"</font>, 30);
  <font color=#0000ff>private</font> JMenuBar mb1 = <font color=#0000ff>new</font> JMenuBar();
  <font color=#0000ff>private</font> JMenu
    f = <font color=#0000ff>new</font> JMenu(<font color=#004488>"File"</font>),
    m = <font color=#0000ff>new</font> JMenu(<font color=#004488>"Flavors"</font>),
    s = <font color=#0000ff>new</font> JMenu(<font color=#004488>"Safety"</font>);
  <font color=#009900>// Alternative approach:</font>
  <font color=#0000ff>private</font> JCheckBoxMenuItem[] safety = {
    <font color=#0000ff>new</font> JCheckBoxMenuItem(<font color=#004488>"Guard"</font>),
    <font color=#0000ff>new</font> JCheckBoxMenuItem(<font color=#004488>"Hide"</font>)
  };
  <font color=#0000ff>private</font> JMenuItem[] file = { <font color=#0000ff>new</font> JMenuItem(<font color=#004488>"Open"</font>) };
  <font color=#009900>// A second menu bar to swap to:</font>
  <font color=#0000ff>private</font> JMenuBar mb2 = <font color=#0000ff>new</font> JMenuBar();
  <font color=#0000ff>private</font> JMenu fooBar = <font color=#0000ff>new</font> JMenu(<font color=#004488>"fooBar"</font>);
  <font color=#0000ff>private</font> JMenuItem[] other = {
    <font color=#009900>// Adding a menu shortcut (mnemonic) is very</font>
    <font color=#009900>// simple, but only JMenuItems can have them</font>
    <font color=#009900>// in their constructors:</font>
    <font color=#0000ff>new</font> JMenuItem(<font color=#004488>"Foo"</font>, KeyEvent.VK_F),
    <font color=#0000ff>new</font> JMenuItem(<font color=#004488>"Bar"</font>, KeyEvent.VK_A),
    <font color=#009900>// No shortcut:</font>
    <font color=#0000ff>new</font> JMenuItem(<font color=#004488>"Baz"</font>),
  };
  <font color=#0000ff>private</font> JButton b = <font color=#0000ff>new</font> JButton(<font color=#004488>"Swap Menus"</font>);
  <font color=#0000ff>class</font> BL <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      JMenuBar m = getJMenuBar();
      setJMenuBar(m == mb1 ? mb2 : mb1);
      validate(); <font color=#009900>// Refresh the frame</font>
    }
  }
  <font color=#0000ff>class</font> ML <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      JMenuItem target = (JMenuItem)e.getSource();
      String actionCommand = target.getActionCommand();
      <font color=#0000ff>if</font>(actionCommand.equals(<font color=#004488>"Open"</font>)) {
        String s = t.getText();
        <font color=#0000ff>boolean</font> chosen = <font color=#0000ff>false</font>;
        <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; flavors.length; i++)
          <font color=#0000ff>if</font>(s.equals(flavors[i])) chosen = <font color=#0000ff>true</font>;
        <font color=#0000ff>if</font>(!chosen)
          t.setText(<font color=#004488>"Choose a flavor first!"</font>);
        <font color=#0000ff>else</font>
          t.setText(<font color=#004488>"Opening "</font> + s + <font color=#004488>". Mmm, mm!"</font>);
      }
    }
  }
  <font color=#0000ff>class</font> FL <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      JMenuItem target = (JMenuItem)e.getSource();
      t.setText(target.getText());
    }
  }
  <font color=#009900>// Alternatively, you can create a different</font>
  <font color=#009900>// class for each different MenuItem. Then you</font>
  <font color=#009900>// Don't have to figure out which one it is:</font>
  <font color=#0000ff>class</font> FooL <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      t.setText(<font color=#004488>"Foo selected"</font>);
    }
  }
  <font color=#0000ff>class</font> BarL <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      t.setText(<font color=#004488>"Bar selected"</font>);
    }
  }
  <font color=#0000ff>class</font> BazL <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      t.setText(<font color=#004488>"Baz selected"</font>);
    }
  }
  <font color=#0000ff>class</font> CMIL <font color=#0000ff>implements</font> ItemListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> itemStateChanged(ItemEvent e) {
      JCheckBoxMenuItem target =
        (JCheckBoxMenuItem)e.getSource();
      String actionCommand = target.getActionCommand();
      <font color=#0000ff>if</font>(actionCommand.equals(<font color=#004488>"Guard"</font>))
        t.setText(<font color=#004488>"Guard the Ice Cream! "</font> +
          <font color=#004488>"Guarding is "</font> + target.getState());
      <font color=#0000ff>else</font> <font color=#0000ff>if</font>(actionCommand.equals(<font color=#004488>"Hide"</font>))
        t.setText(<font color=#004488>"Hide the Ice Cream! "</font> +
          <font color=#004488>"Is it hidden? "</font> + target.getState());
    }
  }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    ML ml = <font color=#0000ff>new</font> ML();
    CMIL cmil = <font color=#0000ff>new</font> CMIL();
    safety[0].setActionCommand(<font color=#004488>"Guard"</font>);
    safety[0].setMnemonic(KeyEvent.VK_G);
    safety[0].addItemListener(cmil);
    safety[1].setActionCommand(<font color=#004488>"Hide"</font>);
    safety[1].setMnemonic(KeyEvent.VK_H);
    safety[1].addItemListener(cmil);
    other[0].addActionListener(<font color=#0000ff>new</font> FooL());
    other[1].addActionListener(<font color=#0000ff>new</font> BarL());
    other[2].addActionListener(<font color=#0000ff>new</font> BazL());
    FL fl = <font color=#0000ff>new</font> FL();
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; flavors.length; i++) {
      JMenuItem mi = <font color=#0000ff>new</font> JMenuItem(flavors[i]);
      mi.addActionListener(fl);
      m.add(mi);
      <font color=#009900>// Add separators at intervals:</font>
      <font color=#0000ff>if</font>((i + 1) % 3 == 0)
        m.addSeparator();
    }
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; safety.length; i++)
      s.add(safety[i]);
    s.setMnemonic(KeyEvent.VK_A);
    f.add(s);
    f.setMnemonic(KeyEvent.VK_F);
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; file.length; i++) {
      file[i].addActionListener(fl);
      f.add(file[i]);
    }
    mb1.add(f);
    mb1.add(m);
    setJMenuBar(mb1);
    t.setEditable(<font color=#0000ff>false</font>);
    Container cp = getContentPane();
    cp.add(t, BorderLayout.CENTER);
    <font color=#009900>// Set up the system for swapping menus:</font>
    b.addActionListener(<font color=#0000ff>new</font> BL());
    b.setMnemonic(KeyEvent.VK_S);
    cp.add(b, BorderLayout.NORTH);
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; other.length; i++)
      fooBar.add(other[i]);
    fooBar.setMnemonic(KeyEvent.VK_B);
    mb2.add(fooBar);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> Menus(), 300, 100);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p>In this program I placed the menu items into arrays and then stepped through each array calling <b>add(&#160;)</b> for each <b>JMenuItem</b>. This makes adding or subtracting a menu item somewhat less tedious. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2048" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>This program creates not one but two<b> JMenuBar</b>s to demonstrate that menu bars can be actively swapped while the program is running. You can see how a<b> JMenuBar</b> is made up of <b>JMenus</b>, and each <b>JMenu</b> is made up of <b>JMenuItems</b>,<b> JCheckBoxMenuItem</b>s, or even other <b>JMenu</b>s (which produce submenus). When a<b> JMenuBar</b> is assembled, it can be installed into the current program with the <b>setJMenuBar(&#160;)</b> method. Note that when the button is pressed, it checks to see which menu is currently installed by calling <b>getJMenuBar(&#160;)</b>, then it puts the other menu bar in its place. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2049" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>When testing for &#147;Open,&#148; notice that spelling and capitalization are critical, but Java signals no error if there is no match with &#147;Open.&#148; This kind of string comparison is a source of programming errors. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2050" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>The checking and unchecking of the menu items is taken care of automatically. The code handling the <b>JCheckBoxMenuItem</b>s shows two different ways to determine what was checked: string matching (which, as mentioned above, isn&#146;t a very safe approach although you&#146;ll see it used) and matching on the event target object. As shown, the <a name="Index1807"></a><b>getState(&#160;) </b>method can be used to reveal the state. You can also change the state of a <b>JCheckBoxMenuItem</b> with <b>setState(&#160;)</b>. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2051" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>The events for menus are a bit inconsistent and can lead to confusion: <a name="Index1808"></a><b>JMenuItem</b>s use <b>ActionListener</b>s, but <a name="Index1809"></a><b>JCheckBoxMenuItem</b>s use <b>ItemListener</b>s. The <a name="Index1810"></a><b>JMenu</b> objects can also support <b>ActionListener</b>s, but that&#146;s not usually helpful. In general, you&#146;ll attach listeners to each <b>JMenuItem</b>, <b>JCheckBoxMenuItem</b>, or <b>JRadioButtonMenuItem</b>, but the example shows <b>ItemListener</b>s and <b>ActionListener</b>s attached to the various menu components. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2052" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p><a name="Index1811"></a><a name="Index1812"></a><a name="Index1813"></a>Swing supports mnemonics, or &#147;keyboard shortcuts,&#148; so you can select anything derived from <b>AbstractButton</b> (button, menu item, etc.) by using the keyboard instead of the mouse. These are quite simple; for <b>JmenuItem</b>,you can use the overloaded constructor that takes as a second argument the identifier for the key. However, most <b>AbstractButton</b>s do not have constructors like this, so the more general way to solve the problem is to use the <b>setMnemonic(&#160;) </b><a name="Index1814"></a>method. The preceding example adds mnemonics to the button and some of the menu items; shortcut indicators automatically appear on the components. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2053" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p><a name="Index1815"></a><a name="Index1816"></a>You can also see the use of <b>setActionCommand(&#160;)</b>. This seems a bit strange because in each case, the &#147;action command&#148; is exactly the same as the label on the menu component. Why not just use the label instead of this alternative string? The problem is internationalization. If you retarget this program to another language, you want to change only the label in the menu, and not change the code (which would no doubt introduce new errors). So to make this easy for code that checks the text string associated with a menu component, the &#147;action command&#148; can be immutable, but the menu label can change. All the code works with the &#147;action command,&#148; so it&#146;s unaffected by changes to the menu labels. Note that in this program, not all the menu components are examined for their action commands, so those that aren&#146;t do not have their action command set. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2054" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>The bulk of the work happens in the listeners. <b>BL</b> performs the <a name="Index1817"></a><b>JMenuBar</b> swapping. In <b>ML</b>, the &#147;figure out who rang&#148; approach is taken by getting the source of the <a name="Index1818"></a><b>ActionEvent</b> and casting it to a <a name="Index1819"></a><b>JMenuItem</b>, then getting the action command string to pass it through a cascaded <b>if</b> statement. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2055" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>The <b>FL</b> listener is simple even though it&#146;s handling all the different flavors in the flavor menu. This approach is useful if you have enough simplicity in your logic, but in general, you&#146;ll want to take the approach used with <b>FooL</b>, <b>BarL,</b> and <b>BazL</b>, in which each is attached to only a single menu component, so no extra detection logic is necessary, and you know exactly who called the listener. Even with the profusion of classes generated this way, the code inside tends to be smaller, and the process is more foolproof. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2056" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>You can see that menu code quickly gets long-winded and messy. This is another case where the use of a GUI builder is the appropriate solution. A good tool will also handle the maintenance of the menus. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2057" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h3>
<a name="_Toc24775901"></a><a name="Heading20311"></a>Pop-up menus<br></h3>
<p><a name="Index1820"></a><a name="Index1821"></a>The most straightforward way to implement a <b>JPopupMenu</b> is to create an inner class that extends <b>MouseAdapter</b>, then add an object of that inner class to each component that you want to produce pop-up behavior:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c14:Popup.java</font>
<font color=#009900>// Creating popup menus with Swing.</font>
<font color=#009900>// &lt;applet code=Popup width=300 height=200&gt;&lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> Popup <font color=#0000ff>extends</font> JApplet {
  <font color=#0000ff>private</font> JPopupMenu popup = <font color=#0000ff>new</font> JPopupMenu();
  <font color=#0000ff>private</font> JTextField t = <font color=#0000ff>new</font> JTextField(10);
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    Container cp = getContentPane();
    cp.setLayout(<font color=#0000ff>new</font> FlowLayout());
    cp.add(t);
    ActionListener al = <font color=#0000ff>new</font> ActionListener() {
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
        t.setText(((JMenuItem)e.getSource()).getText());
      }
    };
    JMenuItem m = <font color=#0000ff>new</font> JMenuItem(<font color=#004488>"Hither"</font>);
    m.addActionListener(al);
    popup.add(m);
    m = <font color=#0000ff>new</font> JMenuItem(<font color=#004488>"Yon"</font>);
    m.addActionListener(al);
    popup.add(m);
    m = <font color=#0000ff>new</font> JMenuItem(<font color=#004488>"Afar"</font>);
    m.addActionListener(al);
    popup.add(m);
    popup.addSeparator();
    m = <font color=#0000ff>new</font> JMenuItem(<font color=#004488>"Stay Here"</font>);
    m.addActionListener(al);
    popup.add(m);
    PopupListener pl = <font color=#0000ff>new</font> PopupListener();
    addMouseListener(pl);
    t.addMouseListener(pl);
  }
  <font color=#0000ff>class</font> PopupListener <font color=#0000ff>extends</font> MouseAdapter {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> mousePressed(MouseEvent e) {
      maybeShowPopup(e);
    }
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> mouseReleased(MouseEvent e) {
      maybeShowPopup(e);
    }
    <font color=#0000ff>private</font> <font color=#0000ff>void</font> maybeShowPopup(MouseEvent e) {
      <font color=#0000ff>if</font>(e.isPopupTrigger())
        popup.show(((JApplet)e.getComponent())
          .getContentPane(), e.getX(), e.getY());
    }
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> Popup(), 300, 200);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p><a name="Index1822"></a>The same <b>ActionListener</b> is added to each <b>JMenuItem</b>, so that it fetches the text from the menu label and inserts it into the <b>JTextField</b>. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2058" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h3>
<a name="_Toc24775902"></a><a name="Heading20369"></a>Drawing<br></h3>
<p><a name="Index1823"></a><a name="Index1824"></a><a name="Index1825"></a>In a good GUI framework, drawing should be reasonably easy&#151;and it is, in the Swing library. The problem with any drawing example is that the calculations that determine where things go are typically a lot more complicated that the calls to the drawing routines, and these calculations are often mixed together with the drawing calls, so it can seem that the interface is more complicated than it actually is. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2059" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>For simplicity, consider the problem of representing data on the screen&#151;here, the data will be provided by the built-in <b>Math.sin(&#160;)</b> method, that produces a mathematical sine function. To make things a little more interesting, and to further demonstrate how easy it is to use Swing components, a slider will be placed at the bottom of the form to dynamically control the number of sine wave cycles that are displayed. In addition, if you resize the window, you&#146;ll see that the sine wave refits itself to the new window size. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2060" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>Although any <a name="Index1826"></a><b>JComponent</b> may be painted and thus used as a canvas, if you just want a straightforward drawing surface, you will typically inherit from a <a name="Index1827"></a><b>JPanel</b>. The only method you need to override is <a name="Index1828"></a><b>paintComponent(&#160;)</b>, which is called whenever that component must be repainted (you normally don&#146;t need to worry about this, because the decision is managed by Swing). When it is called, Swing passes a <a name="Index1829"></a><b>Graphics</b> object to the method, and you can then use this object to draw or paint on the surface. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2061" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>In the following example, all the intelligence concerning painting is in the <b>SineDraw</b> class; the <b>SineWave</b> class simply configures the program and the slider control. Inside <b>SineDraw</b>, the <b>setCycles(&#160;)</b> method provides a hook to allow another object&#151;the slider control, in this case&#151;to control the number of cycles.<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c14:SineWave.java</font>
<font color=#009900>// Drawing with Swing, using a JSlider.</font>
<font color=#009900>// &lt;applet code=SineWave width=700 height=400&gt;&lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> javax.swing.event.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>class</font> SineDraw <font color=#0000ff>extends</font> JPanel {
  <font color=#0000ff>private</font> <font color=#0000ff>static</font> <font color=#0000ff>final</font> <font color=#0000ff>int</font> SCALEFACTOR = 200;
  <font color=#0000ff>private</font> <font color=#0000ff>int</font> cycles;
  <font color=#0000ff>private</font> <font color=#0000ff>int</font> points;
  <font color=#0000ff>private</font> <font color=#0000ff>double</font>[] sines;
  <font color=#0000ff>private</font> <font color=#0000ff>int</font>[] pts;
  <font color=#0000ff>public</font> SineDraw() { setCycles(5); }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> setCycles(<font color=#0000ff>int</font> newCycles) {
    cycles = newCycles;
    points = SCALEFACTOR * cycles * 2;
    sines = <font color=#0000ff>new</font> <font color=#0000ff>double</font>[points];
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; points; i++) {
      <font color=#0000ff>double</font> radians = (Math.PI/SCALEFACTOR) * i;
      sines[i] = Math.sin(radians);
    }
    repaint();
  }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> paintComponent(Graphics g) {
    <font color=#0000ff>super</font>.paintComponent(g);
    <font color=#0000ff>int</font> maxWidth = getWidth();
    <font color=#0000ff>double</font> hstep = (<font color=#0000ff>double</font>)maxWidth/(<font color=#0000ff>double</font>)points;
    <font color=#0000ff>int</font> maxHeight = getHeight();
    pts = <font color=#0000ff>new</font> <font color=#0000ff>int</font>[points];
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; points; i++)
      pts[i] =
        (<font color=#0000ff>int</font>)(sines[i] * maxHeight/2 * .95 + maxHeight/2);
    g.setColor(Color.RED);
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 1; i &lt; points; i++) {
      <font color=#0000ff>int</font> x1 = (<font color=#0000ff>int</font>)((i - 1) * hstep);
      <font color=#0000ff>int</font> x2 = (<font color=#0000ff>int</font>)(i * hstep);
      <font color=#0000ff>int</font> y1 = pts[i-1];
      <font color=#0000ff>int</font> y2 = pts[i];
      g.drawLine(x1, y1, x2, y2);
    }
  }
}

<font color=#0000ff>public</font> <font color=#0000ff>class</font> SineWave <font color=#0000ff>extends</font> JApplet {
  <font color=#0000ff>private</font> SineDraw sines = <font color=#0000ff>new</font> SineDraw();
  <font color=#0000ff>private</font> JSlider adjustCycles = <font color=#0000ff>new</font> JSlider(1, 30, 5);
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    Container cp = getContentPane();
    cp.add(sines);
    adjustCycles.addChangeListener(<font color=#0000ff>new</font> ChangeListener() {
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> stateChanged(ChangeEvent e) {
        sines.setCycles(
          ((JSlider)e.getSource()).getValue());
      }
    });
    cp.add(BorderLayout.SOUTH, adjustCycles);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> SineWave(), 700, 400);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p>All of the fields and arrays are used in the calculation of the sine wave points; <b>cycles</b> indicates the number of complete sine waves desired, <b>points</b> contains the total number of points that will be graphed, <b>sines</b> contains the sine function values, and <b>pts</b> contains the y-coordinates of the points that will be drawn on the <b>JPanel</b>. The <b>setCycles(&#160;)</b> method creates the arrays according to the number of points needed and fills the <b>sines</b> array with numbers. By calling <b>repaint(&#160;)</b> , <b>setCycles(&#160;)</b> forces <b>paintComponent(&#160;)</b> to be called so the rest of the calculation and redraw will take place. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2062" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>The first thing you must do when you override <b>paintComponent(&#160;)</b> is to call the base-class version of the method. Then you are free to do whatever you like; normally, this means using the <b>Graphics</b> methods that you can find in the documentation for <b>java.awt.Graphics</b> (in the JDK documentation from <i>java.sun.com</i>) to draw and paint pixels onto the <b>JPanel</b>. Here, you can see that almost all the code is involved in performing the calculations; the only two method calls that actually manipulate the screen are <b>setColor(&#160;)</b> and <b>drawLine(&#160;)</b>. You will probably have a similar experience when creating your own program that displays graphical data; you&#146;ll spend most of your time figuring out what it is you want to draw, but the actual drawing process will be quite simple. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2063" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>When I created this program, the bulk of my time was spent in getting the sine wave to display. Once I did that, I thought it would be nice to be able to dynamically change the number of cycles. My programming experiences when trying to do such things in other languages made me a bit reluctant to try this, but it turned out to be the easiest part of the project. I created a <b>JSlider</b> (the arguments are the left-most value of the <b>JSlider</b>, the right-most value, and the starting value, respectively, but there are other constructors as well) and dropped it into the <b>JApplet</b>. Then I looked at the JDK documentation and noticed that the only listener was the <a name="Index1830"></a><b>addChangeListener</b>, which was triggered whenever the slider was changed enough for it to produce a different value. The only method for this was the obviously named <a name="Index1831"></a><b>stateChanged(&#160;)</b>, which provided a <b>ChangeEvent</b> object so that I could look backward to the source of the change and find the new value. By calling the <b>sines</b> object&#146;s <b>setCycles(&#160;)</b>, the new value was incorporated and the <b>JPanel</b> redrawn. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2064" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>In general, you will find that most of your Swing problems can be solved by following a similar process, and you&#146;ll find that it&#146;s generally quite simple, even if you haven&#146;t used a particular component before. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2065" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>If your problem is more complex, there are other more sophisticated alternatives for drawing, including third-party JavaBeans components and the Java 2D API. These solutions are beyond the scope of this book, but you should look them up if your drawing code becomes too onerous. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2066" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h3>
<a name="_Toc24775903"></a><a name="Heading20443"></a>Dialog Boxes<br></h3>
<p><a name="Index1832"></a><a name="Index1833"></a>A dialog box is a window that pops up out of another window. Its purpose is to deal with some specific issue without cluttering the original window with those details. Dialog boxes are heavily used in windowed programming environments, but less frequently used in applets. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2067" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>To create a dialog box, you inherit from <b>JDialog</b>, which is just another kind of <b>Window</b>, like a <b>JFrame</b>. A <b>JDialog</b> has a layout manager (which defaults to <b>BorderLayout</b>), and you add event listeners to deal with events. One significant difference when the dialog window is closed is that you don&#146;t want to shut down the application. Instead, you release the resources used by the dialog&#146;s window by calling <a name="Index1834"></a><a name="Index1835"></a><b>dispose(&#160;)</b>. Here&#146;s a very simple example:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c14:Dialogs.java</font>
<font color=#009900>// Creating and using Dialog Boxes.</font>
<font color=#009900>// &lt;applet code=Dialogs width=125 height=75&gt;&lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>class</font> MyDialog <font color=#0000ff>extends</font> JDialog {
  <font color=#0000ff>public</font> MyDialog(JFrame parent) {
    <font color=#0000ff>super</font>(parent, <font color=#004488>"My dialog"</font>, <font color=#0000ff>true</font>);
    Container cp = getContentPane();
    cp.setLayout(<font color=#0000ff>new</font> FlowLayout());
    cp.add(<font color=#0000ff>new</font> JLabel(<font color=#004488>"Here is my dialog"</font>));
    JButton ok = <font color=#0000ff>new</font> JButton(<font color=#004488>"OK"</font>);
    ok.addActionListener(<font color=#0000ff>new</font> ActionListener() {
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
        dispose(); <font color=#009900>// Closes the dialog</font>
      }
    });
    cp.add(ok);
    setSize(150,125);
  }
}

<font color=#0000ff>public</font> <font color=#0000ff>class</font> Dialogs <font color=#0000ff>extends</font> JApplet {
  <font color=#0000ff>private</font> JButton b1 = <font color=#0000ff>new</font> JButton(<font color=#004488>"Dialog Box"</font>);
  <font color=#0000ff>private</font> MyDialog dlg = <font color=#0000ff>new</font> MyDialog(<font color=#0000ff>null</font>);
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    b1.addActionListener(<font color=#0000ff>new</font> ActionListener() {
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
        dlg.show();
      }
    });
    getContentPane().add(b1);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> Dialogs(), 125, 75);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p>Once the <b>JDialog</b> is created, the <a name="Index1836"></a><b>show(&#160;)</b> method must be called to display and activate it. For the dialog to close, it must call <b>dispose(&#160;)</b>. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2068" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>You&#146;ll see that anything that pops up out of an applet, including dialog boxes, is &#147;untrusted.&#148; That is, you get a warning in the window that&#146;s been popped up. This is because, in concept, it would be possible to fool users into thinking that they&#146;re dealing with a regular native application and to get them to type in their credit card number, which then goes across the Web. An applet is always attached to a Web page and visible within your Web browser, while a dialog box is detached&#151;so theoretically, it&#146;s possible. As a result, it is not so common to see an applet that uses a dialog box. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2069" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>The following example is more complex; the dialog box is made up of a grid (using <b>GridLayout</b>) of a special kind of button that is defined here as class <b>ToeButton</b>. This button draws a frame around itself and, depending on its state, a blank, an &#147;x,&#148; or an &#147;o&#148; in the middle. It starts out blank, and then depending on whose turn it is, changes to an &#147;x&#148; or an &#147;o.&#148; However, it will also flip back and forth between &#147;x&#148; and &#147;o&#148; when you click on the button. (This makes the tic-tac-toe concept only slightly more annoying than it already is.) In addition, the dialog box can be set up for any number of rows and columns by changing numbers in the main application window.<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c14:TicTacToe.java</font>
<font color=#009900>// Dialog boxes and creating your own components.</font>
<font color=#009900>// &lt;applet code=TicTacToe width=200 height=100&gt;&lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> TicTacToe <font color=#0000ff>extends</font> JApplet {
  <font color=#0000ff>private</font> JTextField
    rows = <font color=#0000ff>new</font> JTextField(<font color=#004488>"3"</font>),
    cols = <font color=#0000ff>new</font> JTextField(<font color=#004488>"3"</font>);
  <font color=#0000ff>private</font> <font color=#0000ff>static</font> <font color=#0000ff>final</font> <font color=#0000ff>int</font> BLANK = 0, XX = 1, OO = 2;
  <font color=#0000ff>class</font> ToeDialog <font color=#0000ff>extends</font> JDialog {
    <font color=#0000ff>private</font> <font color=#0000ff>int</font> turn = XX; <font color=#009900>// Start with x's turn</font>
    ToeDialog(<font color=#0000ff>int</font> cellsWide, <font color=#0000ff>int</font> cellsHigh) {
      setTitle(<font color=#004488>"The game itself"</font>);
      Container cp = getContentPane();
      cp.setLayout(<font color=#0000ff>new</font> GridLayout(cellsWide, cellsHigh));
      <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; cellsWide * cellsHigh; i++)
        cp.add(<font color=#0000ff>new</font> ToeButton());
      setSize(cellsWide * 50, cellsHigh * 50);
      setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }
    <font color=#0000ff>class</font> ToeButton <font color=#0000ff>extends</font> JPanel {
      <font color=#0000ff>private</font> <font color=#0000ff>int</font> state = BLANK;
      <font color=#0000ff>public</font> ToeButton() { addMouseListener(<font color=#0000ff>new</font> ML()); }
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> paintComponent(Graphics g) {
        <font color=#0000ff>super</font>.paintComponent(g);
        <font color=#0000ff>int</font>
          x1 = 0, y1 = 0,
          x2 = getSize().width - 1,
          y2 = getSize().height - 1;
        g.drawRect(x1, y1, x2, y2);
        x1 = x2/4;
        y1 = y2/4;
        <font color=#0000ff>int</font> wide = x2/2, high = y2/2;
        <font color=#0000ff>if</font>(state == XX) {
          g.drawLine(x1, y1, x1 + wide, y1 + high);
          g.drawLine(x1, y1 + high, x1 + wide, y1);
        }
        <font color=#0000ff>if</font>(state == OO)
          g.drawOval(x1, y1, x1 + wide/2, y1 + high/2);
      }
      <font color=#0000ff>class</font> ML <font color=#0000ff>extends</font> MouseAdapter {
        <font color=#0000ff>public</font> <font color=#0000ff>void</font> mousePressed(MouseEvent e) {
          <font color=#0000ff>if</font>(state == BLANK) {
            state = turn;
            turn = (turn == XX ? OO : XX);
          }
          <font color=#0000ff>else</font>
            state = (state == XX ? OO : XX);
          repaint();
        }
      }
    }
  }
  <font color=#0000ff>class</font> BL <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      JDialog d = <font color=#0000ff>new</font> ToeDialog(
        Integer.parseInt(rows.getText()),
        Integer.parseInt(cols.getText()));
      d.setVisible(<font color=#0000ff>true</font>);
    }
  }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    JPanel p = <font color=#0000ff>new</font> JPanel();
    p.setLayout(<font color=#0000ff>new</font> GridLayout(2,2));
    p.add(<font color=#0000ff>new</font> JLabel(<font color=#004488>"Rows"</font>, JLabel.CENTER));
    p.add(rows);
    p.add(<font color=#0000ff>new</font> JLabel(<font color=#004488>"Columns"</font>, JLabel.CENTER));
    p.add(cols);
    Container cp = getContentPane();
    cp.add(p, BorderLayout.NORTH);
    JButton b = <font color=#0000ff>new</font> JButton(<font color=#004488>"go"</font>);
    b.addActionListener(<font color=#0000ff>new</font> BL());
    cp.add(b, BorderLayout.SOUTH);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> TicTacToe(), 200, 100);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p>Because <b>static</b>s can only be at the outer level of the class, inner classes cannot have <b>static</b> data or nested classes. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2070" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p><a name="Index1837"></a><a name="Index1838"></a>The <b>paintComponent(&#160;)</b> method draws the square around the panel and the &#147;x&#148; or the &#147;o.&#148; This is full of tedious calculations, but it&#146;s straightforward. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2071" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>A mouse click is captured by the <b>MouseListener</b>, which first checks to see if the panel has anything written on it. If not, the parent window is queried to find out whose turn it is, which establishes the state of the <b>ToeButton</b>. Via the inner class mechanism, the <b>ToeButton</b> then reaches back into the parent and changes the turn. If the button is already displaying an &#147;x&#148; or an &#147;o,&#148; then that is flopped. You can see in these calculations the convenient use of the ternary if-else described in Chapter 3. After a state change, the <b>ToeButton</b> is repainted. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2072" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>The constructor for <b>ToeDialog</b> is quite simple; It adds into a <b>GridLayout</b> as many buttons as you request, then resizes it for 50 pixels on a side for each button. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2073" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p><b>TicTacToe</b> sets up the whole application by creating the<b> JTextField</b>s (for inputting the rows and columns of the button grid) and the &#147;go&#148; button with its <b>ActionListener</b>. When the button is pressed, the data in the<b> JTextField</b>s must be fetched, and, since they are in <b>String</b> form, turned into <b>int</b>s using the <b>static</b> <b>Integer.parseInt(&#160;)</b><a name="Index1839"></a><a name="Index1840"></a> method. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2074" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h3>
<a name="_Toc24775904"></a><a name="Heading20578"></a>File dialogs<br></h3>
<p><a name="Index1841"></a><a name="Index1842"></a>Some operating systems have a number of special built-in dialog boxes to handle the selection of things such as fonts, colors, printers, and the like. Virtually all graphical operating systems support the opening and saving of files, so Java&#146;s <a name="Index1843"></a><b>JFileChooser</b> encapsulates these for easy use. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2075" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>The following application exercises two forms of <b>JFileChooser</b> dialogs, one for opening and one for saving. Most of the code should by now be familiar, and all the interesting activities happen in the action listeners for the two different button clicks:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c14:FileChooserTest.java</font>
<font color=#009900>// Demonstration of File dialog boxes.</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> FileChooserTest <font color=#0000ff>extends</font> JFrame {
  <font color=#0000ff>private</font> JTextField
    filename = <font color=#0000ff>new</font> JTextField(),
    dir = <font color=#0000ff>new</font> JTextField();
  <font color=#0000ff>private</font> JButton
    open = <font color=#0000ff>new</font> JButton(<font color=#004488>"Open"</font>),
    save = <font color=#0000ff>new</font> JButton(<font color=#004488>"Save"</font>);
  <font color=#0000ff>public</font> FileChooserTest() {
    JPanel p = <font color=#0000ff>new</font> JPanel();
    open.addActionListener(<font color=#0000ff>new</font> OpenL());
    p.add(open);
    save.addActionListener(<font color=#0000ff>new</font> SaveL());
    p.add(save);
    Container cp = getContentPane();
    cp.add(p, BorderLayout.SOUTH);
    dir.setEditable(<font color=#0000ff>false</font>);
    filename.setEditable(<font color=#0000ff>false</font>);
    p = <font color=#0000ff>new</font> JPanel();
    p.setLayout(<font color=#0000ff>new</font> GridLayout(2,1));
    p.add(filename);
    p.add(dir);
    cp.add(p, BorderLayout.NORTH);
  }
  <font color=#0000ff>class</font> OpenL <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      JFileChooser c = <font color=#0000ff>new</font> JFileChooser();
      <font color=#009900>// Demonstrate "Open" dialog:</font>
      <font color=#0000ff>int</font> rVal = c.showOpenDialog(FileChooserTest.<font color=#0000ff>this</font>);
      <font color=#0000ff>if</font>(rVal == JFileChooser.APPROVE_OPTION) {
        filename.setText(c.getSelectedFile().getName());
        dir.setText(c.getCurrentDirectory().toString());
      }
      <font color=#0000ff>if</font>(rVal == JFileChooser.CANCEL_OPTION) {
        filename.setText(<font color=#004488>"You pressed cancel"</font>);
        dir.setText(<font color=#004488>""</font>);
      }
    }
  }
  <font color=#0000ff>class</font> SaveL <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      JFileChooser c = <font color=#0000ff>new</font> JFileChooser();
      <font color=#009900>// Demonstrate "Save" dialog:</font>
      <font color=#0000ff>int</font> rVal = c.showSaveDialog(FileChooserTest.<font color=#0000ff>this</font>);
      <font color=#0000ff>if</font>(rVal == JFileChooser.APPROVE_OPTION) {
        filename.setText(c.getSelectedFile().getName());
        dir.setText(c.getCurrentDirectory().toString());
      }
      <font color=#0000ff>if</font>(rVal == JFileChooser.CANCEL_OPTION) {
        filename.setText(<font color=#004488>"You pressed cancel"</font>);
        dir.setText(<font color=#004488>""</font>);
      }
    }
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> FileChooserTest(), 250, 110);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p>Note that there are many variations you can apply to <b>JFileChooser</b>, including filters to narrow the file names that you will allow. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2076" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>For an &#147;open file&#148; dialog, you call <b>showOpenDialog(&#160;)</b>, and for a &#147;save file&#148; dialog, you call <b>showSaveDialog(&#160;)</b>. These commands don&#146;t return until the dialog is closed. The <b>JFileChooser</b> object still exists, so you can read data from it. The methods <b>getSelectedFile(&#160;)</b> and <b>getCurrentDirectory(&#160;)</b> are two ways you can interrogate the results of the operation. If these return <b>null</b>, it means the user canceled out of the dialog. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2077" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h3>
<a name="_Toc24775905"></a><a name="Heading20648"></a>HTML on Swing
components<br></h3>
<p><a name="Index1844"></a><a name="Index1845"></a>Any component that can take text can also take HTML text, which it will reformat according to HTML rules. This means you can very easily add fancy text to a Swing component. For example:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c14:HTMLButton.java</font>
<font color=#009900>// Putting HTML text on Swing components.</font>
<font color=#009900>// &lt;applet code=HTMLButton width=250 height=500&gt;&lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> HTMLButton <font color=#0000ff>extends</font> JApplet {
  <font color=#0000ff>private</font> JButton b = <font color=#0000ff>new</font> JButton(
    <font color=#004488>"&lt;html&gt;&lt;b&gt;&lt;font size=+2&gt;"</font> +
    <font color=#004488>"&lt;center&gt;Hello!&lt;br&gt;&lt;i&gt;Press me now!"</font>);
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    b.addActionListener(<font color=#0000ff>new</font> ActionListener() {
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
        getContentPane().add(<font color=#0000ff>new</font> JLabel(<font color=#004488>"&lt;html&gt;"</font> +
          <font color=#004488>"&lt;i&gt;&lt;font size=+4&gt;Kapow!"</font>));
        <font color=#009900>// Force a re-layout to include the new label:</font>
        validate();
      }
    });
    Container cp = getContentPane();
    cp.setLayout(<font color=#0000ff>new</font> FlowLayout());
    cp.add(b);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> HTMLButton(), 200, 500);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p>You must start the text with &#147;&lt;html&gt;,&#148; and then you can use normal HTML tags. Note that you are not forced to include the normal closing tags. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2078" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>The <b>ActionListener</b> adds a new <b>JLabel</b> to the form, which also contains HTML text. However, this label is not added during <b>init(&#160;)</b>, so you must call the container&#146;s <b>validate(&#160;)</b> method in order to force a re-layout of the components (and thus the display of the new label). <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2079" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>You can also use HTML text for <b>JTabbedPane</b>, <b>JMenuItem</b>, <b>JToolTip</b>, <b>JradioButton</b>, and <b>JCheckBox</b>. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2080" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h3>
<a name="_Toc24775906"></a><a name="Heading20683"></a>Sliders and progress
bars</h3>
<p>A slider (which has already been used in <a name="Index1846"></a><b>SineWave.java</b>) allows the user to input data by moving a point back and forth, which is intuitive in some situations (volume controls, for example). A progress bar displays data in a relative fashion from &#147;full&#148; to &#147;empty&#148; so the user gets a perspective. My favorite example for these is to simply hook the slider to the progress bar so when you move the slider, the progress bar changes accordingly:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c14:Progress.java</font>
<font color=#009900>// Using progress bars and sliders.</font>
<font color=#009900>// &lt;applet code=Progress width=300 height=200&gt;&lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> javax.swing.event.*;
<font color=#0000ff>import</font> javax.swing.border.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> Progress <font color=#0000ff>extends</font> JApplet {
  <font color=#0000ff>private</font> JProgressBar pb = <font color=#0000ff>new</font> JProgressBar();
  <font color=#0000ff>private</font> JSlider sb =
    <font color=#0000ff>new</font> JSlider(JSlider.HORIZONTAL, 0, 100, 60);
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    Container cp = getContentPane();
    cp.setLayout(<font color=#0000ff>new</font> GridLayout(2,1));
    cp.add(pb);
    sb.setValue(0);
    sb.setPaintTicks(<font color=#0000ff>true</font>);
    sb.setMajorTickSpacing(20);
    sb.setMinorTickSpacing(5);
    sb.setBorder(<font color=#0000ff>new</font> TitledBorder(<font color=#004488>"Slide Me"</font>));
    pb.setModel(sb.getModel()); <font color=#009900>// Share model</font>
    cp.add(sb);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> Progress(), 300, 200);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p>The key to hooking the two components together is in sharing their model, in the line: <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2081" title="Send BackTalk Comment">Feedback</a></font><br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>pb.setModel(sb.getModel());</PRE></FONT></BLOCKQUOTE><p><br></p>
<p>Of course, you could also control the two using a listener, but this is more straightforward for simple situations.<br></p>
<p>The <a name="Index1848"></a><b>JProgressBar </b>is fairly straightforward, but the <a name="Index1849"></a><b>JSlider</b> has a lot of options, such as the orientation and major and minor tick marks. Notice how straightforward it is to add a titled border. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2082" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h3>
<a name="_Toc24775907"></a><a name="Heading20721"></a>Trees</h3>
<p>Using a <a name="Index1850"></a><b>JTree </b>can be as simple as saying:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>add(<font color=#0000ff>new</font> JTree(<font color=#0000ff>new</font> Object[] {<font color=#004488>"this"</font>, <font color=#004488>"that"</font>, <font color=#004488>"other"</font>}));</PRE></FONT></BLOCKQUOTE><p><br></p>
<p>This displays a primitive tree. The API for trees is vast, however&#151;certainly one of the largest in Swing. It appears that you can do just about anything with trees, but more sophisticated tasks might require quite a bit of research and experimentation. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2083" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p><a name="Index1851"></a>Fortunately, there is a middle ground provided in the library: the &#147;default&#148; tree components, which generally do what you need. So most of the time you can use these components, and only in special cases will you need to delve in and understand trees more deeply. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2084" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>The following example uses the &#147;default&#148; tree components to display a tree in an applet. When you press the button, a new subtree is added under the currently selected node (if no node is selected, the root node is used): <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2085" title="Send BackTalk Comment">Feedback</a></font><br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c14:Trees.java</font>
<font color=#009900>// Simple Swing tree. Trees can be vastly more complex.</font>
<font color=#009900>// &lt;applet code=Trees width=250 height=250&gt;&lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> javax.swing.tree.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#009900>// Takes an array of Strings and makes the first</font>
<font color=#009900>// element a node and the rest leaves:</font>
<font color=#0000ff>class</font> Branch {
  <font color=#0000ff>private</font> DefaultMutableTreeNode r;
  <font color=#0000ff>public</font> Branch(String[] data) {
    r = <font color=#0000ff>new</font> DefaultMutableTreeNode(data[0]);
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 1; i &lt; data.length; i++)
      r.add(<font color=#0000ff>new</font> DefaultMutableTreeNode(data[i]));
  }
  <font color=#0000ff>public</font> DefaultMutableTreeNode node() { <font color=#0000ff>return</font> r; }
}

<font color=#0000ff>public</font> <font color=#0000ff>class</font> Trees <font color=#0000ff>extends</font> JApplet {
  <font color=#0000ff>private</font> String[][] data = {
    { <font color=#004488>"Colors"</font>, <font color=#004488>"Red"</font>, <font color=#004488>"Blue"</font>, <font color=#004488>"Green"</font> },
    { <font color=#004488>"Flavors"</font>, <font color=#004488>"Tart"</font>, <font color=#004488>"Sweet"</font>, <font color=#004488>"Bland"</font> },
    { <font color=#004488>"Length"</font>, <font color=#004488>"Short"</font>, <font color=#004488>"Medium"</font>, <font color=#004488>"Long"</font> },
    { <font color=#004488>"Volume"</font>, <font color=#004488>"High"</font>, <font color=#004488>"Medium"</font>, <font color=#004488>"Low"</font> },
    { <font color=#004488>"Temperature"</font>, <font color=#004488>"High"</font>, <font color=#004488>"Medium"</font>, <font color=#004488>"Low"</font> },
    { <font color=#004488>"Intensity"</font>, <font color=#004488>"High"</font>, <font color=#004488>"Medium"</font>, <font color=#004488>"Low"</font> },
  };
  <font color=#0000ff>private</font> <font color=#0000ff>static</font> <font color=#0000ff>int</font> i = 0;
  <font color=#0000ff>private</font> DefaultMutableTreeNode root, child, chosen;
  <font color=#0000ff>private</font> JTree tree;
  <font color=#0000ff>private</font> DefaultTreeModel model;
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    Container cp = getContentPane();
    root = <font color=#0000ff>new</font> DefaultMutableTreeNode(<font color=#004488>"root"</font>);
    tree = <font color=#0000ff>new</font> JTree(root);
    <font color=#009900>// Add it and make it take care of scrolling:</font>
    cp.add(<font color=#0000ff>new</font> JScrollPane(tree), BorderLayout.CENTER);
    <font color=#009900>// Capture the tree's model:</font>
    model =(DefaultTreeModel)tree.getModel();
    JButton test = <font color=#0000ff>new</font> JButton(<font color=#004488>"Press me"</font>);
    test.addActionListener(<font color=#0000ff>new</font> ActionListener() {
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
        <font color=#0000ff>if</font>(i &lt; data.length) {
          child = <font color=#0000ff>new</font> Branch(data[i++]).node();
          <font color=#009900>// What's the last one you clicked?</font>
          chosen = (DefaultMutableTreeNode)
            tree.getLastSelectedPathComponent();
          <font color=#0000ff>if</font>(chosen == <font color=#0000ff>null</font>)
            chosen = root;
          <font color=#009900>// The model will create the appropriate event.</font>
          <font color=#009900>// In response, the tree will update itself:</font>
          model.insertNodeInto(child, chosen, 0);
          <font color=#009900>// Puts the new node on the chosen node.</font>
        }
      }
    });
    <font color=#009900>// Change the button's colors:</font>
    test.setBackground(Color.BLUE);
    test.setForeground(Color.WHITE);
    JPanel p = <font color=#0000ff>new</font> JPanel();
    p.add(test);
    cp.add(p, BorderLayout.SOUTH);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> Trees(), 250, 250);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p>The first class, <b>Branch</b>, is a tool to take an array of <b>String</b> and build a <a name="Index1852"></a><b>DefaultMutableTreeNode</b> with the first <b>String</b> as the root and the rest of the <b>String</b>s in the array as leaves. Then <b>node(&#160;)</b> can be called to produce the root of this &#147;branch.&#148; <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2086" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>The <b>Trees</b> class contains a two-dimensional array of <b>String</b>s, from which <b>Branch</b>es can be made, and a <b>static int i</b> to count through this array. The <b>DefaultMutableTreeNode</b> objects hold the nodes, but the physical representation on screen is controlled by the <b>JTree</b> and its associated model, the <a name="Index1853"></a><b>DefaultTreeModel</b>. Note that when the <b>JTree</b> is added to the applet, it is wrapped in a <a name="Index1854"></a><b>JScrollPane</b>&#151;this is all it takes to provide automatic scrolling. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2087" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>The <b>JTree</b> is controlled through its <i>model</i>. When you make a change to the model, the model generates an event that causes the <b>JTree</b> to perform any necessary updates to the visible representation of the tree. In <b>init(&#160;)</b>, the model is captured by calling <a name="Index1855"></a><b>getModel(&#160;)</b>. When the button is pressed, a new &#147;branch&#148; is created. Then the currently selected component is found (or the root is used if nothing is selected) and the model&#146;s <a name="Index1856"></a><b>insertNodeInto(&#160;)</b> method does all the work of changing the tree and causing it to be updated. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2088" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>An example like the preceding one may give you what you need in a tree. However, trees have the power to do just about anything you can imagine&#151;everywhere you see the word &#147;default&#148; in the preceding example, you can substitute your own class to get different behavior. But beware: Almost all of these classes have a large interface, so you could spend a lot of time struggling to understand the intricacies of trees. Despite this, it&#146;s a good design, and the alternatives are usually much worse. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2089" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h3>
<a name="_Toc24775908"></a><a name="Heading20803"></a>Tables</h3>
<p>Like trees, tables in Swing are vast and powerful. They are primarily intended to be the popular &#147;grid&#148; interface to databases via Java Database Connectivity (JDBC, discussed in <a name="Index1857"></a><i>Thinking in Enterprise Java</i>), and thus they have a tremendous amount of flexibility, which you pay for in complexity. There&#146;s easily enough here to allow the creation of a full-blown spreadsheet application and could probably justify an entire book. However, it is also possible to create a relatively simple <a name="Index1858"></a><b>JTable</b> if you understand the basics. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2090" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>The <b>JTable</b> controls how the data is displayed, but the <b>TableModel</b> controls the data itself. So to create a <b>JTable</b>, you&#146;ll typically create a <b>TableModel</b> first. You can fully implement the <b>TableModel</b> interface, but it&#146;s simpler to inherit from the helper class <b>AbstractTableModel</b>:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c14:JTableDemo.java</font>
<font color=#009900>// Simple demonstration of JTable.</font>
<font color=#009900>// &lt;applet code=Table width=350 height=200&gt;&lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> javax.swing.table.*;
<font color=#0000ff>import</font> javax.swing.event.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> JTableDemo <font color=#0000ff>extends</font> JApplet {
  <font color=#0000ff>private</font> JTextArea txt = <font color=#0000ff>new</font> JTextArea(4, 20);
  <font color=#009900>// The TableModel controls all the data:</font>
  <font color=#0000ff>class</font> DataModel <font color=#0000ff>extends</font> AbstractTableModel {
    Object[][] data = {
      {<font color=#004488>"one"</font>, <font color=#004488>"two"</font>, <font color=#004488>"three"</font>, <font color=#004488>"four"</font>},
      {<font color=#004488>"five"</font>, <font color=#004488>"six"</font>, <font color=#004488>"seven"</font>, <font color=#004488>"eight"</font>},
      {<font color=#004488>"nine"</font>, <font color=#004488>"ten"</font>, <font color=#004488>"eleven"</font>, <font color=#004488>"twelve"</font>},
    };
    <font color=#009900>// Prints data when table changes:</font>
    <font color=#0000ff>class</font> TML <font color=#0000ff>implements</font> TableModelListener {
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> tableChanged(TableModelEvent e) {
        txt.setText(<font color=#004488>""</font>); <font color=#009900>// Clear it</font>
        <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; data.length; i++) {
          <font color=#0000ff>for</font>(<font color=#0000ff>int</font> j = 0; j &lt; data[0].length; j++)
            txt.append(data[i][j] + <font color=#004488>" "</font>);
          txt.append(<font color=#004488>"\n"</font>);
        }
      }
    }
    <font color=#0000ff>public</font> DataModel() { addTableModelListener(<font color=#0000ff>new</font> TML());}
    <font color=#0000ff>public</font> <font color=#0000ff>int</font> getColumnCount() { <font color=#0000ff>return</font> data[0].length; }
    <font color=#0000ff>public</font> <font color=#0000ff>int</font> getRowCount() { <font color=#0000ff>return</font> data.length; }
    <font color=#0000ff>public</font> Object getValueAt(<font color=#0000ff>int</font> row, <font color=#0000ff>int</font> col) {
      <font color=#0000ff>return</font> data[row][col];
    }
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> setValueAt(Object val, <font color=#0000ff>int</font> row, <font color=#0000ff>int</font> col) {
      data[row][col] = val;
      <font color=#009900>// Indicate the change has happened:</font>
      fireTableDataChanged();
    }
    <font color=#0000ff>public</font> <font color=#0000ff>boolean</font> isCellEditable(<font color=#0000ff>int</font> row, <font color=#0000ff>int</font> col) {
      <font color=#0000ff>return</font> <font color=#0000ff>true</font>;
    }
  }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    Container cp = getContentPane();
    JTable table = <font color=#0000ff>new</font> JTable(<font color=#0000ff>new</font> DataModel());
    cp.add(<font color=#0000ff>new</font> JScrollPane(table));
    cp.add(BorderLayout.SOUTH, txt);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> JTableDemo(), 350, 200);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p><b>DataModel</b> contains an array of data, but you could also get the data from some other source such as a database. The constructor adds a <b>TableModelListener</b> that prints the array every time the table is changed. The rest of the methods follow the Beans naming convention (using &#147;get&#148; and &#147;set&#148; methods, which will be described later in this chapter) and are used by <b>JTable</b> when it wants to present the information in <b>DataModel</b>. <b>AbstractTableModel</b> provides default methods for <b>setValueAt(&#160;)</b> and <b>isCellEditable(&#160;)</b> that prevent changes to the data, so if you want to be able to edit the data, you must override these methods. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2091" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>Once you have a <b>TableModel</b>, you only need to hand it to the <b>JTable</b> constructor. All the details of displaying, editing, and updating will be taken care of for you. This example also puts the <b>JTable</b> in a <b>JScrollPane</b>. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2092" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h3>
<a name="_Toc24775909"></a><a name="Heading20864"></a>Selecting Look &amp;
Feel</h3>
<p>&#147;Pluggable Look &amp; Feel&#148; allows your program to emulate the look and feel of various operating environments. You can even do all sorts of fancy things, like dynamically changing the look and feel while the program is executing. However, you generally just want to do one of two things: either select the &#147;cross platform&#148; look and feel (which is Swing&#146;s &#147;metal&#148;), or select the look and feel for the system you are currently on so your Java program looks like it was created specifically for that system (this is almost certainly the best choice in most cases, to avoid confounding the user). The code to select either of these behaviors is quite simple, but you must execute it <a name="Index1859"></a><a name="Index1860"></a><i>before</i> you create any visual components, because the components will be made based on the current look and feel, and will not be changed just because you happen to change the look and feel midway during the program (that process is more complicated and uncommon, and is relegated to Swing-specific books). <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2093" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>Actually, if you want to use the cross-platform (&#147;metal&#148;) look and feel that is characteristic of Swing programs, you don&#146;t have to do anything&#151;it&#146;s the default. But if you want instead to use the current operating environment&#146;s look and feel, you just insert the following code, typically at the beginning of your <b>main(&#160;)</b>, but at least before any components are added:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#0000ff>try</font> {
  UIManager.setLookAndFeel(UIManager.
    getSystemLookAndFeelClassName());
} <font color=#0000ff>catch</font>(Exception e) {
  <font color=#0000ff>throw</font> <font color=#0000ff>new</font> RuntimeException(e);
}</PRE></FONT></BLOCKQUOTE><p><br></p>
<p>You don&#146;t need anything in the <b>catch</b> clause because the <b>UIManager</b> will default to the cross-platform look and feel if your attempts to set up any of the alternatives fail. However, during debugging the exception can be quite useful, so you may at least want see some results via the catch clause. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2094" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>Here is a program that takes a command-line argument to select a look and feel, and shows how several different components look under the chosen look and feel:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c14:LookAndFeel.java</font>
<font color=#009900>// Selecting different looks &amp; feels.</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> java.util.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> LookAndFeel <font color=#0000ff>extends</font> JFrame {
  <font color=#0000ff>private</font> String[] choices = {
    <font color=#004488>"eeny"</font>,<font color=#004488>"meeny"</font>,<font color=#004488>"Minnie"</font>,<font color=#004488>"Mickey"</font>,<font color=#004488>"Moe"</font>,<font color=#004488>"Larry"</font>,<font color=#004488>"Curly"</font>
  };
  <font color=#0000ff>private</font> Component[] samples = {
    <font color=#0000ff>new</font> JButton(<font color=#004488>"JButton"</font>),
    <font color=#0000ff>new</font> JTextField(<font color=#004488>"JTextField"</font>),
    <font color=#0000ff>new</font> JLabel(<font color=#004488>"JLabel"</font>),
    <font color=#0000ff>new</font> JCheckBox(<font color=#004488>"JCheckBox"</font>),
    <font color=#0000ff>new</font> JRadioButton(<font color=#004488>"Radio"</font>),
    <font color=#0000ff>new</font> JComboBox(choices),
    <font color=#0000ff>new</font> JList(choices),
  };
  <font color=#0000ff>public</font> LookAndFeel() {
    <font color=#0000ff>super</font>(<font color=#004488>"Look And Feel"</font>);
    Container cp = getContentPane();
    cp.setLayout(<font color=#0000ff>new</font> FlowLayout());
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; samples.length; i++)
      cp.add(samples[i]);
  }
  <font color=#0000ff>private</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> usageError() {
    System.out.println(
      <font color=#004488>"Usage:LookAndFeel [cross|system|motif]"</font>);
    System.exit(1);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    <font color=#0000ff>if</font>(args.length == 0) usageError();
    <font color=#0000ff>if</font>(args[0].equals(<font color=#004488>"cross"</font>)) {
      <font color=#0000ff>try</font> {
        UIManager.setLookAndFeel(UIManager.
          getCrossPlatformLookAndFeelClassName());
      } <font color=#0000ff>catch</font>(Exception e) {
        e.printStackTrace();
      }
    } <font color=#0000ff>else</font> <font color=#0000ff>if</font>(args[0].equals(<font color=#004488>"system"</font>)) {
      <font color=#0000ff>try</font> {
        UIManager.setLookAndFeel(UIManager.
          getSystemLookAndFeelClassName());
      } <font color=#0000ff>catch</font>(Exception e) {
        e.printStackTrace();
      }
    } <font color=#0000ff>else</font> <font color=#0000ff>if</font>(args[0].equals(<font color=#004488>"motif"</font>)) {
      <font color=#0000ff>try</font> {
        UIManager.setLookAndFeel(<font color=#004488>"com.sun.java."</font>+
          <font color=#004488>"swing.plaf.motif.MotifLookAndFeel"</font>);
      } <font color=#0000ff>catch</font>(Exception e) {
        e.printStackTrace();
      }
    } <font color=#0000ff>else</font> usageError();
    <font color=#009900>// Note the look &amp; feel must be set before</font>
    <font color=#009900>// any components are created.</font>
    Console.run(<font color=#0000ff>new</font> LookAndFeel(), 300, 200);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p>You can see that one option is to explicitly specify a string for a look and feel, as seen with <b>MotifLookAndFeel</b>. However, that one and the default &#147;metal&#148; look and feel are the only ones that can legally be used on any platform; even though there are strings for Windows and Macintosh look and feels, those can only be used on their respective platforms (these are produced when you call <b>getSystemLookAndFeelClassName(&#160;)</b> and you&#146;re on that particular platform). <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2095" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>It is also possible to create a custom look and feel package, for example, if you are building a framework for a company that wants a distinctive appearance. This is a big job and is far beyond the scope of this book (in fact, you&#146;ll discover it is beyond the scope of many dedicated Swing books!). <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2096" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h3>
<a name="_Toc24775910"></a><a name="Heading20941"></a>The clipboard</h3>
<p>The JFC supports limited operations with the system clipboard (in the <a name="Index1861"></a><a name="Index1862"></a><b>java.awt.datatransfer </b>package). You can copy <b>String</b> objects to the clipboard as text, and you can paste text from the clipboard into <b>String</b> objects. Of course, the clipboard is designed to hold any type of data, but how this data is represented on the clipboard is up to the program doing the cutting and pasting. The Java clipboard API provides for extensibility through the concept of a &#147;flavor.&#148; When data comes off the clipboard, it has an associated set of flavors that it can be converted to (for example, a graph might be represented as a string of numbers or as an image), and you can see if that particular clipboard data supports the flavor you&#146;re interested in. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2097" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p><a name="Index1863"></a>The following program is a simple demonstration of cut, copy, and paste with <b>String</b> data in a <b>JTextArea</b><a name="Index1864"></a>. One thing you&#146;ll notice is that the keyboard sequences you normally use for cutting, copying, and pasting also work. But if you look at any<b> JTextField</b> or<b> JTextArea</b> in any other program, you&#146;ll find that they also automatically support the clipboard key sequences. This example simply adds programmatic control of the clipboard, and you could use these techniques if you want to capture clipboard text into something other than a <b>JTextComponent</b>.<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c14:CutAndPaste.java</font>
<font color=#009900>// Using the clipboard.</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> java.awt.datatransfer.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> CutAndPaste <font color=#0000ff>extends</font> JFrame  {
  <font color=#0000ff>private</font> JMenuBar mb = <font color=#0000ff>new</font> JMenuBar();
  <font color=#0000ff>private</font> JMenu edit = <font color=#0000ff>new</font> JMenu(<font color=#004488>"Edit"</font>);
  <font color=#0000ff>private</font> JMenuItem
    cut = <font color=#0000ff>new</font> JMenuItem(<font color=#004488>"Cut"</font>),
    copy = <font color=#0000ff>new</font> JMenuItem(<font color=#004488>"Copy"</font>),
    paste = <font color=#0000ff>new</font> JMenuItem(<font color=#004488>"Paste"</font>);
  <font color=#0000ff>private</font> JTextArea text = <font color=#0000ff>new</font> JTextArea(20, 20);
  <font color=#0000ff>private</font> Clipboard clipbd =
    getToolkit().getSystemClipboard();
  <font color=#0000ff>public</font> CutAndPaste()  {
    cut.addActionListener(<font color=#0000ff>new</font> CutL());
    copy.addActionListener(<font color=#0000ff>new</font> CopyL());
    paste.addActionListener(<font color=#0000ff>new</font> PasteL());
    edit.add(cut);
    edit.add(copy);
    edit.add(paste);
    mb.add(edit);
    setJMenuBar(mb);
    getContentPane().add(text);
  }
  <font color=#0000ff>class</font> CopyL <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      String selection = text.getSelectedText();
      <font color=#0000ff>if</font>(selection == <font color=#0000ff>null</font>)
        <font color=#0000ff>return</font>;
      StringSelection clipString =
        <font color=#0000ff>new</font> StringSelection(selection);
      clipbd.setContents(clipString,clipString);
    }
  }
  <font color=#0000ff>class</font> CutL <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      String selection = text.getSelectedText();
      <font color=#0000ff>if</font>(selection == <font color=#0000ff>null</font>)
        <font color=#0000ff>return</font>;
      StringSelection clipString =
        <font color=#0000ff>new</font> StringSelection(selection);
      clipbd.setContents(clipString, clipString);
      text.replaceRange(<font color=#004488>""</font>, text.getSelectionStart(),
        text.getSelectionEnd());
    }
  }
  <font color=#0000ff>class</font> PasteL <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      Transferable clipData =
        clipbd.getContents(CutAndPaste.<font color=#0000ff>this</font>);
      <font color=#0000ff>try</font> {
        String clipString = (String)clipData.
          getTransferData(DataFlavor.stringFlavor);
        text.replaceRange(clipString,
          text.getSelectionStart(),text.getSelectionEnd());
      } <font color=#0000ff>catch</font>(Exception ex) {
        System.err.println(<font color=#004488>"Not String flavor"</font>);
      }
    }
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> CutAndPaste(), 300, 200);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p>The creation and addition of the menu and<b> JTextArea</b> should by now seem a pedestrian activity. What&#146;s different is the creation of the <b>Clipboard</b> field <b>clipbd</b>, which is done through the <b>Toolkit</b>. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2098" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>All the action takes place in the listeners. The <b>CopyL</b> and <b>CutL</b> listeners are the same except for the last line of <b>CutL</b>, which erases the line that&#146;s been copied. The special two lines are the creation of a <a name="Index1865"></a><b>StringSelection</b> object from the <b>String</b> and the call to <a name="Index1866"></a><b>setContents(&#160;)</b> with this <b>StringSelection</b>. That&#146;s all there is to putting a <b>String</b> on the clipboard. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2099" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>In <b>PasteL,</b> data is pulled off the clipboard using <a name="Index1867"></a><b>getContents(&#160;)</b>. What comes back is a fairly anonymous <a name="Index1868"></a><b>Transferable</b> object, and you don&#146;t really know what it contains. One way to find out is to call <a name="Index1869"></a><b>getTransferDataFlavors(&#160;)</b>, which returns an array of <a name="Index1870"></a><b>DataFlavor</b> objects indicating which flavors are supported by this particular object. You can also ask it directly with <a name="Index1871"></a><b>isDataFlavorSupported(&#160;)</b>, passing in the flavor you&#146;re interested in. Here, however, the bold approach is taken: <a name="Index1872"></a><b>getTransferData(&#160;)</b> is called, assuming that the contents supports the <b>String</b> flavor, and if it doesn&#146;t, the problem is sorted out in the exception handler. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2100" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>In the future you can expect more data flavors to be supported.<br></p>
<h2>
<a name="_Toc375545469"></a><a name="_Toc24775911"></a><a name="Heading21018"></a>Packaging
an applet into a JAR file<br></h2>
<p><a name="Index1873"></a><a name="Index1874"></a>An important use of the JAR utility is to optimize applet loading. In Java 1.0, people tended to try to cram all their code into a single applet class so the client would need only a single server hit to download the applet code. Not only did this result in messy, hard-to-read (and maintain) programs, but the <b>.class</b> file was still uncompressed so downloading wasn&#146;t as fast as it could have been. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2101" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>JAR files solve the problem by compressing all of your <b>.class</b> files into a single file that is downloaded by the browser. Now you can create the right design without worrying about how many <b>.class </b>files it will generate, and the user will get a much faster download time. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2102" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>Consider <b>TicTacToe.java</b>. It looks like a single class, but in fact it contains five inner classes, so that&#146;s six in all. Once you&#146;ve compiled the program, you package it into a JAR file with the line:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>jar cf TicTacToe.jar *.<font color=#0000ff>class</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p>This assumes that the only <b>.class</b> files in the current directory are the ones from <b>TicTacToe.java</b> (otherwise, you&#146;ll get extra baggage). <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2103" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>Now you can create an HTML page with the new <a name="Index1875"></a><a name="Index1876"></a><a name="Index1877"></a><b>archive</b> tag to indicate the name of the JAR file. Here is the basic applet tag:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>&lt;head&gt;&lt;title&gt;TicTacToe Example Applet
&lt;/title&gt;&lt;/head&gt;
&lt;body&gt;
&lt;applet code=TicTacToe.<font color=#0000ff>class</font>
        archive=TicTacToe.jar
        width=200 height=100&gt;
&lt;/applet&gt;
&lt;/body&gt;</PRE></FONT></BLOCKQUOTE><p><br></p>
<p>You&#146;ll need to run this file through the <b>HTMLconverter</b> application that comes with the JDK in order to get it to work. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0074" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h2>
<a name="_Toc24775912"></a><a name="Heading21036"></a>Signing applets<br></h2>
<p><a name="Index1878"></a><a name="Index1879"></a>Because of the sandbox security model, unsigned applets are prevented from performing certain tasks on the client, like writing to a file or connecting to a local network.<sup> <a name="fnB83" href="#fn83">[83]</a></sup> A signed applet verifies to the user that the person who claims to have created the applet actually did, and that the contents of the JAR file have not been tampered with since that file left the server. Without this minimum guarantee, the applet will not be allowed to do anything that could damage a person&#146;s machine or violate their privacy. This is a restriction that is vital for the safe use of applets through the Internet, but which also makes applets relatively powerless. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0548" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>Since the release of the Java Plugin, the process of signing applets has become simpler and more standardized, and applets have become a more viable means of deploying your application. Signing an applet has become a reasonably straightforward process and uses standard Java tools. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0549" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p><a name="Index1880"></a><a name="Index1881"></a>Prior to the plugin, you had to sign a <b>.jar</b> file with the Netscape tools for a Netscape client, a <b>.cab</b> file with the Microsoft tools for an Internet Explorer client, and create an applet tag in the HTML file for both platforms. The user would then have to install a certificate on the browser so that the applet would be trusted. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0550" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>The plugin not only provides a standard approach to applet signing and deployment, but it also provides the end user with a better experience by making certificate installation automatic. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0551" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>Consider an applet that wants to have access to the client&#146;s file system and read and write some files. This is very similar to <b>FileChooserTest.java</b>, but because this is an applet, it will only be able to open the Swing <b>JFileChooser</b> dialog if it is running from a signed JAR file. Otherwise, the <b>showOpenDialog(&#160;)</b> method will throw a <b>SecurityException</b>. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0552" title="Send BackTalk Comment">Feedback</a></font><br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c14:signedapplet:FileAccessApplet.java</font>
<font color=#009900>// Demonstration of File dialog boxes.</font>
<font color=#0000ff>package</font> c14.signedapplet;
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> java.io.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> FileAccessApplet <font color=#0000ff>extends</font> JApplet {
  <font color=#0000ff>private</font> JTextField
    filename = <font color=#0000ff>new</font> JTextField(),
    dir = <font color=#0000ff>new</font> JTextField();
  <font color=#0000ff>private</font> JButton
    open = <font color=#0000ff>new</font> JButton(<font color=#004488>"Open"</font>),
    save = <font color=#0000ff>new</font> JButton(<font color=#004488>"Save"</font>);
  <font color=#0000ff>private</font> JEditorPane ep = <font color=#0000ff>new</font> JEditorPane();
  <font color=#0000ff>private</font> JScrollPane jsp = <font color=#0000ff>new</font> JScrollPane();
  <font color=#0000ff>private</font> File file;
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    JPanel p = <font color=#0000ff>new</font> JPanel();
    open.addActionListener(<font color=#0000ff>new</font> OpenL());
    p.add(open);
    save.addActionListener(<font color=#0000ff>new</font> SaveL());
    p.add(save);
    Container cp = getContentPane();
    jsp.getViewport().add(ep);
    cp.add(jsp, BorderLayout.CENTER);
    cp.add(p, BorderLayout.SOUTH);
    dir.setEditable(<font color=#0000ff>false</font>);
    save.setEnabled(<font color=#0000ff>false</font>);
    ep.setContentType(<font color=#004488>"text</font><font color=#004488>/html"</font>);
    filename.setEditable(<font color=#0000ff>false</font>);
    p = <font color=#0000ff>new</font> JPanel();
    p.setLayout(<font color=#0000ff>new</font> GridLayout(2, 1));
    p.add(filename);
    p.add(dir);
    cp.add(p, BorderLayout.NORTH);
  }
  <font color=#0000ff>class</font> OpenL <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      JFileChooser c = <font color=#0000ff>new</font> JFileChooser();
      c.setFileFilter(<font color=#0000ff>new</font> TextFileFilter());
      <font color=#009900>// Demonstrate "Open" dialog:</font>
      <font color=#0000ff>int</font> rVal = c.showOpenDialog(FileAccessApplet.<font color=#0000ff>this</font>);
      <font color=#0000ff>if</font>(rVal == JFileChooser.APPROVE_OPTION) {
        file = c.getSelectedFile();
        filename.setText(file.getName());
        dir.setText(c.getCurrentDirectory().toString());
        <font color=#0000ff>try</font> {
          System.out.println(<font color=#004488>"Url is "</font> + file.toURL());
          ep.setPage(file.toURL());
          <font color=#009900>// ep.repaint();</font>
        } <font color=#0000ff>catch</font> (IOException ioe) {
          <font color=#0000ff>throw</font> <font color=#0000ff>new</font> RuntimeException(ioe);
        }
      }
      <font color=#0000ff>if</font>(rVal == JFileChooser.CANCEL_OPTION) {
        filename.setText(<font color=#004488>"You pressed cancel"</font>);
        dir.setText(<font color=#004488>""</font>);
      } <font color=#0000ff>else</font> {
        save.setEnabled(<font color=#0000ff>true</font>);
      }
    }
  }
  <font color=#0000ff>class</font> SaveL <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      JFileChooser c = <font color=#0000ff>new</font> JFileChooser(file);
      c.setSelectedFile(file);
      <font color=#009900>// Demonstrate "Save" dialog:</font>
      <font color=#0000ff>int</font> rVal = c.showSaveDialog(FileAccessApplet.<font color=#0000ff>this</font>);
      <font color=#0000ff>if</font>(rVal == JFileChooser.APPROVE_OPTION) {
        filename.setText(c.getSelectedFile().getName());
        dir.setText(c.getCurrentDirectory().toString());
        <font color=#0000ff>try</font> {
          FileWriter fw = <font color=#0000ff>new</font> FileWriter(file);
          ep.write(fw);
        } <font color=#0000ff>catch</font> (IOException ioe) {
          <font color=#0000ff>throw</font> <font color=#0000ff>new</font> RuntimeException(ioe);
        }
      }
      <font color=#0000ff>if</font>(rVal == JFileChooser.CANCEL_OPTION) {
        filename.setText(<font color=#004488>"You pressed cancel"</font>);
        dir.setText(<font color=#004488>""</font>);
      }
    }
  }
  <font color=#0000ff>public</font> <font color=#0000ff>class</font> TextFileFilter <font color=#0000ff>extends</font>
    javax.swing.filechooser.FileFilter {
    <font color=#0000ff>public</font> <font color=#0000ff>boolean</font> accept(File f) {
      <font color=#0000ff>return</font> f.getName().endsWith(<font color=#004488>".txt"</font>)
        || f.isDirectory();
    }
    <font color=#0000ff>public</font> String getDescription() {
      <font color=#0000ff>return</font> <font color=#004488>"Text Files (*.txt)"</font>;
    }
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> FileAccessApplet(), 500, 500);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p>It appears to be an ordinary applet. However, as it stands, it would not be allowed to open and close files on a client&#146;s system. To make this run as a signed applet, you need to put it into a JAR file (see the section on the <b>jar</b> utility, earlier in this chapter) and sign the JAR file. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0554" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>Once you have a JAR file, you will need a certificate or a key to sign it with. If you were a large corporation, you would apply to a signing authority like Verisign or Thawte, and they would issue you a certificate. This is used to sign code and thus identify to a user that you are indeed the provider of the code they are downloading, and that the code that has been deployed hasn&#146;t been modified since you signed it. Essentially, the digital signature is a load of bits, and the signing authority vouches for you when someone downloads that signature. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0555" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p><a name="Index1882"></a><a name="Index1883"></a>A certificate from a signing authority costs money and requires regular renewal. In our case we can just make a little self-signed one. This needs to be stored in a file somewhere (it is usually called the <i>keychain</i>). If you type:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>keytool &#150;list</PRE></FONT></BLOCKQUOTE><p><br></p>
<p>then it will try to access the default file. If there is no file, then you need to create one, or specify an existing one. You might try to search for a file called &#147;cacerts,&#148; and then try <br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>keytool -list -file &lt;path/filename&gt;</PRE></FONT></BLOCKQUOTE><p><br></p>
<p>The default location is usually <br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>{java.home}/lib/security/cacerts</PRE></FONT></BLOCKQUOTE><p><br></p>
<p>where the <b>java.home</b> property points to the JRE home.<br></p>
<p>You can also easily make a self-signed certificate for testing purposes using the <b>keytool</b>. If you have your Java &#147;bin&#148; directory in your executable path, you can type:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>keytool &#150;genkey &#150;alias &lt;keyname&gt; -keystore &lt;url&gt;</PRE></FONT></BLOCKQUOTE><p><br></p>
<p>where <b>keyname</b> is the alias name that you want to give the key, say &#147;mykeyname,&#148; and <b>url</b> is the location of the file that stores your keys, usually the <b>cacerts </b>file as described above. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0556" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>You will now be prompted for the password. Unless you have changed the default, this will be &#147;changeit&#148; (a hint to do just that). Next you will be asked for your name, the organizational unit, the organization, city, state, and country. This information is stored in the certificate. Lastly, you will be asked for a password for that key. If you are really security conscious, you can give it a separate password, but the default password is the same as the keystore itself, and is usually adequate. The above information can be specified on the command line from within a build tool such as Ant. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0557" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>If you invoke the <b>keytool</b> utility with no parameters at the command prompt, it will give you a list of its numerous options. You might like to use the <b>&#150;valid</b> option, for example, which enables you to specify how many days the key will be valid for. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0558" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>To confirm that your key is now in the <b>cacerts</b> file, type:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE> keytool &#150;list &#150;keystore &lt;url&gt;</PRE></FONT></BLOCKQUOTE><p><br></p>
<p>and enter the password as before. Your key may be hidden among the other keys already in your certificate files. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0559" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>Your new certificate is self-signed and thus not actually trusted by a signing authority. If you use this certificate to sign a JAR file, the end user will get a warning, and a strong recommendation <i>not</i> to use your software. You and your users will have to tolerate this until you are prepared to pay for a trusted certificate for commercial purposes. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0560" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>To sign your JAR file, use the standard Java <b>jarsigner</b> tool as follows:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>jarsigner &#150;keystore &lt;url&gt; &lt;jarfile&gt; &lt;keyname&gt;</PRE></FONT></BLOCKQUOTE><p><br></p>
<p>where <b>url</b> is the location of your cacerts file, <b>jarfile</b> is the name of your JAR file, and <b>keyname</b> is the alias that you gave to your key. You will again be prompted for the password. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0561" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>You now have a JAR file that can be identified as being signed with your key, and that can guarantee it has not been tampered with (i.e., no files have been changed, added, or removed) since you signed it. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0562" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>All you have to do now is make sure that the applet tag in your HTML file has an &#147;archive&#148; element, which specifies the name of your JAR file. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0563" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>The applet tag is somewhat more complicated for the plugin, but if you create a simple tag like:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>&lt;APPLET 
  CODE=<font color=#0000ff>package</font>.AppletSubclass.<font color=#0000ff>class</font> 
  ARCHIVE = myjar.jar 
  WIDTH=300 
  HEIGHT=200&gt;
&lt;/APPLET&gt;</PRE></FONT></BLOCKQUOTE><p><br></p>
<p>and run the <a name="Index1884"></a><b>HTMLConverter</b> tool on it (this is packaged with the freely downloadable JDK), it will create the correct applet tag for you. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0564" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>Now, when your applet is downloaded by a client, they will be informed that a signed applet is being loaded, and given the option of trusting the signer. As previously mentioned, your test certificate doesn&#146;t have a very high degree of trust, and the user will get a warning to this effect. If they opt to trust your applet, it will have full access to their system and behave as if it were an ordinary application. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0565" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>The source code for this book, downloadable from <b>www.BruceEckel.com,</b> contains complete working configuration files and an Ant build script to properly compile and build this project. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0566" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h2>
<a name="_Toc24775913"></a><a name="Heading21181"></a>JNLP and Java Web
Start<br></h2>
<p><a name="Index1885"></a>Signed applets are powerful and can effectively take the place of an application, but they must run inside a Web browser. This requires the extra overhead of the browser running on the client machine, and also means that the user interface of the applet is limited and often visually confusing. The Web browser has its own set of menus and toolbars, which will appear above the applet. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0567" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>The <i>Java Network Launch Protocol</i> (JNLP) solves the problem without sacrificing the advantages of applets. With a JNLP application, you can download and install a standalone Java application onto the client&#146;s machine. This can be run from the command prompt, a desktop icon, or the application manager that is installed with your JNLP implementation. The application can even be run from the Web site from which it was originally downloaded. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0568" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p><a name="Index1886"></a>A JNLP application can dynamically download resources from the Internet at run time, and the version can be automatically checked (if the user is connected to the Internet) . This means that it has all of the advantages of an applet together with the advantages of standalone applications. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0569" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>Like applets, JNLP applications need to be treated with some caution by the client&#146;s system. A JNLP application is Web-based and easy to download, so it might be malevolent. Because of this, JNLP applications are subject to the same sandbox security restrictions as applets. Like applets, they can be deployed in signed JAR files, giving the user the option to trust the signer. Unlike applets, if they are deployed in an unsigned JAR file, they can still request access to certain resources of the client&#146;s system by means of services in the JNLP API (the user must approve the requests during program execution). <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0570" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>Because JNLP describes a protocol, not an implementation, you will need an implementation in order to use it. Java Web Start, or JAWS, is Sun&#146;s freely-available official reference implementation. All you need to do is download and install it, and if you are using it for development, make sure that the JAR files are in your classpath. If you are deploying your JNLP application from a Web server, you have to ensure that your server recognizes the MIME&#160;type application/x-java-jnlp-file. If you are using a recent version of the Tomcat server (<a name="Index1887"></a><a name="Index1888"></a><i>http://jakarta.apache.org/tomcat</i>) this will already be configured. Consult the user guide for your particular server. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0571" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>Creating a JNLP application is not difficult. You create a standard application that is archived in a JAR file, and then you provide a launch file, which is a simple XML file that gives the client all the information it needs to download and install your application. If you choose not to sign your JAR file, then you must make use of the services supplied by the JNLP API for each type of resource you want access to on the users machine. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0572" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>Here is a variation of the example using the <b>JFileChooser</b> dialog, but this time using the JNLP services to open it, so that the class can be deployed as a JNLP application in an unsigned JAR file. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0573" title="Send BackTalk Comment">Feedback</a></font><br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c14:jnlp:JnlpFileChooser.java</font>
<font color=#009900>// Opening files on a local machine with JNLP.</font>
<font color=#009900>// {Depends: javaws.jar}</font>
<font color=#0000ff>package</font> c14.jnlp;
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> java.io.*;
<font color=#0000ff>import</font> javax.jnlp.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> JnlpFileChooser <font color=#0000ff>extends</font> JFrame {
  <font color=#0000ff>private</font> JTextField filename = <font color=#0000ff>new</font> JTextField();
  <font color=#0000ff>private</font> JButton
    open = <font color=#0000ff>new</font> JButton(<font color=#004488>"Open"</font>),
    save = <font color=#0000ff>new</font> JButton(<font color=#004488>"Save"</font>);
  <font color=#0000ff>private</font> JEditorPane ep = <font color=#0000ff>new</font> JEditorPane();
  <font color=#0000ff>private</font> JScrollPane jsp = <font color=#0000ff>new</font> JScrollPane();
  <font color=#0000ff>private</font> FileContents fileContents;
  <font color=#0000ff>public</font> JnlpFileChooser() {
    JPanel p = <font color=#0000ff>new</font> JPanel();
    open.addActionListener(<font color=#0000ff>new</font> OpenL());
    p.add(open);
    save.addActionListener(<font color=#0000ff>new</font> SaveL());
    p.add(save);
    Container cp = getContentPane();
    jsp.getViewport().add(ep);
    cp.add(jsp, BorderLayout.CENTER);
    cp.add(p, BorderLayout.SOUTH);
    filename.setEditable(<font color=#0000ff>false</font>);
    p = <font color=#0000ff>new</font> JPanel();
    p.setLayout(<font color=#0000ff>new</font> GridLayout(2,1));
    p.add(filename);
    cp.add(p, BorderLayout.NORTH);
    ep.setContentType(<font color=#004488>"text"</font>);
    save.setEnabled(<font color=#0000ff>false</font>);
  }
  <font color=#0000ff>class</font> OpenL <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      FileOpenService fs = <font color=#0000ff>null</font>;
      <font color=#0000ff>try</font> {
        fs = (FileOpenService)ServiceManager.lookup(
          <font color=#004488>"javax.jnlp.FileOpenService"</font>);
      } <font color=#0000ff>catch</font>(UnavailableServiceException use) {
        <font color=#0000ff>throw</font> <font color=#0000ff>new</font> RuntimeException(use);
      }
      <font color=#0000ff>if</font>(fs != <font color=#0000ff>null</font>) {
        <font color=#0000ff>try</font> {
          fileContents = fs.openFileDialog(<font color=#004488>"."</font>,
            <font color=#0000ff>new</font> String[]{<font color=#004488>"txt"</font>, <font color=#004488>"*"</font>});
          <font color=#0000ff>if</font>(fileContents == <font color=#0000ff>null</font>)
            <font color=#0000ff>return</font>;
          filename.setText(fileContents.getName());
          ep.read(fileContents.getInputStream(), <font color=#0000ff>null</font>);
        } <font color=#0000ff>catch</font> (Exception exc) {
          <font color=#0000ff>throw</font> <font color=#0000ff>new</font> RuntimeException (exc);
        }
        save.setEnabled(<font color=#0000ff>true</font>);
      }
    }
  }
  <font color=#0000ff>class</font> SaveL <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      FileSaveService fs = <font color=#0000ff>null</font>;
      <font color=#0000ff>try</font> {
        fs = (FileSaveService)ServiceManager.lookup(
          <font color=#004488>"javax.jnlp.FileSaveService"</font>);
      } <font color=#0000ff>catch</font>(UnavailableServiceException use) {
        <font color=#0000ff>throw</font> <font color=#0000ff>new</font> RuntimeException(use);
      }
      <font color=#0000ff>if</font>(fs != <font color=#0000ff>null</font>) {
        <font color=#0000ff>try</font> {
          fileContents = fs.saveFileDialog(<font color=#004488>"."</font>,
            <font color=#0000ff>new</font> String[]{<font color=#004488>"txt"</font>},
            <font color=#0000ff>new</font> ByteArrayInputStream(
              ep.getText().getBytes()),
            fileContents.getName());
          <font color=#0000ff>if</font>(fileContents == <font color=#0000ff>null</font>)
            <font color=#0000ff>return</font>;
          filename.setText(fileContents.getName());
        } <font color=#0000ff>catch</font> (Exception exc) {
          <font color=#0000ff>throw</font> <font color=#0000ff>new</font> RuntimeException (exc);
        }
      }
    }
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    JnlpFileChooser fc = <font color=#0000ff>new</font> JnlpFileChooser();
    fc.setSize(400, 300);
    fc.setVisible(<font color=#0000ff>true</font>);
  }
} <font color=#009900>///:~ </font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p>Note that the <b>FileOpenService</b> and the <b>FileCloseService</b> classes are imported from the <b>javax.jnlp</b> package and that nowhere in the code is the <b>JFileChooser</b> dialog box referred to directly. The two services used here must be requested using the <b>ServiceManager.lookup(&#160;) </b>method, and the resources on the client system can only be accessed via the objects returned from this method. In this case, the files on the client&#146;s file system are being written to and read from using the <b>FileContent</b> interface, provided by the JNLP. Any attempt to access the resources directly by using, say, a <b>File</b> or a <b>FileReader </b>object would cause a <b>SecurityException</b> to be thrown in the same way that it would if you tried to use them from an unsigned applet. If you want to use these classes and not be restricted to the JNLP service interfaces, you must sign the JAR file (see the previous section on signing JAR files). <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0574" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>Now that we have a runnable class that makes use of the JNLP services, all that is needed is for the class to be put into a JAR file and a launch file to be written. Here is an appropriate launch file for the preceding example. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0575" title="Send BackTalk Comment">Feedback</a></font><br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>&lt;?xml version=<font color=#004488>"1.0"</font> encoding=<font color=#004488>"UTF-8"</font>?&gt;
&lt;jnlp spec = &#147;1.0+&#148; 
  codebase=<font color=#004488>"file:</font><font color=#004488>/</font><font color=#004488>/C:\TIJ3code\c14\jnlp"</font> 
  href=<font color=#004488>"filechooser.jnlp"</font>&gt; 
    &lt;information&gt; 
      &lt;title&gt;FileChooser demo application&lt;/title&gt; 
      &lt;vendor&gt;Mindview Inc.&lt;/vendor&gt; 
      &lt;description&gt;
        Jnlp File choose Application
      &lt;/description&gt; 
      &lt;description kind=<font color=#004488>"short"</font>&gt;
        A demonstration of opening, reading and 
        writing a text file
      &lt;/description&gt; 
      &lt;icon href=<font color=#004488>"images</font><font color=#004488>/tijicon.gif"</font>/&gt;
      &lt;offline-allowed/&gt; 
    &lt;/information&gt; 
    &lt;resources&gt; 
      &lt;j2se version=<font color=#004488>"1.3+"</font>/&gt; 
      &lt;jar href=<font color=#004488>"jnlpfilechooser.jar"</font> download=<font color=#004488>"eager"</font>/&gt; 
    &lt;/resources&gt; 
    &lt;application-desc 
      main-<font color=#0000ff>class</font>=<font color=#004488>"c14.jnlp.JnlpFileChooser"</font>/&gt; 
&lt;/jnlp&gt;</PRE></FONT></BLOCKQUOTE><p><br></p>
<p>This launch file needs to be saved as a <b>.jnlp</b> file, in this case, <b>filechooser.jnlp, </b>in the same directory as the JAR file. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0576" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>As you can see, it is an XML file with one <b>&lt;jnlp&gt;</b> tag. This has a few subelements, which are mostly self-explanatory. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0577" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>The <b>spec </b>attribute of the <b>jnlp</b> element<b> </b>tells the client system what version of the JNLP the application can be run with. The<b> codebase</b> attribute points to the directory where this launch file and the resources can be found. Typically, it would be an HTTP URL pointing to a Web server, but in this case it points to a directory on the local machine, which is a good means of testing the application. The <b>href</b> attribute must specify the name of this file. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0578" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>The <b>information</b> tag has various subelements that provide information about the application. These are used by the Java Web Start administrative console or equivalent, which installs the JNLP application and allows the user to run it from the command line, make short cuts and so on. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0579" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>The <b>resources</b> tag serves a similar purpose as the applet tag in an HTML file. The <b>j2se</b> subelement specifies the version of the j2se that is needed to run the application, and the <b>jar</b> subelement specifies the JAR file in which the class is archived. The <b>jar </b>element has an attribute <b>download</b>, which can have the values &#147;eager&#148; or &#147;lazy&#148; that tell the JNLP implementation whether or not the entire archive needs to be downloaded before the application can be run. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0580" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>The <b>application-desc </b>attribute tells the JNLP implementation which class is the executable class, or entry point, to the JAR file. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0581" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>Another useful subelement of the <b>jnlp</b> tag is the <b>security</b> tag, not shown here. Here&#146;s what a security tag looks like:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>&lt;security&gt;
   &lt;all-permissions/&gt;
&lt;security/&gt;</PRE></FONT></BLOCKQUOTE><p><br></p>
<p>You use the security tag when your application is deployed in a signed JAR file. It is not needed in the preceding example because the local resources are all accessed via the JNLP services. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0582" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>There are a few other tags available, the details of which can be found in the specification <i>http://java.sun.com/products/javawebstart/download-spec.html</i>. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0583" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>Now that the <b>.jnlp </b>is written, you will need to add a hypertext link to it in an HTML page. This will be its download page. You might have a complex layout with a detailed introduction to your application, but as long as you have something like:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>&lt;a href=<font color=#004488>"filechooser.jnlp"</font>&gt;click here&lt;/a&gt;</PRE></FONT></BLOCKQUOTE><p><br></p>
<p>in your HTML file, then you will be able to initiate the installation of the JNLP application by clicking on the link. Once you have downloaded the application once, you will be able to configure it by using the administrative console. If you are using Java Web Start on Windows, then you will be prompted to make a short cut to your application the second time you use it. This behavior is configurable. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0584" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>The source code for this book, downloadable from <b>www.BruceEckel.com,</b> contains complete working configuration files and an Ant build script to properly compile and build this project. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0585" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>Only two of the JNLP services are covered here, but there are seven services in the current release. Each is designed for a specific task such as printing, or cutting, and pasting to the clipboard. An in-depth discussion of these services is beyond the scope of this chapter. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0586" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h2>
<a name="_Toc24775914"></a><a name="Heading21327"></a>Programming
techniques</h2>
<p>Because GUI programming in Java has been an evolving technology with some very significant changes between Java 1.0/1.1 and the Swing library in Java 2, there have been some old programming idioms that have seeped through to examples that you might see given for Swing. In addition, Swing allows you to program in more and better ways than were allowed by the old models. In this section, some of these issues will be demonstrated by introducing and examining some programming idioms. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2104" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h3>
<a name="_Toc24775915"></a><a name="Heading21329"></a>Binding events
dynamically</h3>
<p>One of the benefits of the Swing event model is flexibility. You can add and remove event behavior with single method calls. The following example demonstrates this:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c14:DynamicEvents.java</font>
<font color=#009900>// You can change event behavior dynamically.</font>
<font color=#009900>// Also shows multiple actions for an event.</font>
<font color=#009900>// &lt;applet code=DynamicEvents</font>
<font color=#009900>// width=250 height=400&gt;&lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> java.util.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> DynamicEvents <font color=#0000ff>extends</font> JApplet {
  <font color=#0000ff>private</font> java.util.List list = <font color=#0000ff>new</font> ArrayList();
  <font color=#0000ff>private</font> <font color=#0000ff>int</font> i = 0;
  <font color=#0000ff>private</font> JButton
    b1 = <font color=#0000ff>new</font> JButton(<font color=#004488>"Button1"</font>),
    b2 = <font color=#0000ff>new</font> JButton(<font color=#004488>"Button2"</font>);
  <font color=#0000ff>private</font> JTextArea txt = <font color=#0000ff>new</font> JTextArea();
  <font color=#0000ff>class</font> B <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      txt.append(<font color=#004488>"A button was pressed\n"</font>);
    }
  }
  <font color=#0000ff>class</font> CountListener <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>private</font> <font color=#0000ff>int</font> index;
    <font color=#0000ff>public</font> CountListener(<font color=#0000ff>int</font> i) { index = i; }
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      txt.append(<font color=#004488>"Counted Listener "</font> + index + <font color=#004488>"\n"</font>);
    }
  }
  <font color=#0000ff>class</font> B1 <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      txt.append(<font color=#004488>"Button 1 pressed\n"</font>);
      ActionListener a = <font color=#0000ff>new</font> CountListener(i++);
      list.add(a);
      b2.addActionListener(a);
    }
  }
  <font color=#0000ff>class</font> B2 <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      txt.append(<font color=#004488>"Button2 pressed\n"</font>);
      <font color=#0000ff>int</font> end = list.size() - 1;
      <font color=#0000ff>if</font>(end &gt;= 0) {
        b2.removeActionListener(
          (ActionListener)list.get(end));
        list.remove(end);
      }
    }
  }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    Container cp = getContentPane();
    b1.addActionListener(<font color=#0000ff>new</font> B());
    b1.addActionListener(<font color=#0000ff>new</font> B1());
    b2.addActionListener(<font color=#0000ff>new</font> B());
    b2.addActionListener(<font color=#0000ff>new</font> B2());
    JPanel p = <font color=#0000ff>new</font> JPanel();
    p.add(b1);
    p.add(b2);
    cp.add(BorderLayout.NORTH, p);
    cp.add(<font color=#0000ff>new</font> JScrollPane(txt));
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> DynamicEvents(), 250, 400);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p>The new twists in this example are:  <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2105" title="Send BackTalk Comment">Feedback</a></font><br></p>
<ol>
<li><a name="Index1891"></a><a name="Index1892"></a><a name="Index1893"></a><a name="Index1894"></a><a name="Index1895"></a>There
is more than one listener attached to each <b>Button</b>. Usually, components
handle events as <i>multicast</i>, meaning that you can register many listeners
for a single event. In the special components in which an event is handled as
<i>unicast</i>, you&#146;ll get a <b>TooManyListenersException</b>. <font
size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2106"
title="Send BackTalk Comment">Feedback</a></font></li>
<li>During the execution of the program, listeners are dynamically added and
removed from the <b>Button b2</b>. Adding is accomplished in the way
you&#146;ve seen before, but each component also has a
<b>removeXXXListener(&#160;)</b> method to remove each type of listener. <font
size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2107"
title="Send BackTalk
Comment">Feedback</a></font></li></ol><p>This kind of flexibility provides much greater power in your programming. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2108" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>You should notice that event listeners are not guaranteed to be called in the order they are added (although most implementations do in fact work that way). <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2109" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h3>
<a name="Index1896"></a><a name="_Toc24775916"></a><a name="Heading21402"></a>Separating
business logic <br>from UI logic<br></h3>
<p><a name="Index1897"></a>In general, you&#146;ll want to design your classes so that each one does &#147;only one thing.&#148; This is particularly important when user-interface code is concerned, since it&#146;s easy to tie up &#147;what you&#146;re doing&#148; with &#147;how you&#146;re displaying it.&#148; This kind of coupling prevents code reuse. It&#146;s much more desirable to separate your &#147;business logic&#148; from the GUI. This way, not only can you reuse the business logic more easily, but it&#146;s also easier to reuse the GUI. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0553" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>Another issue is <a name="Index1898"></a><i>multitiered</i> systems, where the &#147;business objects&#148; reside on a completely separate machine. This central location of the business rules allows changes to be instantly effective for all new transactions, and is thus a compelling way to set up a system. However, these business objects can be used in many different applications and so should not be tied to any particular mode of display. They should just perform the business operations and nothing more.<a name="Index1899"></a><a name="Index1900"></a><sup><a name="fnB84" href="#fn84">[84]</a></sup> <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2110" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>The following example shows how easy it is to separate the business logic from the GUI code:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c14:Separation.java</font>
<font color=#009900>// Separating GUI logic and business objects.</font>
<font color=#009900>// &lt;applet code=Separation width=250 height=150&gt;&lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> javax.swing.event.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> java.applet.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>class</font> BusinessLogic {
  <font color=#0000ff>private</font> <font color=#0000ff>int</font> modifier;
  <font color=#0000ff>public</font> BusinessLogic(<font color=#0000ff>int</font> mod) { modifier = mod; }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> setModifier(<font color=#0000ff>int</font> mod) { modifier = mod; }
  <font color=#0000ff>public</font> <font color=#0000ff>int</font> getModifier() { <font color=#0000ff>return</font> modifier; }
  <font color=#009900>// Some business operations:</font>
  <font color=#0000ff>public</font> <font color=#0000ff>int</font> calculation1(<font color=#0000ff>int</font> arg){ <font color=#0000ff>return</font> arg * modifier;}
  <font color=#0000ff>public</font> <font color=#0000ff>int</font> calculation2(<font color=#0000ff>int</font> arg){ <font color=#0000ff>return</font> arg + modifier;}
}

<font color=#0000ff>public</font> <font color=#0000ff>class</font> Separation <font color=#0000ff>extends</font> JApplet {
  <font color=#0000ff>private</font> JTextField
    t = <font color=#0000ff>new</font> JTextField(15),
    mod = <font color=#0000ff>new</font> JTextField(15);
  <font color=#0000ff>private</font> JButton
    calc1 = <font color=#0000ff>new</font> JButton(<font color=#004488>"Calculation 1"</font>),
    calc2 = <font color=#0000ff>new</font> JButton(<font color=#004488>"Calculation 2"</font>);
  <font color=#0000ff>private</font> BusinessLogic bl = <font color=#0000ff>new</font> BusinessLogic(2);
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>int</font> getValue(JTextField tf) {
    <font color=#0000ff>try</font> {
      <font color=#0000ff>return</font> Integer.parseInt(tf.getText());
    } <font color=#0000ff>catch</font>(NumberFormatException e) {
      <font color=#0000ff>return</font> 0;
    }
  }
  <font color=#0000ff>class</font> Calc1L <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      t.setText(Integer.toString(
        bl.calculation1(getValue(t))));
    }
  }
  <font color=#0000ff>class</font> Calc2L <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      t.setText(Integer.toString(
        bl.calculation2(getValue(t))));
    }
  }
  <font color=#009900>// If you want something to happen whenever</font>
  <font color=#009900>// a JTextField changes, add this listener:</font>
  <font color=#0000ff>class</font> ModL <font color=#0000ff>implements</font> DocumentListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> changedUpdate(DocumentEvent e) {}
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> insertUpdate(DocumentEvent e) {
      bl.setModifier(getValue(mod));
    }
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> removeUpdate(DocumentEvent e) {
      bl.setModifier(getValue(mod));
    }
  }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    Container cp = getContentPane();
    cp.setLayout(<font color=#0000ff>new</font> FlowLayout());
    cp.add(t);
    calc1.addActionListener(<font color=#0000ff>new</font> Calc1L());
    calc2.addActionListener(<font color=#0000ff>new</font> Calc2L());
    JPanel p1 = <font color=#0000ff>new</font> JPanel();
    p1.add(calc1);
    p1.add(calc2);
    cp.add(p1);
    mod.getDocument().addDocumentListener(<font color=#0000ff>new</font> ModL());
    JPanel p2 = <font color=#0000ff>new</font> JPanel();
    p2.add(<font color=#0000ff>new</font> JLabel(<font color=#004488>"Modifier:"</font>));
    p2.add(mod);
    cp.add(p2);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> Separation(), 250, 100);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p>You can see that <b>BusinessLogic</b> is a straightforward class that performs its operations without even a hint that it might be used in a GUI environment. It just does its job. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2111" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p><b>Separation</b> keeps track of all the UI details, and it talks to <b>BusinessLogic</b> only through its <b>public</b> interface. All the operations are centered around getting information back and forth through the UI and the <b>BusinessLogic</b> object. So <b>Separation</b>, in turn, just does its job. Since <b>Separation</b> knows only that it&#146;s talking to a <b>BusinessLogic</b> object (that is, it isn&#146;t highly coupled), it could be massaged into talking to other types of objects without much trouble. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2112" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>Thinking in terms of separating UI from business logic also makes life easier when you&#146;re adapting legacy code to work with Java. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2113" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h3>
<a name="_Toc24775917"></a><a name="Heading21489"></a>A canonical form</h3>
<p>Inner classes, the Swing event model, and the fact that the old AWT event model is still supported, along with new library features that rely on old-style programming, has added a new element of confusion to the code design process. Now there are even more different ways for people to write unpleasant code. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2114" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>Except in extenuating circumstances, you can always use the simplest and clearest approach: Listener classes (typically written as inner classes) to solve your event-handling needs. This is the form used in most of the examples in this chapter. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2115" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p><a name="Index1901"></a><a name="Index1902"></a><a name="Index1903"></a>By following this model you should be able to reduce the statements in your programs that say &#147;I wonder what caused this event.&#148; Each piece of code is concerned with <i>doing</i>, not type checking. This is the best way to write your code; not only is it easier to conceptualize, but it&#146;s much easier to read and maintain. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2116" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h2>
<a name="_Toc375545486"></a><a name="_Toc24775918"></a><a name="Heading21493"></a>Concurrency
&amp; Swing<br></h2>
<p><a name="Index1904"></a><a name="Index1905"></a>It is easy to forget that you are using threads when you program with Swing. The fact that you don&#146;t have to explicitly create a <b>Thread</b> object means that threading issues can catch you by surprise. Typically, when you write a Swing program, or any GUI application with a windowed display, the majority of the application is event driven, and nothing really happens until the user generates and event by clicking on a GUI component with the mouse, or striking a key. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0587" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>Just remember that there is a Swing event dispatching thread, which is always there, handling all the Swing events in turn. This needs to be considered if you want to guarantee that your application won&#146;t suffer from deadlocking or race conditions. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0588" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>This section looks at a couple of issues worth noting when working with threads under Swing. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0589" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h3>
<a name="_Toc24775919"></a><a name="Heading21497"></a><b>Runnable</b>
revisited</h3>
<p>In Chapter 13, I suggested that you think carefully before making a class as an implementation of <a name="Index1906"></a><a name="Index1907"></a><a name="Index1908"></a><b>Runnable</b>. Of course, if you must inherit from a class <i>and</i> you want to add threading behavior to the class, <b>Runnable</b> is the correct solution. The following example exploits this by making a <b>Runnable</b> <b>JPanel</b> class that paints different colors on itself. This application is set up to take values from the command line to determine how big the grid of colors is and how long to <b>sleep(&#160;)</b> between color changes. By playing with these values, you&#146;ll discover some interesting and possibly inexplicable features of threads: <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0590" title="Send BackTalk Comment">Feedback</a></font><br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c14:ColorBoxes.java</font>
<font color=#009900>// Using the Runnable interface.</font>
<font color=#009900>// &lt;applet code=ColorBoxes width=500 height=400&gt;</font>
<font color=#009900>// &lt;param name=grid value="12"&gt;</font>
<font color=#009900>// &lt;param name=pause value="50"&gt;&lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> java.util.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>class</font> CBox <font color=#0000ff>extends</font> JPanel <font color=#0000ff>implements</font> Runnable {
  <font color=#0000ff>private</font> Thread t;
  <font color=#0000ff>private</font> <font color=#0000ff>int</font> pause;
  <font color=#0000ff>private</font> <font color=#0000ff>static</font> <font color=#0000ff>final</font> Color[] colors = {
    Color.BLACK, Color.BLUE, Color.CYAN,
    Color.DARK_GRAY, Color.GRAY, Color.GREEN,
    Color.LIGHT_GRAY, Color.MAGENTA,
    Color.ORANGE, Color.PINK, Color.RED,
    Color.WHITE, Color.YELLOW
  };
  <font color=#0000ff>private</font> <font color=#0000ff>static</font> Random rand = <font color=#0000ff>new</font> Random();
  <font color=#0000ff>private</font> <font color=#0000ff>static</font> <font color=#0000ff>final</font> Color newColor() {
    <font color=#0000ff>return</font> colors[rand.nextInt(colors.length)];
  }
  <font color=#0000ff>private</font> Color cColor = newColor();
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> paintComponent(Graphics  g) {
    <font color=#0000ff>super</font>.paintComponent(g);
    g.setColor(cColor);
    Dimension s = getSize();
    g.fillRect(0, 0, s.width, s.height);
  }
  <font color=#0000ff>public</font> CBox(<font color=#0000ff>int</font> pause) {
    <font color=#0000ff>this</font>.pause = pause;
    t = <font color=#0000ff>new</font> Thread(<font color=#0000ff>this</font>);
    t.start();
  }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> run() {
    <font color=#0000ff>while</font>(<font color=#0000ff>true</font>) {
      cColor = newColor();
      repaint();
      <font color=#0000ff>try</font> {
        t.sleep(pause);
      } <font color=#0000ff>catch</font>(InterruptedException e) {
        <font color=#0000ff>throw</font> <font color=#0000ff>new</font> RuntimeException(e);
      }
    }
  }
}

<font color=#0000ff>public</font> <font color=#0000ff>class</font> ColorBoxes <font color=#0000ff>extends</font> JApplet {
  <font color=#0000ff>private</font> <font color=#0000ff>boolean</font> isApplet = <font color=#0000ff>true</font>;
  <font color=#0000ff>private</font> <font color=#0000ff>int</font> grid = 12;
  <font color=#0000ff>private</font> <font color=#0000ff>int</font> pause = 50;
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    <font color=#009900>// Get parameters from Web page:</font>
    <font color=#0000ff>if</font>(isApplet) {
      String gsize = getParameter(<font color=#004488>"grid"</font>);
      <font color=#0000ff>if</font>(gsize != <font color=#0000ff>null</font>)
        grid = Integer.parseInt(gsize);
      String pse = getParameter(<font color=#004488>"pause"</font>);
      <font color=#0000ff>if</font>(pse != <font color=#0000ff>null</font>)
        pause = Integer.parseInt(pse);
    }
    Container cp = getContentPane();
    cp.setLayout(<font color=#0000ff>new</font> GridLayout(grid, grid));
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; grid * grid; i++)
      cp.add(<font color=#0000ff>new</font> CBox(pause));
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    ColorBoxes applet = <font color=#0000ff>new</font> ColorBoxes();
    applet.isApplet = <font color=#0000ff>false</font>;
    <font color=#0000ff>if</font>(args.length &gt; 0)
      applet.grid = Integer.parseInt(args[0]);
    <font color=#0000ff>if</font>(args.length &gt; 1)
      applet.pause = Integer.parseInt(args[1]);
    Console.run(applet, 500, 400);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p><b>ColorBoxes</b> is the usual applet/application with an <b>init(&#160;) </b>that sets up the GUI. This configures a <b>GridLayout</b><a name="Index1909"></a> so that it has <b>grid</b> cells in each dimension. Then it adds the appropriate number of <b>CBox</b> objects to fill the grid, passing the <b>pause</b> value to each one. In <b>main(&#160;)</b> you can see how <b>pause</b> and <b>grid</b> have default values that can be changed if you pass in command-line arguments, or by using applet parameters. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap14_2333" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p><b>CBox </b>is where all the work takes place. This is inherited from <b>JPanel</b><a name="Index1910"></a> and it implements the <b>Runnable</b> interface so that each <b>JPanel</b> can also be a <b>Thread</b>. Remember that when you implement <b>Runnable</b>, you don&#146;t make a <b>Thread</b> object, just a class that has a <b>run(&#160;)</b> method. Thus, you must explicitly create a <b>Thread</b> object and hand the <b>Runnable</b> object to the constructor, then call <b>start(&#160;)</b> (this happens in the constructor). In <b>CBox</b> this thread is called <b>t</b>. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap14_2334" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>Notice the array <b>colors</b>, which is an enumeration of all the colors in class <b>Color</b>. This is used in <b>newColor(&#160;)</b> to produce a randomly selected color. The current cell color is <b>cColor</b>. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap14_2335" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p><b>paintComponent(&#160;)</b> is quite simple; it just sets the color to <b>cColor</b> and fills the entire <b>JPanel</b> with that color. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap14_2336" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>In <b>run(&#160;)</b>, you see the infinite loop that sets the <b>cColor</b> to a new random color and then calls <b>repaint(&#160;)</b> to show it. Then the thread goes to <b>sleep(&#160;)</b> for the amount of time specified on the command line. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap14_2337" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>Precisely because this design is flexible and threading is tied to each <b>JPanel</b> element, you can experiment by making as many threads as you want. (In reality, there is a restriction imposed by the number of threads your JVM can comfortably handle.) <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap14_2338" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>This program also makes an interesting benchmark, since it can and has shown dramatic performance and behavioral differences between one JVM threading implementation and another. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap14_2339" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h3>
<a name="_Toc24775920"></a><a name="Heading21586"></a>Managing concurrency</h3>
<p>When you make changes to any Swing component properties from the <b>main</b> method of your class or in a separate thread, be aware that the event dispatching thread might be vying for the same resources.<sup> <a name="fnB85" href="#fn85">[85]</a></sup> <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0445" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>The following program shows how you can get an unexpected result by not paying attention to the event dispatching thread:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c14:EventThreadFrame.java</font>
<font color=#009900>// Race Conditions using Swing Components.</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.Console;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> EventThreadFrame <font color=#0000ff>extends</font> JFrame {
  <font color=#0000ff>private</font> JTextField statusField =
    <font color=#0000ff>new</font> JTextField(<font color=#004488>"Initial Value"</font>);
  <font color=#0000ff>public</font> EventThreadFrame() {
    Container cp = getContentPane();
    cp.add(statusField, BorderLayout.NORTH);
    addWindowListener(<font color=#0000ff>new</font> WindowAdapter() {
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> windowOpened(WindowEvent e) {
        <font color=#0000ff>try</font> { <font color=#009900>// Simulate initialization overhead</font>
          Thread.sleep(2000);
        } <font color=#0000ff>catch</font> (InterruptedException ex) {
          <font color=#0000ff>throw</font> <font color=#0000ff>new</font> RuntimeException(ex);
        }
        statusField.setText(<font color=#004488>"Initialization complete"</font>);
      }
    });
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main (String[] args) {
    EventThreadFrame etf = <font color=#0000ff>new</font> EventThreadFrame();
    Console.run(etf, 150, 60);
    etf.statusField.setText(<font color=#004488>"Application ready"</font>);
    System.out.println(<font color=#004488>"Done"</font>);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p>It is easy to see what is supposed to happen. In the <b>main</b> method, a new <b>EventThreadFrame</b> class is created and run using the <b>Console.run(&#160;) </b>method. After the frame has been created and run, the value of the text field is set to &#147;Application ready,&#148; and then, just before exiting <b>main(&#160;)</b>, &#147;Done&#148; is sent to the console. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0591" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>When the frame is created, the text field is constructed with the value &#147;Initial Value&#148; in the constructor of the frame, and an event listener is added that listens for the opening of the window. This event will be received by the <b>JFrame</b> as soon as the <b>setVisible(true)</b> method has been called (by <b>Console.run(&#160;)</b>) and is the right place to do any initialization that affects the view of the window. In this example, a call to <b>sleep(&#160;) </b>simulates some initialization code that might take a couple of seconds. After this is done, the value of the text box is set to &#147;Initialization complete.&#148; <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0592" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>You would expect that the text field would display &#147;Initial Value&#148; followed by &#147;Initialization complete&#148; and then &#147;Application Ready.&#148; Next the word &#147;Done&#148; should appear on the command prompt. What really happens is that the <b>setText(&#160;)</b> method on the <b>TextField</b> is called by the main thread <i>before</i> the <b>EventThreadFrame</b> has had a chance to process its events. This means that the string &#147;Application ready&#148; might actually appear before &#147;Initialization complete.&#148; In reality, things might not even appear in this order. Depending on the speed of your system, the Swing event dispatching thread may already be busy handling the <b>windowOpened</b> event, so you won&#146;t see the text field value until after that event, but by then the text will have been changed to &#147;Initialization Complete.&#148; Since the text field was set to this value last, the message &#147;Application ready&#148; is lost. To makes things worse, the word &#147;Done&#148; appears on the command prompt before anything else happens at all! <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0593" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>This undesirable and somewhat unpredictable effect is caused by the simple fact that there are two threads that need some sort of synchronization. It shows that you can sometimes get into trouble with threads and Swing. To solve this problem, you must ensure that Swing component properties are only ever updated by the event dispatch thread. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0594" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>This is easier than it sounds, using one of Swing&#146;s two mechanisms, <a name="Index1911"></a><b>SwingUtilities.invokeLater(&#160;)</b> and <a name="Index1912"></a><b>SwingUtilities.invokeandWait(&#160;)</b>. They do most of the work, which means that you don&#146;t have to do too much complicated synchronization or thread programming. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0595" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>They both take runnable objects as parameters and drive the <b>run(&#160;) </b>with<b> </b>the Swing event processing thread, after it has processed any pending events in the queue. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0596" title="Send BackTalk Comment">Feedback</a></font><br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c14:InvokeLaterFrame.java</font>
<font color=#009900>// Eliminating race Conditions using Swing Components.</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.Console;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> InvokeLaterFrame <font color=#0000ff>extends</font> JFrame {
  <font color=#0000ff>private</font> JTextField statusField =
    <font color=#0000ff>new</font> JTextField(<font color=#004488>"Initial Value"</font>);
  <font color=#0000ff>public</font> InvokeLaterFrame() {
    Container cp = getContentPane();
    cp.add(statusField, BorderLayout.NORTH);
    addWindowListener(<font color=#0000ff>new</font> WindowAdapter() {
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> windowOpened(WindowEvent e) {
        <font color=#0000ff>try</font> { <font color=#009900>// Simulate initialization overhead</font>
          Thread.sleep(2000);
        } <font color=#0000ff>catch</font> (InterruptedException ex) {
           <font color=#0000ff>throw</font> <font color=#0000ff>new</font> RuntimeException(ex);
        }
        statusField.setText(<font color=#004488>"Initialization complete"</font>);
      }
    });
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    <font color=#0000ff>final</font> InvokeLaterFrame ilf = <font color=#0000ff>new</font> InvokeLaterFrame();
    Console.run(ilf, 150, 60);
    <font color=#009900>// Use invokeAndWait() to synchronize output to prompt:</font>
    <font color=#009900>// SwingUtilities.invokeAndWait(new Runnable() {</font>
    SwingUtilities.invokeLater(<font color=#0000ff>new</font> Runnable() {
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> run() {
        ilf.statusField.setText(<font color=#004488>"Application ready"</font>);
      }
    });
    System.out.println(<font color=#004488>"Done"</font>);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p>A <b>Runnable</b> anonymous inner class is passed to <b>SwingUtilities.invokeLater(&#160;)</b>, which calls the <b>setText(&#160;)</b> method of the text field. This queues the runnable object as an event so that it is the event dispatching thread that calls the <b>setText(&#160;)</b> method after first processing any pending events. This means that the <b>windowOpening</b> event will be processed before the text field displays &#147;Application ready,&#148; which is the intended result. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0597" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p><b>invokeLater(&#160;)</b> is asynchronous, so it returns right away. This can be useful because it doesn&#146;t block, so your code runs smoothly. However, it doesn&#146;t solve the problem with the &#147;Done&#148; string, which is still printed to the command prompt before anything else happens. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0598" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>The solution to this problem is to use <b>invokeAndWait(&#160;)</b> instead of <b>invokeLater(&#160;)</b> to set the text field value to &#147;Application Ready.&#148; This method is synchronous, which means that it will block until the event has been processed before returning. The <b>System.out.println(&#147;Done&#148;)</b> statement will only be reached after the text field value has been set, so it will be the last statement to be executed. This gives us completely predictable and correct behavior. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0599" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>Using <b>invokeAndWait(&#160;)</b> provides one of the necessary conditions for deadlock, so make sure that you are careful about controlling shared resources if you are using <b>invokeAndWait(&#160;)</b>, especially if you are calling it from more than one thread. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0600" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>You will probably use <b>invokeLater(&#160;) </b>more often than <b>invokeAndWait(&#160;)</b>, but remember that if you set the properties of a Swing component any time after initialization, it should be done using one of these methods. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0601" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h2>
<a name="_Toc24775921"></a><a name="Heading21671"></a>Visual programming<br>and
JavaBeans<br></h2>
<p><a name="Index1913"></a><a name="Index1914"></a>So far in this book you&#146;ve seen how valuable Java is for creating reusable pieces of code. The &#147;most reusable&#148; unit of code has been the class, since it comprises a cohesive unit of characteristics (fields) and behaviors (methods) that can be reused either directly via composition or through inheritance. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2117" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>Inheritance and polymorphism are essential parts of object-oriented programming, but in the majority of cases when you&#146;re putting together an application, what you really want is components that do exactly what you need. You&#146;d like to drop these parts into your design like the chips an electronic engineer puts on a circuit board. It seems, too, that there should be some way to accelerate this &#147;modular assembly&#148; style of programming. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2118" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p><a name="Index1915"></a><a name="Index1916"></a><a name="Index1917"></a><a name="Index1918"></a><a name="Index1919"></a><a name="Index1920"></a><a name="Index1921"></a><a name="Index1922"></a><a name="Index1923"></a>&#147;Visual programming&#148; first became successful&#151;<i>very</i> successful&#151;with Microsoft&#146;s Visual BASIC (VB), followed by a second-generation design in Borland&#146;s Delphi (the primary inspiration for the JavaBeans design). With these programming tools the components are represented visually, which makes sense since they usually display some kind of visual component such as a button or a text field. The visual representation, in fact, is often exactly the way the component will look in the running program. So part of the process of visual programming involves dragging a component from a palette and dropping it onto your form. The <a name="Index1924"></a><a name="Index1925"></a>application builder tool writes code as you do this, and that code will cause the component to be created in the running program. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2119" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>Simply dropping the component onto a form is usually not enough to complete the program. Often, you must change the characteristics of a component, such as its color, the text that&#146;s on it, the database it&#146;s connected to, etc. Characteristics that can be modified at design time are referred to as <a name="Index1926"></a><a name="Index1927"></a><i>properties</i>. You can manipulate the properties of your component inside the application builder tool, and when you create the program, this configuration data is saved so that it can be rejuvenated when the program is started. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2120" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>By now you&#146;re probably used to the idea that an object is more than characteristics; it&#146;s also a set of behaviors. At design time, the behaviors of a visual component are partially represented by <a name="Index1928"></a><a name="Index1929"></a><i>events</i>, meaning &#147;Here&#146;s something that can happen to the component.&#148; Ordinarily, you decide what you want to happen when an event occurs by tying code to that event. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2121" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p><a name="Index1930"></a><a name="Index1931"></a>Here&#146;s the critical part: The application builder tool uses reflection to dynamically interrogate the component and find out which properties and events the component supports. Once it knows what they are, it can display the properties and allow you to change them (saving the state when you build the program), and also display the events. In general, you do something like double-clicking on an event, and the application builder tool creates a code body and ties it to that particular event. All you have to do at that point is write the code that executes when the event occurs. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2122" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>All this adds up to a lot of work that&#146;s done for you by the application builder tool. As a result, you can focus on what the program looks like and what it is supposed to do, and rely on the application builder tool to manage the connection details for you. The reason that visual programming tools have been so successful is that they dramatically speed up the process of building an application&#151;certainly the user interface, but often other portions of the application as well. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2123" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h3>
<a name="_Toc24775922"></a><a name="Heading21679"></a>What is a
JavaBean?<br></h3>
<p><a name="Index1932"></a><a name="Index1933"></a>After the dust settles, then, a component is really just a block of code, typically embodied in a class. The key issue is the ability for the application builder tool to discover the properties and events for that component. To create a VB component, the programmer had to write a fairly complicated piece of code following certain conventions to expose the properties and events. Delphi was a second-generation visual programming tool, and the language was actively designed around visual programming, so it was much easier to create a visual component. However, Java has brought the creation of visual components to its most advanced state with JavaBeans, because a Bean is just a class. You don&#146;t have to write any extra code or use special language extensions in order to make something a Bean. The only thing you need to do, in fact, is slightly modify the way that you name your methods. It is the method name that tells the application builder tool whether this is a property, an event, or just an ordinary method. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2124" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p><a name="Index1934"></a>In the JDK documentation, this naming convention is mistakenly termed a &#147;design pattern.&#148; This is unfortunate, since design patterns (see <i>Thinking in Patterns (with Java)</i> at <i>www.BruceEckel.com</i>) are challenging enough without this sort of confusion. It&#146;s not a design pattern, it&#146;s just a naming convention and it&#146;s fairly simple:<br></p>
<ol>
<li>For a property named <b>xxx</b>, you typically create two methods:
<b>getXxx(&#160;)</b> and <b>setXxx(&#160;)</b>. Note that the first letter
after &#147;get&#148; or &#147;set&#148; is automatically lower-cased to
produce the property name. The type produced by the &#147;get&#148; method is
the same as the type of the argument to the &#147;set&#148; method. The name
of the property and the type for the &#147;get&#148; and &#147;set&#148; are
not related. <font size="-2"><a
href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2125" title="Send BackTalk
Comment">Feedback</a></font></li>
<li>For a <b>boolean</b> property, you can use the &#147;get&#148; and
&#147;set&#148; approach above, but you can also use &#147;is&#148; instead
of &#147;get.&#148; <font size="-2"><a
href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2126" title="Send BackTalk
Comment">Feedback</a></font></li>
<li>Ordinary methods of the Bean don&#146;t conform to the above naming
convention, but they&#146;re <b>public</b>. <font size="-2"><a
href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2127" title="Send BackTalk
Comment">Feedback</a></font></li>
<li>For events, you use the Swing &#147;listener&#148; approach. It&#146;s
exactly the same as you&#146;ve been seeing:
<b>addBounceListener(BounceListener)</b> and
<b>removeBounceListener(BounceListener)</b> to handle a <b>BounceEvent</b>. Most
of the time, the built-in events and listeners will satisfy your needs, but you
can also create your own events and listener interfaces. <font size="-2"><a
href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2128" title="Send BackTalk
Comment">Feedback</a></font></li></ol><p>Point 1 answers a question about something you might have noticed when looking at older code versus newer code: A number of method names have had small, apparently meaningless name changes. Now you can see that most of those changes had to do with adapting to the &#147;get&#148; and &#147;set&#148; naming conventions in order to make that particular component into a JavaBean. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2129" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>We can use these guidelines to create a simple Bean:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: frogbean:Frog.java</font>
<font color=#009900>// A trivial JavaBean.</font>
<font color=#0000ff>package</font> frogbean;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.awt.event.*;

<font color=#0000ff>class</font> Spots {}

<font color=#0000ff>public</font> <font color=#0000ff>class</font> Frog {
  <font color=#0000ff>private</font> <font color=#0000ff>int</font> jumps;
  <font color=#0000ff>private</font> Color color;
  <font color=#0000ff>private</font> Spots spots;
  <font color=#0000ff>private</font> <font color=#0000ff>boolean</font> jmpr;
  <font color=#0000ff>public</font> <font color=#0000ff>int</font> getJumps() { <font color=#0000ff>return</font> jumps; }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> setJumps(<font color=#0000ff>int</font> newJumps) {
    jumps = newJumps;
  }
  <font color=#0000ff>public</font> Color getColor() { <font color=#0000ff>return</font> color; }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> setColor(Color newColor) {
    color = newColor;
  }
  <font color=#0000ff>public</font> Spots getSpots() { <font color=#0000ff>return</font> spots; }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> setSpots(Spots newSpots) {
    spots = newSpots;
  }
  <font color=#0000ff>public</font> <font color=#0000ff>boolean</font> isJumper() { <font color=#0000ff>return</font> jmpr; }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> setJumper(<font color=#0000ff>boolean</font> j) { jmpr = j; }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> addActionListener(ActionListener l) {
    <font color=#009900>//...</font>
  }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> removeActionListener(ActionListener l) {
    <font color=#009900>// ...</font>
  }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> addKeyListener(KeyListener l) {
    <font color=#009900>// ...</font>
  }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> removeKeyListener(KeyListener l) {
    <font color=#009900>// ...</font>
  }
  <font color=#009900>// An "ordinary" public method:</font>
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> croak() {
    System.out.println(<font color=#004488>"Ribbet!"</font>);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p>First, you can see that it&#146;s just a class. Usually, all your fields will be <b>private</b> and accessible only through methods. Following the naming convention, the properties are <b>jumps</b>, <b>color</b>, <b>spots</b>, and <b>jumper</b> (notice the case change of the first letter in the property name). Although the name of the internal identifier is the same as the name of the property in the first three cases, in <b>jumper</b> you can see that the property name does not force you to use any particular identifier for internal variables (or, indeed, to even <i>have</i> any internal variables for that property). <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2130" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>The events this Bean handles are <b>ActionEvent</b> and <b>KeyEvent</b>, based on the naming of the &#147;add&#148; and &#147;remove&#148; methods for the associated listener. Finally, you can see that the ordinary method <b>croak(&#160;)</b> is still part of the Bean simply because it&#146;s a <b>public</b> method, not because it conforms to any naming scheme. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2131" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h3>
<a name="_Toc24775923"></a><a name="Heading21735"></a>Extracting <b>BeanInfo</b>
<br>with the <b>Introspector</b></h3>
<p>One of the most critical parts of the JavaBean scheme occurs when you drag a Bean off a palette and plop it onto a form. The application builder tool must be able to create the Bean (which it can do if there&#146;s a default constructor) and then, without access to the Bean&#146;s source code, extract all the necessary information to create the property sheet and event handlers. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2132" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>Part of the solution is already evident from Chapter 10: Java <a name="Index1935"></a><a name="Index1936"></a><i>reflection</i> discovers all the methods of an unknown class. This is perfect for solving the JavaBean problem without requiring you to use any extra language keywords like those required in other visual programming languages. In fact, one of the prime reasons that reflection was added to Java was to support JavaBeans (although reflection also supports object serialization and remote method invocation). So you might expect that the creator of the application builder tool would have to reflect each Bean and hunt through its methods to find the properties and events for that Bean. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2133" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>This is certainly possible, but the Java designers wanted to provide a standard tool, not only to make Beans simpler to use, but also to provide a standard gateway to the creation of more complex Beans. This tool is the <a name="Index1937"></a><a name="Index1938"></a><b>Introspector</b> class, and the most important method in this class is <b>static </b><a name="Index1939"></a><a name="Index1940"></a><b>getBeanInfo(&#160;)</b>. You pass a <b>Class</b> reference to this method, and it fully interrogates that class and returns a <b>BeanInfo</b> object that you can then dissect to find properties, methods, and events. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2134" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>Usually, you won&#146;t care about any of this; you&#146;ll probably get most of your Beans off the shelf from vendors, and you don&#146;t need to know all the magic that&#146;s going on underneath. You&#146;ll simply drag your Beans onto your form, then configure their properties and write handlers for the events you&#146;re interested in. However, it&#146;s an interesting and educational exercise to use the <b>Introspector</b> to display information about a Bean, so here&#146;s a tool that does it:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c14:BeanDumper.java</font>
<font color=#009900>// Introspecting a Bean.</font>
<font color=#0000ff>import</font> java.beans.*;
<font color=#0000ff>import</font> java.lang.reflect.*;
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> BeanDumper <font color=#0000ff>extends</font> JFrame {
  <font color=#0000ff>private</font> JTextField query = <font color=#0000ff>new</font> JTextField(20);
  <font color=#0000ff>private</font> JTextArea results = <font color=#0000ff>new</font> JTextArea();
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> print(String s) { results.append(s + <font color=#004488>"\n"</font>); }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> dump(Class bean) {
    results.setText(<font color=#004488>""</font>);
    BeanInfo bi = <font color=#0000ff>null</font>;
    <font color=#0000ff>try</font> {
      bi = Introspector.getBeanInfo(bean, Object.<font color=#0000ff>class</font>);
    } <font color=#0000ff>catch</font>(IntrospectionException e) {
      print(<font color=#004488>"Couldn't introspect "</font> +  bean.getName());
      <font color=#0000ff>return</font>;
    }
    PropertyDescriptor[] properties =
      bi.getPropertyDescriptors();
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; properties.length; i++) {
      Class p = properties[i].getPropertyType();
      <font color=#0000ff>if</font>(p == <font color=#0000ff>null</font>) <font color=#0000ff>continue</font>;
      print(<font color=#004488>"Property type:\n  "</font> + p.getName() +
        <font color=#004488>"Property name:\n  "</font> + properties[i].getName());
      Method readMethod = properties[i].getReadMethod();
      <font color=#0000ff>if</font>(readMethod != <font color=#0000ff>null</font>)
        print(<font color=#004488>"Read method:\n  "</font> + readMethod);
      Method writeMethod = properties[i].getWriteMethod();
      <font color=#0000ff>if</font>(writeMethod != <font color=#0000ff>null</font>)
        print(<font color=#004488>"Write method:\n  "</font> + writeMethod);
      print(<font color=#004488>"===================="</font>);
    }
    print(<font color=#004488>"Public methods:"</font>);
    MethodDescriptor[] methods = bi.getMethodDescriptors();
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; methods.length; i++)
      print(methods[i].getMethod().toString());
    print(<font color=#004488>"======================"</font>);
    print(<font color=#004488>"Event support:"</font>);
    EventSetDescriptor[] events =
      bi.getEventSetDescriptors();
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; events.length; i++) {
      print(<font color=#004488>"Listener type:\n  "</font> +
        events[i].getListenerType().getName());
      Method[] lm =  events[i].getListenerMethods();
      <font color=#0000ff>for</font>(<font color=#0000ff>int</font> j = 0; j &lt; lm.length; j++)
        print(<font color=#004488>"Listener method:\n  "</font> + lm[j].getName());
      MethodDescriptor[] lmd =
        events[i].getListenerMethodDescriptors();
      <font color=#0000ff>for</font>(<font color=#0000ff>int</font> j = 0; j &lt; lmd.length; j++)
        print(<font color=#004488>"Method descriptor:\n  "</font>
          + lmd[j].getMethod());
      Method addListener= events[i].getAddListenerMethod();
      print(<font color=#004488>"Add Listener Method:\n  "</font> + addListener);
      Method removeListener =
        events[i].getRemoveListenerMethod();
      print(<font color=#004488>"Remove Listener Method:\n  "</font>+ removeListener);
      print(<font color=#004488>"===================="</font>);
    }
  }
  <font color=#0000ff>class</font> Dumper <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      String name = query.getText();
      Class c = <font color=#0000ff>null</font>;
      <font color=#0000ff>try</font> {
        c = Class.forName(name);
      } <font color=#0000ff>catch</font>(ClassNotFoundException ex) {
        results.setText(<font color=#004488>"Couldn't find "</font> + name);
        <font color=#0000ff>return</font>;
      }
      dump(c);
    }
  }
  <font color=#0000ff>public</font> BeanDumper() {
    Container cp = getContentPane();
    JPanel p = <font color=#0000ff>new</font> JPanel();
    p.setLayout(<font color=#0000ff>new</font> FlowLayout());
    p.add(<font color=#0000ff>new</font> JLabel(<font color=#004488>"Qualified bean name:"</font>));
    p.add(query);
    cp.add(BorderLayout.NORTH, p);
    cp.add(<font color=#0000ff>new</font> JScrollPane(results));
    Dumper dmpr = <font color=#0000ff>new</font> Dumper();
    query.addActionListener(dmpr);
    query.setText(<font color=#004488>"frogbean.Frog"</font>);
    <font color=#009900>// Force evaluation</font>
    dmpr.actionPerformed(<font color=#0000ff>new</font> ActionEvent(dmpr, 0, <font color=#004488>""</font>));
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> BeanDumper(), 600, 500);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p><b>BeanDumper.dump(&#160;)</b> is the method that does all the work. First it tries to create a <b>BeanInfo</b> object, and if successful, calls the methods of <b>BeanInfo</b> that produce information about properties, methods, and events. In <b>Introspector.getBeanInfo(&#160;)</b>, you&#146;ll see there is a second argument. This tells the <b>Introspector</b> where to stop in the inheritance hierarchy. Here, it stops before it parses all the methods from <b>Object</b>, since we&#146;re not interested in seeing those. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2135" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>For properties, <a name="Index1941"></a><a name="Index1942"></a><b>getPropertyDescriptors(&#160;)</b> returns an array of <a name="Index1943"></a><a name="Index1944"></a><b>PropertyDescriptor</b>s. For each <b>PropertyDescriptor</b>, you can call <a name="Index1945"></a><a name="Index1946"></a><b>getPropertyType(&#160;)</b> to find the class of object that is passed in and out via the property methods. Then, for each property, you can get its pseudonym (extracted from the method names) with <a name="Index1947"></a><a name="Index1948"></a><b>getName(&#160;)</b>, the method for reading with <a name="Index1949"></a><a name="Index1950"></a><b>getReadMethod(&#160;)</b>, and the method for writing with <a name="Index1951"></a><a name="Index1952"></a><b>getWriteMethod(&#160;)</b>. These last two methods return a <b>Method</b> object that can actually be used to invoke the corresponding method on the object (this is part of reflection). <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2136" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>For the <b>public</b> methods (including the property methods), <a name="Index1953"></a><a name="Index1954"></a><b>getMethodDescriptors(&#160;)</b> returns an array of <a name="Index1955"></a><a name="Index1956"></a><b>MethodDescriptor</b>s. For each one, you can get the associated <a name="Index1957"></a><a name="Index1958"></a><b>Method</b> object and print its name. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2137" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>For the events, <a name="Index1959"></a><a name="Index1960"></a><b>getEventSetDescriptors(&#160;)</b> returns an array of (what else?) <a name="Index1961"></a><a name="Index1962"></a><b>EventSetDescriptor</b>s. Each of these can be queried to find out the class of the listener, the methods of that listener class, and the add- and remove-listener methods. The <b>BeanDumper </b>program prints out all of this information. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2138" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>Upon startup, the program forces the evaluation of <b>frogbean.Frog</b>. The output, after removing extra details that are unnecessary here, is:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#0000ff>class</font> name: Frog
Property type:
  Color
Property name:
  color
Read method:
  <font color=#0000ff>public</font> Color getColor()
Write method:
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> setColor(Color)
====================
Property type:
  Spots
Property name:
  spots
Read method:
  <font color=#0000ff>public</font> Spots getSpots()
Write method:
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> setSpots(Spots)
====================
Property type:
  <font color=#0000ff>boolean</font>
Property name:
  jumper
Read method:
  <font color=#0000ff>public</font> <font color=#0000ff>boolean</font> isJumper()
Write method:
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> setJumper(<font color=#0000ff>boolean</font>)
====================
Property type:
  <font color=#0000ff>int</font>
Property name:
  jumps
Read method:
  <font color=#0000ff>public</font> <font color=#0000ff>int</font> getJumps()
Write method:
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> setJumps(<font color=#0000ff>int</font>)
====================
Public methods:
<font color=#0000ff>public</font> <font color=#0000ff>void</font> setJumps(<font color=#0000ff>int</font>)
<font color=#0000ff>public</font> <font color=#0000ff>void</font> croak()
<font color=#0000ff>public</font> <font color=#0000ff>void</font> removeActionListener(ActionListener)
<font color=#0000ff>public</font> <font color=#0000ff>void</font> addActionListener(ActionListener)
<font color=#0000ff>public</font> <font color=#0000ff>int</font> getJumps()
<font color=#0000ff>public</font> <font color=#0000ff>void</font> setColor(Color)
<font color=#0000ff>public</font> <font color=#0000ff>void</font> setSpots(Spots)
<font color=#0000ff>public</font> <font color=#0000ff>void</font> setJumper(<font color=#0000ff>boolean</font>)
<font color=#0000ff>public</font> <font color=#0000ff>boolean</font> isJumper()
<font color=#0000ff>public</font> <font color=#0000ff>void</font> addKeyListener(KeyListener)
<font color=#0000ff>public</font> Color getColor()
<font color=#0000ff>public</font> <font color=#0000ff>void</font> removeKeyListener(KeyListener)
<font color=#0000ff>public</font> Spots getSpots()
======================
Event support:
Listener type:
  KeyListener
Listener method:
  keyTyped
Listener method:
  keyPressed
Listener method:
  keyReleased
Method descriptor:
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> keyTyped(KeyEvent)
Method descriptor:
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> keyPressed(KeyEvent)
Method descriptor:
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> keyReleased(KeyEvent)
Add Listener Method:
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> addKeyListener(KeyListener)
Remove Listener Method:
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> removeKeyListener(KeyListener)
====================
Listener type:
  ActionListener
Listener method:
  actionPerformed
Method descriptor:
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent)
Add Listener Method:
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> addActionListener(ActionListener)
Remove Listener Method:
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> removeActionListener(ActionListener)
====================</PRE></FONT></BLOCKQUOTE><p><br></p>
<p>This reveals most of what the <b>Introspector</b> sees as it produces a <b>BeanInfo</b> object from your Bean. You can see that the type of the property and its name are independent. Notice the lowercasing of the property name. (The only time this doesn&#146;t occur is when the property name begins with more than one capital letter in a row.) And remember that the method names you&#146;re seeing here (such as the read and write methods) are actually produced from a <b>Method</b> object that can be used to invoke the associated method on the object. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2139" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>The <b>public</b> method list includes the methods that are not associated with a property or event, such as <b>croak(&#160;)</b>, as well as those that are. These are all the methods that you can call programmatically for a Bean, and the application builder tool can choose to list all of these while you&#146;re making method calls, to ease your task. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2140" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>Finally, you can see that the events are fully parsed out into the listener, its methods, and the add- and remove-listener methods. Basically, once you have the <b>BeanInfo</b>, you can find out everything of importance for the Bean. You can also call the methods for that Bean, even though you don&#146;t have any other information except the object (again, a feature of reflection). <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2141" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h3>
<a name="_Toc24775924"></a><a name="Heading21928"></a>A more sophisticated
Bean</h3>
<p>This next example is slightly more sophisticated, albeit frivolous. It&#146;s a <b>JPanel</b> that draws a little circle around the mouse whenever the mouse is moved. When you press the mouse, the word &#147;Bang!&#148; appears in the middle of the screen, and an action listener is fired. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2142" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>The properties you can change are the size of the circle as well as the color, size, and text of the word that is displayed when you press the mouse. A <b>BangBean</b> also has its own <a name="Index1963"></a><b>addActionListener(&#160;)</b> and <a name="Index1964"></a><b>removeActionListener(&#160;)</b>, so you can attach your own listener that will be fired when the user clicks on the <b>BangBean</b>. You should be able to recognize the property and event support:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: bangbean:BangBean.java</font>
<font color=#009900>// A graphical Bean.</font>
<font color=#0000ff>package</font> bangbean;
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> java.io.*;
<font color=#0000ff>import</font> java.util.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font>
BangBean <font color=#0000ff>extends</font> JPanel <font color=#0000ff>implements</font> Serializable {
  <font color=#0000ff>private</font> <font color=#0000ff>int</font> xm, ym;
  <font color=#0000ff>private</font> <font color=#0000ff>int</font> cSize = 20; <font color=#009900>// Circle size</font>
  <font color=#0000ff>private</font> String text = <font color=#004488>"Bang!"</font>;
  <font color=#0000ff>private</font> <font color=#0000ff>int</font> fontSize = 48;
  <font color=#0000ff>private</font> Color tColor = Color.RED;
  <font color=#0000ff>private</font> ActionListener actionListener;
  <font color=#0000ff>public</font> BangBean() {
    addMouseListener(<font color=#0000ff>new</font> ML());
    addMouseMotionListener(<font color=#0000ff>new</font> MML());
  }
  <font color=#0000ff>public</font> <font color=#0000ff>int</font> getCircleSize() { <font color=#0000ff>return</font> cSize; }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> setCircleSize(<font color=#0000ff>int</font> newSize) {
    cSize = newSize;
  }
  <font color=#0000ff>public</font> String getBangText() { <font color=#0000ff>return</font> text; }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> setBangText(String newText) {
    text = newText;
  }
  <font color=#0000ff>public</font> <font color=#0000ff>int</font> getFontSize() { <font color=#0000ff>return</font> fontSize; }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> setFontSize(<font color=#0000ff>int</font> newSize) {
    fontSize = newSize;
  }
  <font color=#0000ff>public</font> Color getTextColor() { <font color=#0000ff>return</font> tColor; }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> setTextColor(Color newColor) {
    tColor = newColor;
  }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> paintComponent(Graphics g) {
    <font color=#0000ff>super</font>.paintComponent(g);
    g.setColor(Color.BLACK);
    g.drawOval(xm - cSize/2, ym - cSize/2, cSize, cSize);
  }
  <font color=#009900>// This is a unicast listener, which is</font>
  <font color=#009900>// the simplest form of listener management:</font>
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> addActionListener(ActionListener l)
  <font color=#0000ff>throws</font> TooManyListenersException {
    <font color=#0000ff>if</font>(actionListener != <font color=#0000ff>null</font>)
      <font color=#0000ff>throw</font> <font color=#0000ff>new</font> TooManyListenersException();
    actionListener = l;
  }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> removeActionListener(ActionListener l) {
    actionListener = <font color=#0000ff>null</font>;
  }
  <font color=#0000ff>class</font> ML <font color=#0000ff>extends</font> MouseAdapter {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> mousePressed(MouseEvent e) {
      Graphics g = getGraphics();
      g.setColor(tColor);
      g.setFont(
        <font color=#0000ff>new</font> Font(<font color=#004488>"TimesRoman"</font>, Font.BOLD, fontSize));
      <font color=#0000ff>int</font> width = g.getFontMetrics().stringWidth(text);
      g.drawString(text, (getSize().width - width) /2,
        getSize().height/2);
      g.dispose();
      <font color=#009900>// Call the listener's method:</font>
      <font color=#0000ff>if</font>(actionListener != <font color=#0000ff>null</font>)
        actionListener.actionPerformed(
          <font color=#0000ff>new</font> ActionEvent(BangBean.<font color=#0000ff>this</font>,
            ActionEvent.ACTION_PERFORMED, <font color=#0000ff>null</font>));
    }
  }
  <font color=#0000ff>class</font> MML <font color=#0000ff>extends</font> MouseMotionAdapter {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> mouseMoved(MouseEvent e) {
      xm = e.getX();
      ym = e.getY();
      repaint();
    }
  }
  <font color=#0000ff>public</font> Dimension getPreferredSize() {
    <font color=#0000ff>return</font> <font color=#0000ff>new</font> Dimension(200, 200);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p>The first thing you&#146;ll notice is that <b>BangBean</b> implements the <a name="Index1965"></a><a name="Index1966"></a><b>Serializable</b> interface. This means that the application builder tool can &#147;pickle&#148; all the information for the <b>BangBean</b> by using serialization after the program designer has adjusted the values of the properties. When the Bean is created as part of the running application, these &#147;pickled&#148; properties are restored so that you get exactly what you designed. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2143" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>You can see that all the fields are <b>private</b>, which is what you&#146;ll usually do with a Bean&#151;allow access only through methods, usually using the &#147;property&#148; scheme. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2144" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>When you look at the signature for <b>addActionListener(&#160;)</b>, you&#146;ll see that it can throw a <a name="Index1967"></a><b>TooManyListenersException</b>. This indicates that it is <a name="Index1968"></a><i>unicast</i>, which means it notifies only one listener when the event occurs. Ordinarily, you&#146;ll use <a name="Index1969"></a><i>multicast</i> events so that many listeners can be notified of an event. However, that runs into threading issues, so it will be revisited under the heading &#147;JavaBeans and synchronization&#148; later in this chapter. In the meantime, a unicast event sidesteps the problem. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2145" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>When you click the mouse, the text is put in the middle of the <b>BangBean</b>, and if the <b>actionListener</b> field is not <b>null</b>, its <b>actionPerformed(&#160;)</b> is called, creating a new <a name="Index1970"></a><b>ActionEvent </b>object in the process. Whenever the mouse is moved, its new coordinates are captured and the canvas is repainted (erasing any text that&#146;s on the canvas, as you&#146;ll see). <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2146" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>Here is the <b>BangBeanTest</b> class to test the Bean:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c14:BangBeanTest.java</font>
<font color=#0000ff>import</font> bangbean.*;
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> java.util.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> BangBeanTest <font color=#0000ff>extends</font> JFrame {
  <font color=#0000ff>private</font> JTextField txt = <font color=#0000ff>new</font> JTextField(20);
  <font color=#009900>// During testing, report actions:</font>
  <font color=#0000ff>class</font> BBL <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>private</font> <font color=#0000ff>int</font> count = 0;
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      txt.setText(<font color=#004488>"BangBean action "</font>+ count++);
    }
  }
  <font color=#0000ff>public</font> BangBeanTest() {
    BangBean bb = <font color=#0000ff>new</font> BangBean();
    <font color=#0000ff>try</font> {
      bb.addActionListener(<font color=#0000ff>new</font> BBL());
    } <font color=#0000ff>catch</font>(TooManyListenersException e) {
      txt.setText(<font color=#004488>"Too many listeners"</font>);
    }
    Container cp = getContentPane();
    cp.add(bb);
    cp.add(BorderLayout.SOUTH, txt);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> BangBeanTest(), 400, 500);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p>When a Bean is in a development environment, this class will not be used, but it&#146;s helpful to provide a rapid testing method for each of your Beans. <b>BangBeanTest</b> places a <b>BangBean</b> within the applet, attaching a simple <b>ActionListener</b> to the <b>BangBean</b> to print an event count to the <b>JTextField </b>whenever an <b>ActionEvent</b> occurs. Usually, of course, the application builder tool would create most of the code that uses the Bean. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2147" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>When you run the <b>BangBean</b> through <b>BeanDumper</b> or put the <b>BangBean</b> inside a Bean-enabled development environment, you&#146;ll notice that there are many more properties and actions than are evident from the preceding code. That&#146;s because <b>BangBean</b> is inherited from <b>JPanel</b>, and <b>JPanel </b>is also Bean, so you&#146;re seeing its properties and events as well. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2148" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h3>
<a name="_Toc24775925"></a><a name="Heading22054"></a>JavaBeans and
synchronization</h3>
<p>Whenever you create a Bean, you must assume that it will run in a multithreaded environment. This means that: <br></p>
<ol>
<li><a name="Index1971"></a><a name="Index1972"></a>Whenever possible, all the
<b>public</b> methods of a Bean should be <b>synchronized</b>. Of course, this
incurs the <b>synchronized</b> run-time overhead (which has been significantly
reduced in recent versions of the JDK). If that&#146;s a problem, methods that
will not cause problems in critical sections can be left un-<b>synchronized</b>,
but keep in mind that this is not always obvious. Methods that qualify tend to
be small (such as <b>getCircleSize(&#160;)</b> in the following example) and/or
&#147;atomic,&#148; that is, the method call executes in such a short amount
of code that the object cannot be changed during execution. Making such methods
un-<b>synchronized </b>might not have a significant effect on the execution
speed of your program. You might as well make all <b>public</b> methods of a
Bean <b>synchronized</b> and remove the <b>synchronized</b> keyword only when
you know for sure that it&#146;s necessary and that it makes a difference.
<font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap14_2257"
title="Send BackTalk Comment">Feedback</a></font></li>
<li>When firing a multicast event to a bunch of listeners interested in that
event, you must assume that listeners might be added or removed while moving
through the list. <font size="-2"><a
href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap14_2258" title="Send BackTalk
Comment">Feedback</a></font></li></ol><p>The first point is fairly easy to deal with, but the second point requires a little more thought. The previous version of <b>BangBean.java</b> ducked out of the multithreading question by ignoring the <b>synchronized</b> keyword and making the event unicast. Here is a modified version that works in a multithreaded environment and uses multicasting for events:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c14:BangBean2.java</font>
<font color=#009900>// You should write your Beans this way so they</font>
<font color=#009900>// can run in a multithreaded environment.</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> java.util.*;
<font color=#0000ff>import</font> java.io.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> BangBean2 <font color=#0000ff>extends</font> JPanel
<font color=#0000ff>implements</font> Serializable {
  <font color=#0000ff>private</font> <font color=#0000ff>int</font> xm, ym;
  <font color=#0000ff>private</font> <font color=#0000ff>int</font> cSize = 20; <font color=#009900>// Circle size</font>
  <font color=#0000ff>private</font> String text = <font color=#004488>"Bang!"</font>;
  <font color=#0000ff>private</font> <font color=#0000ff>int</font> fontSize = 48;
  <font color=#0000ff>private</font> Color tColor = Color.RED;
  <font color=#0000ff>private</font> ArrayList actionListeners = <font color=#0000ff>new</font> ArrayList();
  <font color=#0000ff>public</font> BangBean2() {
    addMouseListener(<font color=#0000ff>new</font> ML());
    addMouseMotionListener(<font color=#0000ff>new</font> MM());
  }
  <font color=#0000ff>public</font> <font color=#0000ff>synchronized</font> <font color=#0000ff>int</font> getCircleSize() { <font color=#0000ff>return</font> cSize; }
  <font color=#0000ff>public</font> <font color=#0000ff>synchronized</font> <font color=#0000ff>void</font> setCircleSize(<font color=#0000ff>int</font> newSize) {
    cSize = newSize;
  }
  <font color=#0000ff>public</font> <font color=#0000ff>synchronized</font> String getBangText() { <font color=#0000ff>return</font> text; }
  <font color=#0000ff>public</font> <font color=#0000ff>synchronized</font> <font color=#0000ff>void</font> setBangText(String newText) {
    text = newText;
  }
  <font color=#0000ff>public</font> <font color=#0000ff>synchronized</font> <font color=#0000ff>int</font> getFontSize(){ <font color=#0000ff>return</font> fontSize; }
  <font color=#0000ff>public</font> <font color=#0000ff>synchronized</font> <font color=#0000ff>void</font> setFontSize(<font color=#0000ff>int</font> newSize) {
    fontSize = newSize;
  }
  <font color=#0000ff>public</font> <font color=#0000ff>synchronized</font> Color getTextColor(){ <font color=#0000ff>return</font> tColor;}
  <font color=#0000ff>public</font> <font color=#0000ff>synchronized</font> <font color=#0000ff>void</font> setTextColor(Color newColor) {
    tColor = newColor;
  }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> paintComponent(Graphics g) {
    <font color=#0000ff>super</font>.paintComponent(g);
    g.setColor(Color.BLACK);
    g.drawOval(xm - cSize/2, ym - cSize/2, cSize, cSize);
  }
  <font color=#009900>// This is a multicast listener, which is more typically</font>
  <font color=#009900>// used than the unicast approach taken in BangBean.java:</font>
  <font color=#0000ff>public</font> <font color=#0000ff>synchronized</font> <font color=#0000ff>void</font>
  addActionListener(ActionListener l) {
    actionListeners.add(l);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>synchronized</font> <font color=#0000ff>void</font>
  removeActionListener(ActionListener l) {
    actionListeners.remove(l);
  }
  <font color=#009900>// Notice this isn't synchronized:</font>
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> notifyListeners() {
    ActionEvent a = <font color=#0000ff>new</font> ActionEvent(BangBean2.<font color=#0000ff>this</font>,
      ActionEvent.ACTION_PERFORMED, <font color=#0000ff>null</font>);
    ArrayList lv = <font color=#0000ff>null</font>;
    <font color=#009900>// Make a shallow copy of the List in case</font>
    <font color=#009900>// someone adds a listener while we're</font>
    <font color=#009900>// calling listeners:</font>
    <font color=#0000ff>synchronized</font>(<font color=#0000ff>this</font>) {
      lv = (ArrayList)actionListeners.clone();
    }
    <font color=#009900>// Call all the listener methods:</font>
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; lv.size(); i++)
      ((ActionListener)lv.get(i)).actionPerformed(a);
  }
  <font color=#0000ff>class</font> ML <font color=#0000ff>extends</font> MouseAdapter {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> mousePressed(MouseEvent e) {
      Graphics g = getGraphics();
      g.setColor(tColor);
      g.setFont(
        <font color=#0000ff>new</font> Font(<font color=#004488>"TimesRoman"</font>, Font.BOLD, fontSize));
      <font color=#0000ff>int</font> width = g.getFontMetrics().stringWidth(text);
      g.drawString(text, (getSize().width - width) /2,
        getSize().height/2);
      g.dispose();
      notifyListeners();
    }
  }
  <font color=#0000ff>class</font> MM <font color=#0000ff>extends</font> MouseMotionAdapter {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> mouseMoved(MouseEvent e) {
      xm = e.getX();
      ym = e.getY();
      repaint();
    }
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    BangBean2 bb = <font color=#0000ff>new</font> BangBean2();
    bb.addActionListener(<font color=#0000ff>new</font> ActionListener() {
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
        System.out.println(<font color=#004488>"ActionEvent"</font> + e);
      }
    });
    bb.addActionListener(<font color=#0000ff>new</font> ActionListener() {
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
        System.out.println(<font color=#004488>"BangBean2 action"</font>);
      }
    });
    bb.addActionListener(<font color=#0000ff>new</font> ActionListener() {
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
        System.out.println(<font color=#004488>"More action"</font>);
      }
    });
    Console.run(bb, 300, 300);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><p><br></p>
<p>Adding <b>synchronized</b> to the methods is an easy change. However, notice in <a name="Index1973"></a><b>addActionListener(&#160;)</b> and <a name="Index1974"></a><b>removeActionListener(&#160;)</b> that the <b>ActionListener</b>s are now added to and removed from an <b>ArrayList</b>, so you can have as many as you want. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap14_2259" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>You can see that the method <a name="Index1975"></a><b>notifyListeners(&#160;)</b> is <i>not</i> <b>synchronized</b>. It can be called from more than one thread at a time. It&#146;s also possible for <b>addActionListener(&#160;)</b> or <b>removeActionListener(&#160;)</b> to be called in the middle of a call to <b>notifyListeners(&#160;)</b>, which is a problem because it traverses the <b>ArrayList actionListeners</b>. To alleviate the problem, the <b>ArrayList</b> is cloned inside a <b>synchronized</b> clause, and the clone is traversed (see Appendix A for details of cloning). This way, the original <b>ArrayList</b> can be manipulated without impact on <b>notifyListeners(&#160;)</b>. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap14_2260" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>The <b>paintComponent(&#160;)</b> method is also not <a name="Index1976"></a><a name="Index1977"></a><a name="Index1978"></a><b>synchronized</b>. Deciding whether to synchronize overridden methods is not as clear as when you&#146;re just adding your own methods. In this example, it turns out that <b>paintComponent(&#160;)</b> seems to work OK whether it&#146;s <b>synchronized</b> or not. But the issues you must consider are: <br></p>
<ol>
<li><a name="Index1979"></a><a name="Index1980"></a>Does the method modify the
state of &#147;critical&#148; variables within the object? To discover whether
the variables are &#147;critical,&#148; you must determine whether they will
be read or set by other threads in the program. (In this case, the reading or
setting is virtually always accomplished via <b>synchronized</b> methods, so you
can just examine those.) In the case of <b>paintComponent(&#160;)</b>, no
modification takes place. <font size="-2"><a
href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap14_2261" title="Send BackTalk
Comment">Feedback</a></font></li>
<li>Does the method depend on the state of these &#147;critical&#148;
variables? If a <b>synchronized</b> method modifies a variable that your method
uses, then you might very well want to make your method <b>synchronized</b> as
well. Based on this, you might observe that <b>cSize</b> is changed by
<b>synchronized</b> methods, and therefore <b>paintComponent(&#160;)</b> should
be <b>synchronized</b>. Here, however, you can ask &#147;What&#146;s the worst
thing that will happen if <b>cSize</b> is changed during a
<b>paintComponent(&#160;)</b>?&#148; When you see that it&#146;s nothing too
bad, and a transient effect at that, you can decide to leave
<b>paintComponent(&#160;)</b> un-<b>synchronized</b> to prevent the extra
overhead from the <b>synchronized</b> method call. <font size="-2"><a
href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap14_2262" title="Send BackTalk
Comment">Feedback</a></font></li>
<li>A third clue is to notice whether the base-class version of
<b>paintComponent(&#160;)</b> is <b>synchronized</b>, which it isn&#146;t. This
isn&#146;t an airtight argument, just a clue. In this case, for example, a
field that <i>is</i> changed via <b>synchronized</b> methods (that is
<b>cSize</b>) has been mixed into the <b>paintComponent(&#160;)</b> formula and
might have changed the situation. Notice, however, that <b>synchronized</b>
doesn&#146;t inherit; that is, if a method is <b>synchronized</b> in the base
class, then it <i>is not</i> automatically <b>synchronized</b> in the derived
class overridden version. <font size="-2"><a
href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap14_2263" title="Send BackTalk
Comment">Feedback</a></font></li>
<li><b>paint(&#160;)</b> and <b>paintComponent(&#160;)</b> are methods that must
be as fast as possible. Anything that takes processing overhead out of these
methods is highly recommended, so if you think you need to synchronize these
methods it may be an indicator of bad
design.</li></ol><p>The test code in <b>main(&#160;) </b>has been modified from that seen in <b>BangBeanTest</b> to demonstrate the multicast ability of <b>BangBean2</b> by adding extra listeners. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap14_2264" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h3>
<a name="_Toc24775926"></a><a name="Heading22176"></a>Packaging a Bean<br></h3>
<p><a name="Index1981"></a><a name="Index1982"></a><a name="Index1983"></a><a name="Index1984"></a>Before you can bring a JavaBean into a Bean-enabled visual builder tool, it must be put into the standard Bean container, which is a JAR file that includes all the Bean classes as well as a &#147;manifest&#148; file that says &#147;This is a Bean.&#148; A manifest file is simply a text file that follows a particular form. For the <b>BangBean</b>, the manifest file looks like this:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>Manifest-Version: 1.0

Name: bangbean/BangBean.<font color=#0000ff>class</font>
Java-Bean: True</PRE></FONT></BLOCKQUOTE><p><br></p>
<p>The first line indicates the version of the manifest scheme, which until further notice from Sun is 1.0. The second line (empty lines are ignored) names the <b>BangBean.class</b> file, and the third says &#147;It&#146;s a Bean.&#148; Without the third line, the program builder tool will not recognize the class as a Bean. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2149" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>The only tricky part is that you must make sure that you get the proper path in the &#147;Name:&#148; field. If you look back at <b>BangBean.java</b>, you&#146;ll see it&#146;s in <b>package bangbean </b>(and thus in a subdirectory called &#147;bangbean&#148; that&#146;s off of the classpath), and the name in the manifest file must include this package information. In addition, you must place the manifest file in the directory <i>above</i> the root of your package path, which in this case means placing the file in the directory above the &#147;bangbean&#148; subdirectory. Then you must invoke <b>jar</b> from the same directory as the manifest file, as follows:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>jar cfm BangBean.jar BangBean.mf bangbean</PRE></FONT></BLOCKQUOTE><p><br></p>
<p>This assumes that you want the resulting JAR file to be named <b>BangBean.jar</b>, and that you&#146;ve put the manifest in a file called <b>BangBean.mf</b>. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2150" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>You might wonder &#147;What about all the other classes that were generated when I compiled <b>BangBean.java</b>?&#148; Well, they all ended up inside the <b>bangbean</b> subdirectory, and you&#146;ll see that the last argument for the above <b>jar</b> command line is the <b>bangbean</b> subdirectory. When you give <b>jar</b> the name of a subdirectory, it packages that entire subdirectory into the JAR file (including, in this case, the original <b>BangBean.java</b> source-code file&#151;you might not choose to include the source with your own Beans). In addition, if you turn around and unpack the JAR file you&#146;ve just created, you&#146;ll discover that your manifest file isn&#146;t inside, but that <b>jar</b> has created its own manifest file (based partly on yours) called <b>MANIFEST.MF </b>and placed it inside the subdirectory <b>META-INF</b> (for &#147;meta-information&#148;). If you open this manifest file, you&#146;ll also notice that digital signature information has been added by <b>jar </b>for each file, of the form:<br></p>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>Digest-Algorithms: SHA MD5 
SHA-Digest: pDpEAG9NaeCx8aFtqPI4udSX/O0=
MD5-Digest: O4NcS1hE3Smnzlp2hj6qeg==</PRE></FONT></BLOCKQUOTE><p><br></p>
<p>In general, you don&#146;t need to worry about any of this, and if you make changes, you can just modify your original manifest file and reinvoke <b>jar</b> to create a new JAR file for your Bean. You can also add other Beans to the JAR file simply by adding their information to your manifest. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2151" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>One thing to notice is that you&#146;ll probably want to put each Bean in its own subdirectory, since when you create a JAR file you hand the <b>jar</b> utility the name of a subdirectory, and it puts everything in that subdirectory into the JAR file. You can see that both <b>Frog</b> and <b>BangBean</b> are in their own subdirectories. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2152" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>Once you have your Bean properly inside a JAR file, you can bring it into a Beans-enabled program-builder environment. The way you do this varies from one tool to the next, but Sun provides a freely available test bed for JavaBeans in their &#147;Bean Builder.&#148; (Download from <i>java.sun.com/beans</i>.) You place a Bean into the Bean Builder by simply copying the JAR file into the correct subdirectory. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2153" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h3>
<a name="_Toc24775927"></a><a name="Heading22196"></a>More complex Bean
support</h3>
<p>You can see how remarkably simple it is to make a Bean, but you aren&#146;t limited to what you&#146;ve seen here. The JavaBeans architecture provides a simple point of entry but can also scale to more complex situations. These situations are beyond the scope of this book, but they will be briefly introduced here. You can find more details at <i>java.sun.com/beans</i>. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2154" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>One place where you can add sophistication is with properties. The examples you&#146;ve seen here have shown only single properties, but it&#146;s also possible to represent multiple properties in an array. This is called an <a name="Index1985"></a><a name="Index1986"></a><a name="Index1987"></a><i>indexed property</i>. You simply provide the appropriate methods (again following a naming convention for the method names), and the <b>Introspector</b> recognizes an indexed property so that your application builder tool can respond appropriately. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2155" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>Properties can be <a name="Index1988"></a><a name="Index1989"></a><a name="Index1990"></a><i>bound</i>, which means that they will notify other objects via a <b>PropertyChangeEvent</b>. The other objects can then choose to change themselves based on the change to the Bean. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2156" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>Properties can be <a name="Index1991"></a><a name="Index1992"></a><a name="Index1993"></a><i>constrained</i>, which means that other objects can veto a change to that property if it is unacceptable. The other objects are notified by using a <a name="Index1994"></a><a name="Index1995"></a><b>PropertyChangeEvent</b>, and they can throw a <a name="Index1996"></a><a name="Index1997"></a><b>PropertyVetoException</b> to prevent the change from happening and to restore the old values. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2157" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p><a name="Index1998"></a><a name="Index1999"></a><a name="Index2000"></a><a name="Index2001"></a><a name="Index2002"></a><a name="Index2003"></a><a name="Index2004"></a><a name="Index2005"></a>You can also change the way your Bean is represented at design time: <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2158" title="Send BackTalk Comment">Feedback</a></font><br></p>
<ol>
<li>You can provide a custom property sheet for your particular Bean. The
ordinary property sheet will be used for all other Beans, but yours is
automatically invoked when your Bean is selected. <font size="-2"><a
href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2159" title="Send BackTalk
Comment">Feedback</a></font></li>
<li>You can create a custom editor for a particular property, so the ordinary
property sheet is used, but when your special property is being edited, your
editor will automatically be invoked. <font size="-2"><a
href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2160" title="Send BackTalk
Comment">Feedback</a></font></li>
<li>You can provide a custom <b>BeanInfo</b> class for your Bean that produces
information different from the default created by the <b>Introspector</b>. <font
size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2161"
title="Send BackTalk Comment">Feedback</a></font></li>
<li>It&#146;s also possible to turn &#147;expert&#148; mode on and off in all
<b>FeatureDescriptor</b>s to distinguish between basic features and more
complicated ones. <font size="-2"><a
href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2162" title="Send BackTalk
Comment">Feedback</a></font></li></ol><h3>
<a name="_Toc24775928"></a><a name="Heading22206"></a>More to Beans</h3>
<p>There are a number of books about JavaBeans; for example, <i>JavaBeans</i> by Elliotte Rusty Harold (IDG, 1998). <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2164" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h2>
<a name="_Toc24775929"></a><a name="Heading22208"></a>Summary</h2>
<p>Of all the libraries in Java, the GUI library has seen the most dramatic changes from Java 1.0 to Java 2. The Java 1.0 AWT was roundly criticized as being one of the worst designs seen, and while it would allow you to create portable programs, the resulting GUI was &#147;equally mediocre on all platforms.&#148; It was also limiting, awkward, and unpleasant to use compared with the native application development tools available on a particular platform. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2165" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>When Java 1.1 introduced the new event model and JavaBeans, the stage was set&#151;now it was possible to create GUI components that could be easily dragged and dropped inside visual application builder tools. In addition, the design of the event model and JavaBeans clearly shows strong consideration for ease of programming and maintainable code (something that was not evident in the 1.0 AWT). But it wasn&#146;t until the JFC/Swing classes appeared that the job was finished. With the Swing components, cross-platform GUI programming can be a civilized experience. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2166" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>Actually, the only thing that&#146;s missing is the application builder tool, and this is where the real revolution lies. Microsoft&#146;s Visual BASIC and Visual C++ require Microsoft&#146;s application builder tools, as does Borland&#146;s Delphi and C++ Builder. If you want the application builder tool to get better, you have to cross your fingers and hope the vendor will give you what you want. But Java is an open environment, so not only does it allow for competing application builder environments, it encourages them. And for these tools to be taken seriously, they must support JavaBeans. This means a leveled playing field; if a better application builder tool comes along, you&#146;re not tied to the one you&#146;ve been using. You can pick up and move to the new one and increase your productivity. This kind of competitive environment for GUI application builder tools has not been seen before, and the resulting marketplace can generate only positive results for the productivity of the programmer. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2167" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p><a name="Index2006"></a><a name="Index2007"></a>This chapter was meant only to give you an introduction to the power of Swing and to get you started so you could see how relatively simple it is to feel your way through the libraries. What you&#146;ve seen so far will probably suffice for a good portion of your UI design needs. However, there&#146;s a lot more to Swing; it&#146;s intended to be a fully powered UI design tool kit. There&#146;s probably a way to accomplish just about everything you can imagine. <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]A0602" title="Send BackTalk Comment">Feedback</a></font><br></p>
<p>If you don&#146;t see what you need here, delve into the JDK documentation from Sun and search the Web, and if that&#146;s not enough, then find a dedicated Swing book. A good place to start is <i>The JFC Swing Tutorial</i>, by Walrath &amp; Campione (Addison Wesley, 1999). <font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2168" title="Send BackTalk Comment">Feedback</a></font><br></p>
<h2>
<a name="_Toc375545470"></a><a name="_Toc24775930"></a><a name="Heading22214"></a>Exercises</h2>
<p>Solutions to selected exercises can be found in the electronic document <i>The Thinking in Java Annotated Solution Guide</i>, available for a small fee from <i>www.BruceEckel.com</i>.<br></p>
<ol>
<li>	Create an applet/application using the <b>Console</b> class as shown in
this chapter. Include a text field and three buttons. When you press each
button, make some different text appear in the text field. <font size="-2"><a
href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2169" title="Send BackTalk
Comment">Feedback</a></font></li>
<li>	Add a check box to the applet created in Exercise 1, capture the event, and
insert different text into the text field. <font size="-2"><a
href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2170" title="Send BackTalk
Comment">Feedback</a></font></li>
<li>	Create an applet/application using <b>Console</b>. In the JDK documentation
from <i>java.sun.com</i>, find the <b>JPasswordField</b> and add this to the
program. If the user types in the correct password, use <b>Joptionpane</b> to
provide a success message to the user. <font size="-2"><a
href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2171" title="Send BackTalk
Comment">Feedback</a></font></li>
<li>	Create an applet/application using <b>Console</b>, and add all the Swing
components that have an <b>addActionListener(&#160;)</b> method. (Look these up
in the JDK documentation from <i>java.sun.com</i>. Hint: use the index.) Capture
their events and display an appropriate message for each inside a text field.
<font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2172"
title="Send BackTalk Comment">Feedback</a></font></li>
<li>	Create an applet/application using <b>Console</b>, with a <b>JButton</b>
and a<b> JTextField</b>. Write and attach the appropriate listener so that if
the button has the focus, characters typed into it will appear in the<b>
JTextField</b>. <font size="-2"><a
href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2173" title="Send BackTalk
Comment">Feedback</a></font></li>
<li>	Create an applet/application using <b>Console</b>. Add to the main frame
all the components described in this chapter, including menus and a dialog box.
<font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2174"
title="Send BackTalk Comment">Feedback</a></font></li>
<li>	Modify <b>TextFields.java</b> so that the characters in <b>t2</b> retain
the original case that they were typed in, instead of automatically being forced
to upper case. <font size="-2"><a
href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2175" title="Send BackTalk
Comment">Feedback</a></font></li>
<li>	Locate and download one or more of the free GUI builder development
environments available on the Internet, or buy a commercial product. Discover
what is necessary to add <b>BangBean</b> to this environment and to use it.
<font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2176"
title="Send BackTalk Comment">Feedback</a></font></li>
<li>	Add <b>Frog.class</b> to the manifest file as shown in this chapter and run
<b>jar</b> to create a JAR file containing both <b>Frog</b> and <b>BangBean</b>.
Now either download and install the Bean Builder from Sun, or use your own
Beans-enabled program builder tool and add the JAR file to your environment so
you can test the two Beans. <font size="-2"><a
href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2177" title="Send BackTalk
Comment">Feedback</a></font></li>
<li>	Create your own JavaBean called <b>Valve </b>that contains two properties:
a <b>boolean</b> called &#147;on&#148; and an <b>int</b> called
&#147;level.&#148; Create a manifest file, use <b>jar</b> to package your
Bean, then load it into the Bean Builder or into a Beans-enabled program builder
tool so that you can test it. <font size="-2"><a
href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2178" title="Send BackTalk
Comment">Feedback</a></font></li>
<li>	Modify <b>MessageBoxes.java</b> so that it has an individual
<b>ActionListener</b> for each button (instead of matching the button text).
<font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2179"
title="Send BackTalk Comment">Feedback</a></font></li>
<li>	Monitor a new type of event in <b>TrackEvent.java</b> by adding the new
event handling code. You&#146;ll need to discover on your own the type of event
that you want to monitor. <font size="-2"><a
href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2180" title="Send BackTalk
Comment">Feedback</a></font></li>
<li>	Inherit a new type of button from <b>JButton</b>. Each time you press this
button, it should change its color to a randomly selected value. See
<b>ColorBoxes.java</b> for an example of how to generate a random color value.
<font size="-2"><a href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2181"
title="Send BackTalk Comment">Feedback</a></font></li>
<li>	Modify <b>TextPane.java</b> to use a <b>JTextArea</b> instead of a
<b>JTextPane</b>. <font size="-2"><a
href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2182" title="Send BackTalk
Comment">Feedback</a></font></li>
<li>	Modify <b>Menus.java</b> to use radio buttons instead of check boxes on the
menus. <font size="-2"><a
href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2183" title="Send BackTalk
Comment">Feedback</a></font></li>
<li>	Simplify <b>List.java</b> by passing the array to the constructor and
eliminating the dynamic addition of elements to the list. <font size="-2"><a
href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2184" title="Send BackTalk
Comment">Feedback</a></font></li>
<li>	Modify <b>SineWave.java </b>to turn <b>SineDraw</b> into a JavaBean by
adding &#147;getter&#148; and &#147;setter&#148; methods. <font size="-2"><a
href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2185" title="Send BackTalk
Comment">Feedback</a></font></li>
<li>	Remember the &#147;sketching box&#148; toy with two knobs, one that
controls the vertical movement of the drawing point, and one that controls the
horizontal movement? Create one of those, using <b>SineWave.java </b>to get you
started. Instead of knobs, use sliders. Add a button that will erase the entire
sketch. <font size="-2"><a
href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2186" title="Send BackTalk
Comment">Feedback</a></font></li>
<li>	Starting with <b>SineWave.java</b>, create a program (an applet/application
using the <b>Console </b>class) that draws an animated sine wave that appears to
scroll past the viewing window like an oscilloscope, driving the animation with
a <b>Thread</b>. The speed of the animation should be controlled with a
<b>java.swing.JSlider</b> control. <font size="-2"><a
href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap14_2361" title="Send BackTalk
Comment">Feedback</a></font></li>
<li>	Modify Exercise 19 so that multiple sine wave panels are created within the
application. The number of sine wave panels should be controlled by HTML tags or
command-line parameters. <font size="-2"><a
href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap14_2362" title="Send BackTalk
Comment">Feedback</a></font></li>
<li>	Modify Exercise 19 so that the <b>java.swing.Timer</b> class is used to
drive the animation. Note the difference between this and
<b>java.util.Timer</b>. <font size="-2"><a
href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap14_2363" title="Send BackTalk
Comment">Feedback</a></font></li>
<li>	Create an &#147;asymptotic progress indicator&#148; that gets slower and
slower as it approaches the finish point. Add random erratic behavior so it will
periodically look like it&#146;s starting to speed up. <font size="-2"><a
href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2187" title="Send BackTalk
Comment">Feedback</a></font></li>
<li>	Modify <b>Progress.java</b> so that it does not share models, but instead
uses a listener to connect the slider and progress bar. <font size="-2"><a
href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2188" title="Send BackTalk
Comment">Feedback</a></font></li>
<li>	Follow the instructions in the section titled &#147;Packaging an applet
into a JAR file&#148; to place <b>TicTacToe.java</b> into a JAR file. Create an
HTML page with the simple version of the applet tag along with the archive
specification to use the JAR file. Run <b>HTMLconverter </b>on file to produce a
working HTML file. <font size="-2"><a
href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2189" title="Send BackTalk
Comment">Feedback</a></font></li>
<li>	Create an applet/application using <b>Console</b>. This should have three
sliders, one each for the red, green, and blue values in <b>java.awt.Color</b>.
The rest of the form should be a <b>JPanel</b> that displays the color
determined by the three sliders. Also include non-editable text fields that show
the current RGB values. <font size="-2"><a
href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2190" title="Send BackTalk
Comment">Feedback</a></font></li>
<li>	In the JDK documentation for <b>javax.swing</b>, look up the
<b>JColorChooser</b>. Write a program with a button that brings up the color
chooser as a dialog. <font size="-2"><a
href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2191" title="Send BackTalk
Comment">Feedback</a></font></li>
<li>	Almost every Swing component is derived from <b>Component</b>, which has a
<b>setCursor(&#160;)</b> method. Look this up in the JDK documentation. Create
an applet and change the cursor to one of the stock cursors in the <b>Cursor</b>
class. <font size="-2"><a
href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2192" title="Send BackTalk
Comment">Feedback</a></font></li>
<li>	Starting with <b>ShowAddListeners.java</b>, create a program with the full
functionality of <b>c10:ShowMethods.java</b>. <font size="-2"><a
href="mailto:TIJ3@MindView.net?Subject=[TIJ3]Chap13_2193" title="Send BackTalk
Comment">Feedback</a></font></li>
<li>	Turn <b>c12:TestRegularExpression.java</b> into an interactive Swing
program that allows you to put an input string in one <b>TextArea</b> and a
regular expression in a <b>TextField</b>. The results should be displayed in a
second <b>TextArea</b>.</li>
<li>	Modify <b>InvokeLaterFrame.java</b> to use
<b>invokeAndWait(&#160;)</b>.</li></ol><p><br></p>
<hr><p class="footnote text"><sup><a name="fn74" href="#fnB74">[74]</a></sup> A variation on this is called &#147;the principle of least astonishment,&#148; which essentially says: &#147;don&#146;t surprise the user.&#148;<br></p>
<p class="footnote text"><sup><a name="fn75" href="#fnB75">[75]</a></sup> Note that IBM created a new open-source GUI library for their Eclipse editor (<i>www.Eclipse.org</i>), which you may want to consider as an alternative to Swing.<br></p>
<p class="footnote text"><sup><a name="fn76" href="#fnB76">[76]</a></sup> Application frameworks are an example of the design pattern called the <i>Template Method</i>.<br></p>
<p class="footnote text"><sup><a name="fn77" href="#fnB77">[77]</a></sup> It is assumed that the reader is familiar with the basics of HTML. It&#146;s not too hard to figure out, and there are lots of books and resources.<br></p>
<p class="footnote text"><sup><a name="fn78" href="#fnB78">[78]</a></sup> In my opinion. And after you learn about Swing, you won&#146;t want to waste your time on the pre-Swing stuff.<br></p>
<p class="footnote text"><sup><a name="fn79" href="#fnB79">[79]</a></sup> As described earlier, &#147;Frame&#148; was already taken by the AWT, so Swing uses JFrame.<br></p>
<p class="footnote text"><sup><a name="fn80" href="#fnB80">[80]</a></sup> This will make sense after you&#146;ve read further in this chapter. First, make the reference <b>JApplet</b> a <b>static</b> member of the class (instead of a local variable of <b>main(&#160;)</b>), and then call <b>applet.stop(&#160;)</b> and <b>applet.destroy(&#160;)</b> inside <b>WindowAdapter.windowClosing(&#160;)</b> before you call <b>System.exit(&#160;)</b>.<br></p>
<p class="footnote text"><sup><a name="fn81" href="#fnB81">[81]</a></sup> There is no <b>MouseMotionEvent</b> even though it seems like there ought to be. Clicking and motion is combined into <b>MouseEvent</b>, so this second appearance of <b>MouseEvent</b> in the table is not an error.<br></p>
<p class="footnote text"><sup><a name="fn82" href="#fnB82">[82]</a></sup> In Java 1.0/1.1 you could <i>not</i> usefully inherit from the button object. This was only one of numerous fundamental design flaws.<br></p>
<p class="footnote text"><sup><a name="fn83" href="#fnB83">[83]</a></sup> This section and the next were created by Jeremy Meyer.<br></p>
<p class="footnote text"><sup><a name="fn84" href="#fnB84">[84]</a></sup> This concept is more fully explored in <i>Thinking in Enterprise Java</i>, at <i>www.BruceEckel.com.</i><br></p>
<p class="footnote text"><sup><a name="fn85" href="#fnB85">[85]</a></sup> This section was created by Jeremy Meyer.<br></p>

<!-- <hr><b>Placeholder</b> -->

<hr>

<div align="CENTER"><a href="TIJ315.htm" target="RightFrame"><img src="./prev.gif" alt="Previous " border="0"></a>
<a href="TIJ317.htm" target="RightFrame"><img src="./next.gif" alt="Next " border="0"></a>

<a href="TIJ3_t.htm"><img src="./first.gif" alt="Title Page " border="0"></a>
<a href="TIJ3_i.htm"><img src="./index.gif" alt="Index " border="0"></a>
<a href="TIJ3_c.htm"><img src="./contents.gif" alt="Contents " border="0"></a>
</div>

</font></body>

</html>
